import type { AnyConnection } from "./AnyConnection.js";
import type { AnyGadgetRecord, AnyGadgetRecordList } from "./AnyGadgetRecord.js";

export type AnyModelFinderMetadata = {
  /** The name of the GraphQL API field that should be called for this operation */
  operationName: string;
  /** The model's api identifier */
  modelApiIdentifier: string;
  /** What fields to select from the GraphQL API if no explicit selection is passed */
  defaultSelection: Record<string, any>;
  /** A namespace this operation is nested in. Absent for old clients or root-namespaced operations */
  namespace?: string | string[] | null;
  /** Type-time only type member used for strong typing of finders  */
  selectionType: any;
  /** Type-time only type member used for strong typing of finders  */
  optionsType: any;
  /** Type-time only type member used for strong typing of finders  */
  schemaType: any | null;
};

/**
 * Object representing one model's API in a high level way
 * This is a generic interface. Concrete ones are generated by Gadget, */
export interface AnyModelManager {
  connection: AnyConnection;
  findOne: ((id: string, options: any) => Promise<AnyGadgetRecord<any>>) & AnyModelFinderMetadata;
  findMany: ((options: any) => Promise<AnyGadgetRecordList<any>>) & AnyModelFinderMetadata;
  findFirst: ((options: any) => Promise<AnyGadgetRecord<any>>) & AnyModelFinderMetadata;
  maybeFindFirst(options: any): Promise<AnyGadgetRecord<any> | null>;
  maybeFindOne(id: string, options: any): Promise<AnyGadgetRecord<any> | null>;
}

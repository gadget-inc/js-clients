{"version":3,"file":"GadgetProvider.js","sourceRoot":"","sources":["../../src/GadgetProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { AnyClient, GadgetConnection } from \"@gadgetinc/api-client-core\";\nimport { $gadgetConnection, isGadgetClient } from \"@gadgetinc/api-client-core\";\nimport type { ReactNode } from \"react\";\nimport React, { useContext } from \"react\";\nimport type { Client as UrqlClient } from \"urql\";\nimport { Provider as UrqlProvider } from \"urql\";\n\n/**\n * React context that stores the current urql client\n *\n * urql doesn't have its own useClient hook, so we store it on our own context to get at the client object later\n **/\nexport const GadgetUrqlClientContext = React.createContext<UrqlClient | undefined>(undefined);\n\n/** Provides the Gadget auth configuration used in the auth hooks */\nexport interface GadgetAuthConfiguration {\n  /** The path that should be used for all Sign In buttons, and redirected to when the `User` is signed out */\n  signInPath: string;\n  /** The API identifier of the `User` `signOut` action. Defaults to `signOut` */\n  signOutActionApiIdentifier: string;\n  /** The path that users are redirected to after they sign in successfully. */\n  redirectOnSuccessfulSignInPath: string;\n}\n\n/** Provides the api client instance, if present, as well as the Gadget auth configuration for the application. */\nexport interface GadgetConfigurationContext {\n  api: AnyClient | undefined;\n  auth: GadgetAuthConfiguration;\n  navigate?: (path: string) => void;\n}\n\n/**\n * React context that stores an instance of the JS Client for an app (AKA the `api` object)\n */\nexport const GadgetConfigurationContext = React.createContext<GadgetConfigurationContext | undefined>(undefined);\n\ninterface BaseProviderProps {\n  children: ReactNode;\n  /** By default components/hooks will use `window.location` to load new URLs. If you have your own routing provider, the `navigate` prop can be used to push new routes.  */\n  navigate?: (path: string) => void;\n}\n\nexport interface ProviderProps extends BaseProviderProps {\n  /**\n   * An instance of your app's api client, often named `api`. This is the object that contains all of your generated query/mutation/subscription functions.\n   *\n   * @example\n   * import { Client } from \"@gadget-client/example-app\"\n   * const api = new Client();\n   * const App = () => {\n   *   return <Provider api={api}>\n   *     <Routes/>\n   *   </Provider>;\n   * }\n   */\n  api: AnyClient;\n  auth?: Partial<GadgetAuthConfiguration>;\n}\n\n/** @deprecated -- pass an instance of your app's api client instead with the `api` prop */\nexport interface DeprecatedProviderProps extends BaseProviderProps {\n  /**\n   * an urql client object from your current Gadget client, like `api.connection.currentClient`\n   * @deprecated -- pass an instance of your app's api client instead with the `api` prop\n   */\n  value: UrqlClient;\n}\n\nconst defaultSignInPath = \"/\";\nconst defaultSignOutApiIdentifier = \"signOut\";\nconst defaultRedirectOnSuccessfulSignInPath = \"/\";\n\n/**\n * Provider wrapper component that passes an api client instance to the other hooks.\n *\n * This component is __required__ as a wrapper around any React components using the other hooks in this library, like `useFindMany` or `useAction`.\n *\n * Pass an instance of your app's api client to the `api` prop.\n *\n * @example\n * <Provider api={api}>\n *   <MyApp />\n * </Provider>\n *\n * @example the Provider accepts the deprecated form of passing an urql client object right in -- this is deprecated and will be removed in a future version. Instead, just pass the whole api instance.\n * <Provider value={api.connection.currentClient}>\n *   <MyApp />\n * </Provider>\n *\n * @example the Provider accepts option sign in and sign out paths.\n * <Provider api={api} signInPath=\"/auth/signin\" signOutActionApiIdentifier=\"signOut\">\n *   <MyApp />\n * </Provider>\n */\nexport function Provider(props: ProviderProps | DeprecatedProviderProps) {\n  let gadgetClient: AnyClient | undefined = undefined;\n\n  let urqlClient: UrqlClient;\n  if (\"api\" in props) {\n    if (!isGadgetClient(props.api)) {\n      throw new Error(\n        \"Invalid Gadget API client passed to <Provider /> component -- please pass an instance of your generated client, like <Provider api={api} />!\"\n      );\n    }\n    gadgetClient = props.api;\n    urqlClient = props.api.connection.currentClient;\n  } else if (props.value) {\n    urqlClient = props.value;\n  } else {\n    throw new Error(\n      \"No Gadget API client passed to <Provider /> component -- please pass an instance of your generated client, like <Provider api={api} />!\"\n    );\n  }\n  // hack: make the client support suspending some queries when used by the react provider\n  // this flag is safe to mutably set here because it just serves as a flag for the urql react hooks, and doesn't affect imperative api client functioning\n  urqlClient.suspense = true;\n\n  let signInPath = defaultSignInPath;\n  let signOutActionApiIdentifier = defaultSignOutApiIdentifier;\n  let redirectOnSuccessfulSignInPath = defaultRedirectOnSuccessfulSignInPath;\n\n  if (\"auth\" in props) {\n    const { auth } = props;\n    if (auth?.signInPath) signInPath = auth.signInPath;\n    if (auth?.signOutActionApiIdentifier) signOutActionApiIdentifier = auth.signOutActionApiIdentifier;\n    if (auth?.redirectOnSuccessfulSignInPath) redirectOnSuccessfulSignInPath = auth.redirectOnSuccessfulSignInPath;\n  }\n\n  return (\n    <GadgetUrqlClientContext.Provider value={urqlClient}>\n      <GadgetConfigurationContext.Provider\n        value={{\n          api: gadgetClient,\n          navigate: props.navigate,\n          auth: {\n            signInPath,\n            signOutActionApiIdentifier,\n            redirectOnSuccessfulSignInPath,\n          },\n        }}\n      >\n        <UrqlProvider value={urqlClient}>{props.children}</UrqlProvider>\n      </GadgetConfigurationContext.Provider>\n    </GadgetUrqlClientContext.Provider>\n  );\n}\n\n/**\n * Get the current `GadgetConnection` object from React context.\n * Must be called within a component wrapped by the `<Provider api={...} />` component.\n **/\nexport const useConnection = () => {\n  const urqlClient = useContext(GadgetUrqlClientContext);\n  if (!urqlClient) {\n    throw new Error(\"No urql client object in React context, have you added the <Provider/> wrapper component from @gadgetinc/react?\");\n  }\n  const connection = (urqlClient as any)[$gadgetConnection] as unknown as GadgetConnection | undefined;\n  if (!connection) {\n    throw new Error(\n      `urql client found in context was not set up by the Gadget API client. Please ensure you are wrapping this hook with the <Provider/> component from @gadgetinc/react.\n\n      Possible remedies:\n       - ensuring you have the <Provider/> component wrapped around your hook invocation\n       - ensuring you are passing a value to the provider, usually <Provider api={api}>\n       - ensuring your @gadget-client/<your-app> package and your @gadgetinc/react package are up to date`\n    );\n  }\n\n  return connection;\n};\n\n/**\n * Get the current `api` object from React context\n * Must be called within a component wrapped by the `<Provider api={...} />` component.\n **/\nexport const useApi = () => {\n  const gadgetContext = useContext(GadgetConfigurationContext);\n  const urqlClient = useContext(GadgetUrqlClientContext);\n  if (!gadgetContext || !gadgetContext.api) {\n    if (urqlClient) {\n      throw new Error(\n        `useApi hook called in context with deprecated <Provider/> convention. Please ensure you are wrapping this hook with the <Provider/> component from @gadgetinc/react and passing it an instance of your api client, like <Provider api={api} />.\n\n        The <Provider /> component is currently being passed a value, like <Provider value={api.connection.currentClient}/>. Please update this to <Provider api={api} />.`\n      );\n    } else {\n      throw new Error(\n        `useApi hook called in context where no Gadget API client is available. Please ensure you are wrapping this hook with the <Provider/> component from @gadgetinc/react.\n\n      Possible remedies:\n       - ensuring you have the <Provider/> component wrapped around your hook invocation\n       - ensuring you are passing an api client instance to the provider, usually <Provider api={api}>\n       - ensuring your @gadget-client/<your-app> package and your @gadgetinc/react package are up to date`\n      );\n    }\n  }\n  return gadgetContext.api;\n};\n"]}
{"version":3,"file":"GadgetProvider.js","sourceRoot":"","sources":["../../src/GadgetProvider.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAG9D,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,QAAQ,IAAI,YAAY,EAAE,MAAM,MAAM,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAkB5C,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,CAAC,aAAa,CAAmB,IAAmC,CAAC,CAAC;AAyB3G,MAAM,iBAAiB,GAAG,GAAG,CAAC;AAC9B,MAAM,2BAA2B,GAAG,SAAS,CAAC;AAC9C,MAAM,qCAAqC,GAAG,GAAG,CAAC;AAElD;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAM,UAAU,QAAQ,CAAC,KAAoB;IAC3C,MAAM,EAAE,YAAY,EAAE,gBAAgB,EAAE,UAAU,EAAE,GAAG,mBAAmB,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,GAAG,YAAY,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAC7H,wFAAwF;IACxF,wJAAwJ;IACxJ,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;IAE3B,IAAI,UAAU,GAAG,iBAAiB,CAAC;IACnC,IAAI,0BAA0B,GAAG,2BAA2B,CAAC;IAC7D,IAAI,8BAA8B,GAAG,qCAAqC,CAAC;IAE3E,IAAI,MAAM,IAAI,KAAK,EAAE,CAAC;QACpB,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;QACvB,IAAI,IAAI,EAAE,UAAU;YAAE,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnD,IAAI,IAAI,EAAE,0BAA0B;YAAE,0BAA0B,GAAG,IAAI,CAAC,0BAA0B,CAAC;QACnG,IAAI,IAAI,EAAE,8BAA8B;YAAE,8BAA8B,GAAG,IAAI,CAAC,8BAA8B,CAAC;IACjH,CAAC;IAED,OAAO,CACL,oBAAC,gBAAgB,CAAC,QAAQ,IACxB,KAAK,EAAE;YACL,GAAG,EAAE,YAAY;YACjB,UAAU,EAAE,gBAAgB;YAC5B,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,IAAI,EAAE;gBACJ,UAAU;gBACV,0BAA0B;gBAC1B,8BAA8B;aAC/B;SACF;QAED,oBAAC,YAAY,IAAC,KAAK,EAAE,UAAU,IAAG,KAAK,CAAC,QAAQ,CAAgB,CACtC,CAC7B,CAAC;AACJ,CAAC","sourcesContent":["import type { GadgetApiContext as CoreGadgetApiContext } from \"@gadgetinc/client-hooks\";\nimport { registerClientHooks } from \"@gadgetinc/client-hooks\";\nimport type { AnyClient } from \"@gadgetinc/core\";\nimport type { ReactNode } from \"react\";\nimport React from \"react\";\nimport { Provider as UrqlProvider } from \"urql\";\nimport { reactAdapter } from \"./adapter.js\";\n\n/** Provides the Gadget auth configuration used in the auth hooks */\nexport interface GadgetAuthConfiguration {\n  /** The path that should be used for all Sign In buttons, and redirected to when the `User` is signed out */\n  signInPath: string;\n  /** The API identifier of the `User` `signOut` action. Defaults to `signOut` */\n  signOutActionApiIdentifier: string;\n  /** The path that users are redirected to after they sign in successfully. */\n  redirectOnSuccessfulSignInPath: string;\n}\n\n/** Provides the api client instance, if present, as well as the Gadget auth configuration for the application. */\nexport interface GadgetApiContext extends CoreGadgetApiContext {\n  auth: GadgetAuthConfiguration;\n  navigate?: (path: string) => void;\n}\n\nexport const GadgetApiContext = React.createContext<GadgetApiContext>(null as unknown as GadgetApiContext);\n\ninterface BaseProviderProps {\n  children: ReactNode;\n  /** By default components/hooks will use `window.location` to load new URLs. If you have your own routing provider, the `navigate` prop can be used to push new routes.  */\n  navigate?: (path: string) => void;\n}\n\nexport interface ProviderProps extends BaseProviderProps {\n  /**\n   * An instance of your app's api client, often named `api`. This is the object that contains all of your generated query/mutation/subscription functions.\n   *\n   * @example\n   * import { Client } from \"@gadget-client/example-app\"\n   * const api = new Client();\n   * const App = () => {\n   *   return <Provider api={api}>\n   *     <Routes/>\n   *   </Provider>;\n   * }\n   */\n  api: AnyClient;\n  auth?: Partial<GadgetAuthConfiguration>;\n}\n\nconst defaultSignInPath = \"/\";\nconst defaultSignOutApiIdentifier = \"signOut\";\nconst defaultRedirectOnSuccessfulSignInPath = \"/\";\n\n/**\n * Provider wrapper component that passes an api client instance to the other hooks.\n *\n * This component is __required__ as a wrapper around any React components using the other hooks in this library, like `useFindMany` or `useAction`.\n *\n * Pass an instance of your app's api client to the `api` prop.\n *\n * @example\n * <Provider api={api}>\n *   <MyApp />\n * </Provider>\n *\n * @example the Provider accepts the deprecated form of passing an urql client object right in -- this is deprecated and will be removed in a future version. Instead, just pass the whole api instance.\n * <Provider value={api.connection.currentClient}>\n *   <MyApp />\n * </Provider>\n *\n * @example the Provider accepts option sign in and sign out paths.\n * <Provider api={api} signInPath=\"/auth/signin\" signOutActionApiIdentifier=\"signOut\">\n *   <MyApp />\n * </Provider>\n */\nexport function Provider(props: ProviderProps) {\n  const { gadgetClient, gadgetConnection, urqlClient } = registerClientHooks(props.api, { ...reactAdapter, GadgetApiContext });\n  // hack: make the client support suspending some queries when used by the react provider\n  // this flag is safe to mutably set here because it just serves as a flag for the urql react hooks, and doesn't affect imperative api client functioning\n  urqlClient.suspense = true;\n\n  let signInPath = defaultSignInPath;\n  let signOutActionApiIdentifier = defaultSignOutApiIdentifier;\n  let redirectOnSuccessfulSignInPath = defaultRedirectOnSuccessfulSignInPath;\n\n  if (\"auth\" in props) {\n    const { auth } = props;\n    if (auth?.signInPath) signInPath = auth.signInPath;\n    if (auth?.signOutActionApiIdentifier) signOutActionApiIdentifier = auth.signOutActionApiIdentifier;\n    if (auth?.redirectOnSuccessfulSignInPath) redirectOnSuccessfulSignInPath = auth.redirectOnSuccessfulSignInPath;\n  }\n\n  return (\n    <GadgetApiContext.Provider\n      value={{\n        api: gadgetClient,\n        connection: gadgetConnection,\n        navigate: props.navigate,\n        auth: {\n          signInPath,\n          signOutActionApiIdentifier,\n          redirectOnSuccessfulSignInPath,\n        },\n      }}\n    >\n      <UrqlProvider value={urqlClient}>{props.children}</UrqlProvider>\n    </GadgetApiContext.Provider>\n  );\n}\n"]}
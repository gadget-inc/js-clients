{"version":3,"file":"useFindFirst.js","sourceRoot":"","sources":["../../src/useFindFirst.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,OAAO,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAE1C,MAAM,CAAC,IAAI,YAAY,GAAiB,cAAc,CAAC,cAAc,EAAE,CAAC,OAAuB,EAAE,SAAoB,EAAE,EAAE;IACvH,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;QAClC,MAAM,YAAY,GAAG,EAAE,GAAG,OAAO,EAAE,KAAK,EAAE,CAAC,EAA+B,CAAC;QAE3E,MAAM,eAAe,GAAG,SAAS,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QAClE,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC1C,OAAO,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACjD,CAAC,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;QAExF,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC5C,OAAO,EAAE,GAAG,SAAS,EAAE,GAAG,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAC5G,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,EAAE,eAAe,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;QAEzE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3B,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import type { RuntimeAdapter } from \"./adapter.js\";\nimport { createHookStub } from \"./createHooks.js\";\nimport type { CoreHooks, UseFindFirst } from \"./types.js\";\nimport { useQueryArgs } from \"./utils.js\";\n\nexport let useFindFirst: UseFindFirst = createHookStub(\"useFindFirst\", (adapter: RuntimeAdapter, coreHooks: CoreHooks) => {\n  useFindFirst = (manager, options) => {\n    const firstOptions = { ...options, first: 1 } as unknown as typeof options;\n\n    const memoizedOptions = coreHooks.useStructuralMemo(firstOptions);\n    const plan = adapter.framework.useMemo(() => {\n      return manager.findFirst.plan(memoizedOptions);\n    }, [manager, memoizedOptions]);\n    const [rawResult, refresh] = coreHooks.useGadgetQuery(useQueryArgs(plan, firstOptions));\n\n    const result = adapter.framework.useMemo(() => {\n      return { ...rawResult, ...manager.findFirst.processResult(rawResult, { pause: memoizedOptions?.pause }) };\n    }, [manager.findFirst.operationName, memoizedOptions?.pause, rawResult]);\n\n    return [result, refresh];\n  };\n});\n"]}
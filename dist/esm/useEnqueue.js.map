{"version":3,"file":"useEnqueue.js","sourceRoot":"","sources":["../../src/useEnqueue.ts"],"names":[],"mappings":"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","sourcesContent":["import type { EnqueueBackgroundActionOptions, GadgetConnection } from \"@gadgetinc/api-client-core\";\nimport {\n  BackgroundActionHandle,\n  disambiguateActionVariables,\n  disambiguateBulkActionVariables,\n  enqueueActionOperation,\n  get,\n  graphqlizeBackgroundOptions,\n} from \"@gadgetinc/api-client-core\";\nimport type { AnyActionFunction } from \"@gadgetinc/api-client-core/src/GadgetFunctions.js\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport type { UseMutationState } from \"urql\";\nimport { GadgetUrqlClientContext, useConnection } from \"./GadgetProvider.js\";\nimport { useGadgetMutation } from \"./useGadgetMutation.js\";\nimport type { EnqueueHookResult, EnqueueHookState } from \"./utils.js\";\nimport { ErrorWrapper, noProviderErrorMessage } from \"./utils.js\";\n\n/**\n * React hook to enqueue a Gadget action in the background. `useEnqueue` must be passed an action function from an instance of your generated API client library, like `useEnqueue(api.user.create)` or `useEnqueue(api.someGlobalAction)`. `useEnqueue` doesn't actually submit the background action when invoked, but instead returns a function for enqueuing the action in response to an event.\n *\n * @param action a model action or global action in your application's client, like `api.user.create` or `api.someGlobalAction`\n * @param options action options, like selecting the fields in the result\n *\n * @example\n * export function CreateUserButton(props: { name: string; email: string }) {\n *   const [{error, fetching, handle}, enqueue] = useEnqueue(api.user.create));\n *\n *   const onClick = () => enqueue(\n *     {\n *       name: props.name,\n *       email: props.email,\n *     }, {\n *       id: `send-email-action-${props.email}`\n *     }\n *   );\n *\n *   return (\n *     <>\n *       {error && <>Failed to enqueue user create: {error.toString()}</>}\n *       {fetching && <>Enqueuing action...</>}\n *       {data && <>Enqueued action with background action id={handle.id}</>}\n *       <button onClick={onClick}>Create user</button>\n *     </>\n *   );\n * }\n */\nexport const useEnqueue = <Action extends AnyActionFunction>(\n  action: Action,\n  baseBackgroundOptions?: EnqueueBackgroundActionOptions<Action>\n): EnqueueHookResult<Action> => {\n  if (!useContext(GadgetUrqlClientContext)) throw new Error(noProviderErrorMessage);\n\n  const plan = useMemo(() => enqueueActionOperation(action.operationName, action.variables, action.namespace), [action]);\n  const connection = useConnection();\n\n  const [rawState, runMutation] = useGadgetMutation(plan.query);\n\n  const state: EnqueueHookState<Action> = useMemo(() => processResult(connection, rawState, action), [rawState, action]);\n\n  return [\n    state,\n    useCallback(\n      async (input: Action[\"variablesType\"], options?: EnqueueBackgroundActionOptions<Action>) => {\n        const variables =\n          \"isBulk\" in action && action.isBulk ? disambiguateBulkActionVariables(action, input) : disambiguateActionVariables(action, input);\n\n        const fullContext = { ...baseBackgroundOptions, ...options };\n        variables.backgroundOptions = graphqlizeBackgroundOptions(fullContext);\n\n        const rawState = await runMutation(variables, fullContext);\n\n        return processResult(connection, { fetching: false, ...rawState }, action);\n      },\n      [action, connection, runMutation]\n    ),\n  ];\n};\n\n/** Processes urql's result object into the fancier Gadget result object */\nconst processResult = <Action extends AnyActionFunction>(\n  connection: GadgetConnection,\n  rawResult: UseMutationState<any, any>,\n  action: Action\n): EnqueueHookState<Action> => {\n  const { data, ...result } = rawResult;\n  let error = ErrorWrapper.forMaybeCombinedError(result.error);\n  let handle = null;\n  if (data) {\n    const dataPath = [\"background\", action.operationName];\n    if (action.namespace) {\n      dataPath.unshift(action.namespace);\n    }\n\n    const mutationData = get(data, dataPath);\n    if (mutationData) {\n      const errors = mutationData[\"errors\"];\n      if (errors && errors[0]) {\n        error = ErrorWrapper.forErrorsResponse(errors, error?.response);\n      } else {\n        handle = new BackgroundActionHandle<Action>(connection, action, mutationData.backgroundAction.id);\n      }\n    }\n  }\n\n  return { ...result, error, handle };\n};\n"]}
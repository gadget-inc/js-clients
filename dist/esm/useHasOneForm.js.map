{"version":3,"file":"useHasOneForm.js","sourceRoot":"","sources":["../../src/useHasOneForm.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useMemo } from \"react\";\nimport { useAutoFormMetadata } from \"./auto/AutoFormContext.js\";\nimport { useHasOneController } from \"./auto/hooks/useHasOneController.js\";\nimport { useRequiredChildComponentsValidator } from \"./auto/hooks/useRequiredChildComponentsValidator.js\";\nimport type { AutoRelationshipFormProps } from \"./auto/interfaces/AutoRelationshipInputProps.js\";\nimport { useSingleRelatedRecordRelationshipForm } from \"./useSingleRelatedRecordRelationshipForm.js\";\n\nexport const useHasOneForm = (props: AutoRelationshipFormProps) => {\n  useRequiredChildComponentsValidator(props, \"AutoHasOneForm\");\n  const { record, relatedModelOptions } = useHasOneController(props);\n\n  const form = useSingleRelatedRecordRelationshipForm({ ...props, relationshipController: { record, relatedModelOptions } });\n\n  const { isEditing, setIsEditing, setActionsOpen, setValue, path, metaDataPathPrefix } = form;\n  const { fields, model } = useAutoFormMetadata();\n\n  const newRecordInitialValues = useMemo(() => {\n    if (!model) {\n      return [];\n    }\n    const fullPathPrefix = model.apiIdentifier + \".\" + metaDataPathPrefix + \".\";\n    const fieldsToInitialize = fields\n      .filter((field) => field.path.startsWith(fullPathPrefix))\n      .map((field) => field.path.replace(fullPathPrefix, \"\"));\n\n    // Created records always start with all empty fields\n    const nullInitialValues = Object.fromEntries(fieldsToInitialize.map((key) => [key, null]));\n\n    return nullInitialValues;\n  }, [fields, model?.apiIdentifier, metaDataPathPrefix]);\n\n  /**\n   * Initializes the form state to create a new record\n   * If the current record was previously linked, then it will be unlinked\n   */\n  const startCreatingRecord = useCallback(() => {\n    setIsEditing(true);\n    setActionsOpen(false);\n\n    // Maintain the unlink value if we are replacing the existing related record with a new one\n    const unlinkValue = record?._unlink ?? record?.id;\n\n    setValue(path, {\n      ...newRecordInitialValues,\n      ...(unlinkValue\n        ? {\n            __replace: true, // To indicate that we are replacing the current record with a new one\n            _unlink: unlinkValue,\n          }\n        : {}),\n    });\n  }, [setIsEditing, setActionsOpen, newRecordInitialValues, path, setValue, record]);\n\n  const confirmEdit = useCallback(() => {\n    setIsEditing(false);\n    setActionsOpen(false);\n  }, [setIsEditing, setActionsOpen]);\n\n  /**\n   * Unlinks existing related records and removes created & selected records from the form state\n   */\n  const removeRecord = useCallback(() => {\n    setIsEditing(false);\n    setActionsOpen(false);\n\n    if (!record) {\n      return;\n    }\n\n    const { _unlink, _link, id: recordId } = record;\n    const isRecordSelectedFromDropdown = !!_link;\n    const unlinkValue = _unlink ?? recordId;\n\n    setValue(\n      path,\n      unlinkValue && !isRecordSelectedFromDropdown\n        ? { _unlink: unlinkValue } // unlinking he related record that is already linked in the API DB\n        : null // Removing the created record in the form that is not in the API DB\n    );\n  }, [record, path, setValue, setIsEditing, setActionsOpen]);\n\n  const isNewRecordThatUnlinksExisting = useMemo(() => {\n    if (!record) {\n      return false;\n    }\n    const hasUnlink = \"_unlink\" in record && record._unlink;\n    if (!hasUnlink) {\n      return false;\n    }\n\n    const { __typename, _unlink, ...otherFields } = record;\n    return Object.keys(otherFields).length > 0;\n  }, [record]);\n\n  const hasRecord = !!(record && (!(\"_unlink\" in record && record._unlink) || isNewRecordThatUnlinksExisting));\n  const isCreatingRecord = isEditing && !hasRecord;\n\n  return {\n    ...form,\n    confirmEdit,\n    removeRecord,\n    setIsEditing,\n    startCreatingRecord,\n    hasRecord,\n    isCreatingRecord,\n  };\n};\n"]}
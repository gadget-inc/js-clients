{"version":3,"file":"useTable.js","sourceRoot":"","sources":["../../src/useTable.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { SortOrder } from \"@gadgetinc/api-client-core\";\nimport {\n  type DefaultSelection,\n  type FindManyFunction,\n  type GadgetRecord,\n  type LimitToKnownKeys,\n  type Select,\n} from \"@gadgetinc/api-client-core\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { validateAutoTableProps } from \"./auto/AutoTableValidators.js\";\nimport { useModelMetadata } from \"./metadata.js\";\nimport { getTableColumns, getTableRows, getTableSelectionMap, getTableSpec } from \"./use-table/helpers.js\";\nimport type { TableOptions, TableResult } from \"./use-table/types.js\";\nimport { useList } from \"./useList.js\";\nimport { type OptionsType, type ReadOperationOptions } from \"./utils.js\";\n\nconst getNextDirection = (sortDirection: SortOrder | undefined) => {\n  switch (sortDirection) {\n    case \"Descending\":\n      return \"Ascending\";\n    case \"Ascending\":\n      return undefined;\n    case undefined:\n    default:\n      return \"Descending\";\n  }\n};\n\n/**\n * Headless React hook for powering a table showing a page of Gadget records from the backend, optionally sorted, filtered, searched, and selected from. Returns a standard hook result set with a tuple of the result object with `data`, `fetching`, and `error` keys, and a `refetch` function. `data` will be a `GadgetRecordList` object holding the list of returned records and pagination info.\n *\n * @param manager Gadget model manager to use\n * @param options options for filtering and searching records, and selecting the fields in each record of the result\n *\n * @example\n *\n * ```\n * TODO\n * ```\n */\nexport const useTable = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  F extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n  Options extends F[\"optionsType\"] & ReadOperationOptions & TableOptions\n>(\n  manager: { findMany: F },\n  options?: LimitToKnownKeys<\n    Options,\n    Omit<F[\"optionsType\"], \"sort\" | \"first\" | \"last\" | \"after\" | \"before\"> & ReadOperationOptions & TableOptions\n  >\n): TableResult<\n  GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>[]\n> => {\n  validateAutoTableProps(manager);\n\n  const namespace = manager.findMany.namespace;\n  const namespaceAsArray: string[] = namespace ? (Array.isArray(namespace) ? namespace : [namespace]) : [];\n  const {\n    metadata,\n    fetching: fetchingMetadata,\n    error: metadataError,\n  } = useModelMetadata(manager.findMany.modelApiIdentifier, namespaceAsArray);\n\n  const [sort, setSort] = useState<OptionsType[\"sort\"] | undefined>(options?.initialSort);\n\n  const [sortColumnApiIdentifier, setSortColumnApiIdentifier] = useState<string | undefined>(\n    options?.initialSort ? Object.keys(options.initialSort)[0] : undefined\n  );\n  const [sortDirection, setSortDirection] = useState<SortOrder | undefined>(\n    options?.initialSort ? Object.values(options.initialSort)[0] : undefined\n  );\n\n  const sortColumn = useCallback((colName: string, direction?: SortOrder) => {\n    if (direction) {\n      setSort({ [colName]: direction });\n    } else {\n      setSort(undefined);\n    }\n  }, []);\n\n  const handleColumnSort = useCallback(\n    (columnApiIdentifier: string) => {\n      const nextDirection = columnApiIdentifier !== sortColumnApiIdentifier ? \"Descending\" : getNextDirection(sortDirection);\n      setSortDirection(nextDirection);\n      setSortColumnApiIdentifier(nextDirection ? columnApiIdentifier : undefined);\n      sortColumn(columnApiIdentifier, nextDirection);\n    },\n    [sortColumnApiIdentifier, sortDirection]\n  );\n\n  const tableSpec = useMemo(\n    () => metadata && getTableSpec(metadata.fields, options?.columns, options?.excludeColumns, manager.findMany.defaultSelection),\n    [manager.findMany.defaultSelection, metadata, options?.columns, options?.excludeColumns]\n  );\n\n  const selectionMap = useMemo(() => options?.select ?? (tableSpec && getTableSelectionMap(tableSpec)), [options?.select, tableSpec]);\n\n  const [{ data, fetching: dataFetching, error: dataError, page, search, selection }, refresh] = useList(manager, {\n    ...options,\n    sort: sort,\n    filter: options?.filter,\n    select: selectionMap,\n    pause: !metadata, // Don't fetch data until metadata is loaded\n  } as any);\n\n  const tableData = useMemo(() => {\n    if (tableSpec && data && metadata) {\n      const columns = getTableColumns(tableSpec);\n      const rows = getTableRows(tableSpec, columns, data);\n      return {\n        rows,\n        columns,\n        data,\n        metadata,\n      };\n    } else {\n      return {\n        rows: null,\n        columns: null,\n        data: null,\n        metadata: null,\n      };\n    }\n  }, [data, metadata, tableSpec]);\n\n  const isAwaitingDebouncedSearchValue = search.value != search.debouncedValue;\n  const fetching = dataFetching || fetchingMetadata || isAwaitingDebouncedSearchValue;\n  const error = dataError || metadataError;\n\n  const sortState = {\n    column: sortColumnApiIdentifier ?? \"\",\n    direction: sortDirection ?? \"Ascending\",\n    handleColumnSort,\n    setSort: sortColumn,\n  };\n\n  return [\n    {\n      ...tableData,\n      page,\n      fetching,\n      error,\n      search,\n      sort: sortState,\n      selection,\n    },\n    refresh,\n  ];\n};\n"]}
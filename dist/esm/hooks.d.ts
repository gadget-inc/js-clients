declare const useGadgetQuery: <Data = any, Variables extends import("urql").AnyVariables = import("urql").AnyVariables>(args: import("@gadgetinc/api-client-core").UseGadgetQueryArgs<Variables, Data>) => import("@gadgetinc/api-client-core").UseQueryResponse<Data, Variables>, useGadgetMutation: <Data = any, Variables extends import("urql").AnyVariables = import("urql").AnyVariables>(query: import("urql").DocumentInput<Data, Variables>) => import("@gadgetinc/api-client-core").UseMutationResponse<Data, Variables>, useConnection: () => import("@gadgetinc/api-client-core").GadgetConnection, useApi: () => import("@gadgetinc/api-client-core").AnyClient;
export { useApi, useConnection, useGadgetMutation as useMutation, useGadgetQuery as useQuery };
export declare const useAction: <GivenOptions extends import("@gadgetinc/api-client-core").OptionsType, SchemaT, F extends import("@gadgetinc/api-client-core").ActionFunction<GivenOptions, any, any, SchemaT, any>, Options extends F["optionsType"]>(action: F, options?: import("@gadgetinc/api-client-core").LimitToKnownKeys<Options, F["optionsType"]> | undefined) => import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ActionHookResult<F["hasReturnType"] extends true ? any : import("@gadgetinc/api-client-core").GadgetRecord<import("@gadgetinc/api-client-core").Select<Exclude<F["schemaType"], null | undefined>, import("@gadgetinc/api-client-core").DefaultSelection<F["selectionType"], Options, F["defaultSelection"]>>>, Exclude<F["variablesType"], null | undefined>>;
export declare const useBulkAction: <GivenOptions extends import("@gadgetinc/api-client-core").OptionsType, SchemaT, F extends import("@gadgetinc/api-client-core").BulkActionFunction<GivenOptions, any, any, SchemaT, any>, Options extends F["optionsType"]>(action: F, options?: import("@gadgetinc/api-client-core").LimitToKnownKeys<Options, F["optionsType"]> | undefined) => import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ActionHookResult<F["hasReturnType"] extends true ? any[] : import("@gadgetinc/api-client-core").GadgetRecord<import("@gadgetinc/api-client-core").Select<Exclude<F["schemaType"], null | undefined>, import("@gadgetinc/api-client-core").DefaultSelection<F["selectionType"], Options, F["defaultSelection"]>>>[], Exclude<F["variablesType"], null | undefined>>;
export declare const useEnqueue: <SchemaT, Action extends import("@gadgetinc/api-client-core").AnyActionFunction>(action: Action, baseBackgroundOptions?: import("@gadgetinc/api-client-core").EnqueueBackgroundActionOptions<Action_1> | undefined) => import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").EnqueueHookResult<SchemaT, Action>;
export declare const useFetch: {
    (path: string, options: {
        stream: string;
    } & import("@gadgetinc/api-client-core").FetchHookOptions): import("@gadgetinc/api-client-core").FetchHookResult<string, ReadableStream<string>>;
    (path: string, options: {
        stream: true;
    } & import("@gadgetinc/api-client-core").FetchHookOptions): import("@gadgetinc/api-client-core").FetchHookResult<ReadableStream<Uint8Array>, ReadableStream<Uint8Array>>;
    <T extends Record<string, any>>(url: string, options: {
        json: true;
    } & import("@gadgetinc/api-client-core").FetchHookOptions): import("@gadgetinc/api-client-core").FetchHookResult<T, T>;
    (path: string, options?: import("@gadgetinc/api-client-core").FetchHookOptions | undefined): import("@gadgetinc/api-client-core").FetchHookResult<string, string>;
};
export declare const useFindMany: <GivenOptions extends import("@gadgetinc/api-client-core").OptionsType, SchemaT, F extends import("@gadgetinc/api-client-core").FindManyFunction<GivenOptions, any, SchemaT, any>, Options extends F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions>(manager: {
    findMany: F;
}, options?: import("@gadgetinc/api-client-core").LimitToKnownKeys<Options, F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions> | undefined) => import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ReadHookResult<import("@gadgetinc/api-client-core").GadgetRecordList<import("@gadgetinc/api-client-core").Select<Exclude<F["schemaType"], null | undefined>, import("@gadgetinc/api-client-core").DefaultSelection<F["selectionType"], Options, F["defaultSelection"]>>>>;
export declare const useFindOne: <GivenOptions extends import("@gadgetinc/api-client-core").OptionsType, SchemaT, F extends import("@gadgetinc/api-client-core").FindOneFunction<GivenOptions, any, SchemaT, any>, Options extends F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions>(manager: {
    findOne: F;
}, id: string, options?: import("@gadgetinc/api-client-core").LimitToKnownKeys<Options, F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions> | undefined) => import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ReadHookResult<import("@gadgetinc/api-client-core").GadgetRecord<import("@gadgetinc/api-client-core").Select<Exclude<F["schemaType"], null | undefined>, import("@gadgetinc/api-client-core").DefaultSelection<F["selectionType"], Options, F["defaultSelection"]>>>>;
export declare const useFindBy: <GivenOptions extends import("@gadgetinc/api-client-core").OptionsType, SchemaT, F extends import("@gadgetinc/api-client-core").FindOneFunction<GivenOptions, any, SchemaT, any>, Options extends F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions>(finder: F, value: string, options?: import("@gadgetinc/api-client-core").LimitToKnownKeys<Options, F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions> | undefined) => import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ReadHookResult<import("@gadgetinc/api-client-core").GadgetRecord<import("@gadgetinc/api-client-core").Select<Exclude<F["schemaType"], null | undefined>, import("@gadgetinc/api-client-core").DefaultSelection<F["selectionType"], Options, F["defaultSelection"]>>>>;
export declare const useFindFirst: <GivenOptions extends import("@gadgetinc/api-client-core").OptionsType, SchemaT, F extends import("@gadgetinc/api-client-core").FindFirstFunction<GivenOptions, any, SchemaT, any>, Options extends F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions>(manager: {
    findFirst: F;
}, options?: import("@gadgetinc/api-client-core").LimitToKnownKeys<Options, F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions> | undefined) => import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ReadHookResult<import("@gadgetinc/api-client-core").GadgetRecord<import("@gadgetinc/api-client-core").Select<Exclude<F["schemaType"], null | undefined>, import("@gadgetinc/api-client-core").DefaultSelection<F["selectionType"], Options, F["defaultSelection"]>>>>;
export declare const useGet: <GivenOptions extends import("@gadgetinc/api-client-core").OptionsType, SchemaT, F extends import("@gadgetinc/api-client-core").GetFunction<GivenOptions, any, SchemaT, any>, Options extends F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions>(manager: {
    get: F;
}, options?: import("@gadgetinc/api-client-core").LimitToKnownKeys<Options, F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions> | undefined) => import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ReadHookResult<import("@gadgetinc/api-client-core").GadgetRecord<import("@gadgetinc/api-client-core").Select<Exclude<F["schemaType"], null | undefined>, import("@gadgetinc/api-client-core").DefaultSelection<F["selectionType"], Options, F["defaultSelection"]>>>>;
export declare const useGlobalAction: <F extends import("@gadgetinc/api-client-core").GlobalActionFunction<any>>(action: F) => import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ActionHookResultWithOptionalCallbackVariables<any, Exclude<F["variablesType"], null | undefined>>;
export declare const useMaybeFindFirst: <GivenOptions extends import("@gadgetinc/api-client-core").OptionsType, SchemaT, F extends import("@gadgetinc/api-client-core").FindFirstFunction<GivenOptions, any, SchemaT, any>, Options extends F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions>(manager: {
    findFirst: F;
}, options?: import("@gadgetinc/api-client-core").LimitToKnownKeys<Options, F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions> | undefined) => import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ReadHookResult<import("@gadgetinc/api-client-core").GadgetRecord<import("@gadgetinc/api-client-core").Select<Exclude<F["schemaType"], null | undefined>, import("@gadgetinc/api-client-core").DefaultSelection<F["selectionType"], Options, F["defaultSelection"]>>> | null>;
export declare const useMaybeFindOne: <GivenOptions extends import("@gadgetinc/api-client-core").OptionsType, SchemaT, F extends import("@gadgetinc/api-client-core").FindOneFunction<GivenOptions, any, SchemaT, any>, Options extends F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions>(manager: {
    findOne: F;
}, id: string, options?: import("@gadgetinc/api-client-core").LimitToKnownKeys<Options, F["optionsType"] & import("@gadgetinc/api-client-core").ReadOperationOptions> | undefined) => import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ReadHookResult<import("@gadgetinc/api-client-core").GadgetRecord<import("@gadgetinc/api-client-core").Select<Exclude<F["schemaType"], null | undefined>, import("@gadgetinc/api-client-core").DefaultSelection<F["selectionType"], Options, F["defaultSelection"]>>> | null>;
export declare const useView: {
    <F extends import("@gadgetinc/api-client-core").ViewFunctionWithoutVariables<any>>(view: F, options?: Omit<import("@gadgetinc/api-client-core").ReadOperationOptions, "live"> | undefined): import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ReadHookResult<import("@gadgetinc/api-client-core").ViewResult<F>>;
    <F_1 extends import("@gadgetinc/api-client-core").ViewFunctionWithVariables<any, any>>(view: F_1, variables: F_1["variablesType"], options?: Omit<import("@gadgetinc/api-client-core").ReadOperationOptions, "live"> | undefined): import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ReadHookResult<import("@gadgetinc/api-client-core").ViewResult<F_1>>;
    (gellyQuery: string, variables?: Record<string, unknown> | undefined, options?: Omit<import("@gadgetinc/api-client-core").ReadOperationOptions, "live"> | undefined): import("node_modules/@gadgetinc/api-client-core/dist/esm/hooks/utils.js").ReadHookResult<unknown>;
};

{"version":3,"file":"useMaybeFindFirst.js","sourceRoot":"","sources":["../../src/useMaybeFindFirst.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,GAAG,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAC;AACvF,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAChC,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,iBAAiB,EAAE,MAAM,wBAAwB,CAAC;AAE3D,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAExD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAM/B,OAAyB,EACzB,OAA4E,EAG3E,EAAE;IACH,MAAM,YAAY,GAAG,EAAE,GAAG,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IAC9C,MAAM,eAAe,GAAG,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACxD,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE;QACxB,OAAO,iBAAiB,CACtB,OAAO,CAAC,SAAS,CAAC,aAAa,EAC/B,OAAO,CAAC,SAAS,CAAC,gBAAgB,EAClC,OAAO,CAAC,SAAS,CAAC,kBAAkB,EACpC,eAAe,CAChB,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;IAE/B,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;IAE9E,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE;QAC1B,MAAM,QAAQ,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QACnD,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC;QAClC,IAAI,IAAI,EAAE;YACR,MAAM,UAAU,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACjD,IAAI,UAAU,EAAE;gBACd,IAAI,GAAG,iBAAiB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;aAC5D;iBAAM;gBACL,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;aACxB;SACF;QAED,MAAM,KAAK,GAAG,YAAY,CAAC,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAElE,OAAO;YACL,GAAG,SAAS;YACZ,KAAK;YACL,IAAI;SACL,CAAC;IACJ,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IAEzB,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["import type { DefaultSelection, FindFirstFunction, GadgetRecord, LimitToKnownKeys, Select } from \"@gadgetinc/api-client-core\";\nimport { findManyOperation, get, hydrateConnection } from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { useGadgetQuery } from \"./useGadgetQuery.js\";\nimport { useStructuralMemo } from \"./useStructuralMemo.js\";\nimport type { OptionsType, ReadHookResult, ReadOperationOptions } from \"./utils.js\";\nimport { ErrorWrapper, useQueryArgs } from \"./utils.js\";\n\n/**\n * React hook to fetch many Gadget records using the `maybeFindFirst` method of a given manager.\n *\n * @param manager Gadget model manager to use\n * @param options options for filtering and searching records, and selecting the fields in each record of the result\n *\n * @example\n *\n * ```\n * export function Users() {\n *   const [result, refresh] = useMaybeFindFirst(Client.user, {\n *     select: {\n *       name: true,\n *     },\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No user found</>;\n *\n *   return <div>{result.data.name}</div>;\n * }\n * ```\n */\nexport const useMaybeFindFirst = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends FindFirstFunction<GivenOptions, any, SchemaT, any>,\n  Options extends F[\"optionsType\"] & ReadOperationOptions\n>(\n  manager: { findFirst: F },\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"] & ReadOperationOptions>\n): ReadHookResult<null | GadgetRecord<\n  Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>\n>> => {\n  const firstOptions = { ...options, first: 1 };\n  const memoizedOptions = useStructuralMemo(firstOptions);\n  const plan = useMemo(() => {\n    return findManyOperation(\n      manager.findFirst.operationName,\n      manager.findFirst.defaultSelection,\n      manager.findFirst.modelApiIdentifier,\n      memoizedOptions\n    );\n  }, [manager, memoizedOptions]);\n\n  const [rawResult, refresh] = useGadgetQuery(useQueryArgs(plan, firstOptions));\n\n  const result = useMemo(() => {\n    const dataPath = [manager.findFirst.operationName];\n    let data = rawResult.data ?? null;\n    if (data) {\n      const connection = get(rawResult.data, dataPath);\n      if (connection) {\n        data = hydrateConnection(rawResult, connection)[0] ?? null;\n      } else {\n        data = data[0] ?? null;\n      }\n    }\n\n    const error = ErrorWrapper.forMaybeCombinedError(rawResult.error);\n\n    return {\n      ...rawResult,\n      error,\n      data,\n    };\n  }, [rawResult, manager]);\n\n  return [result, refresh];\n};\n"]}
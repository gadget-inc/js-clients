{"version":3,"file":"useView.js","sourceRoot":"","sources":["../../src/useView.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAC;AACpE,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAChC,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,iBAAiB,EAAE,MAAM,wBAAwB,CAAC;AAE3D,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAsDxD,MAAM,UAAU,OAAO,CACrB,IAAO,EACP,kBAAoE,EACpE,YAAiD;IAEjD,IAAI,SAAiC,CAAC;IACtC,IAAI,OAAuD,CAAC;IAE5D,IAAI,WAAW,IAAI,IAAI,EAAE,CAAC;QACxB,SAAS,GAAG,kBAAgC,CAAC;QAC7C,OAAO,GAAG,YAAY,CAAC;IACzB,CAAC;SAAM,IAAI,kBAAkB,EAAE,CAAC;QAC9B,OAAO,GAAG,kBAAwD,CAAC;IACrE,CAAC;IAED,MAAM,iBAAiB,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACvD,MAAM,eAAe,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,iBAAiB,IAAI,EAAE,CAA0B,CAAC,EAAE,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAErH,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC;IAEjF,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE;QAC1B,MAAM,QAAQ,GAAG,iBAAiB,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACzE,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC3C,MAAM,KAAK,GAAG,YAAY,CAAC,iBAAiB,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAElF,OAAO,EAAE,GAAG,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACvC,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;IAEtC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC3B,CAAC","sourcesContent":["import type { ViewFunction, ViewFunctionWithoutVariables, ViewFunctionWithVariables, ViewResult } from \"@gadgetinc/api-client-core\";\nimport { get, namespaceDataPath } from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { useGadgetQuery } from \"./useGadgetQuery.js\";\nimport { useStructuralMemo } from \"./useStructuralMemo.js\";\nimport type { ReadHookResult, ReadOperationOptions } from \"./utils.js\";\nimport { ErrorWrapper, useQueryArgs } from \"./utils.js\";\n\n/**\n * React hook to fetch the result of a computed view from the backend. Returns a standard hook result set with a tuple of the result object with `data`, `fetching`, and `error` keys, and a `refetch` function. `data` will be the shape of the computed view's result.\n *\n * @param manager Gadget view function to run\n * @param options options for controlling client side execution\n *\n * @example\n *\n * ```\n * export function Leaderboard() {\n *   const [result, refresh] = useView(api.leaderboard);\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No data found</>;\n *\n *   return <>{result.data.map((leaderboard) => <div>{leaderboard.name}: {leaderboard.score}</div>)}</>;\n * }\n * ```\n */\nexport function useView<F extends ViewFunctionWithoutVariables<any>>(\n  view: F,\n  options?: Omit<ReadOperationOptions, \"live\">\n): ReadHookResult<ViewResult<F>>;\n/**\n * React hook to fetch the result of a computed view with variables from the backend. Returns a standard hook result set with a tuple of the result object with `data`, `fetching`, and `error` keys, and a `refetch` function. `data` will be the shape of the computed view's result.\n *\n * @param manager Gadget view function to run\n * @param variables variables to pass to the backend view\n * @param options options for controlling client side execution\n *\n * @example\n *\n * ```\n * export function Leaderboard() {\n *   const [result, refresh] = useView(api.leaderboard, {\n *     first: 10,\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No data found</>;\n *\n *   return <>{result.data.map((leaderboard) => <div>{leaderboard.name}: {leaderboard.score}</div>)}</>;\n * }\n * ```\n */\nexport function useView<F extends ViewFunctionWithVariables<any, any>>(\n  view: F,\n  variables: F[\"variablesType\"],\n  options?: Omit<ReadOperationOptions, \"live\">\n): ReadHookResult<ViewResult<F>>;\nexport function useView<VariablesT, F extends ViewFunction<VariablesT, any>>(\n  view: F,\n  variablesOrOptions?: VariablesT | Omit<ReadOperationOptions, \"live\">,\n  maybeOptions?: Omit<ReadOperationOptions, \"live\">\n): ReadHookResult<ViewResult<F>> {\n  let variables: VariablesT | undefined;\n  let options: Omit<ReadOperationOptions, \"live\"> | undefined;\n\n  if (\"variables\" in view) {\n    variables = variablesOrOptions as VariablesT;\n    options = maybeOptions;\n  } else if (variablesOrOptions) {\n    options = variablesOrOptions as Omit<ReadOperationOptions, \"live\">;\n  }\n\n  const memoizedVariables = useStructuralMemo(variables);\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => view.plan((memoizedVariables ?? {}) as unknown as VariablesT), [view, memoizedVariables]);\n\n  const [rawResult, refresh] = useGadgetQuery(useQueryArgs(plan, memoizedOptions));\n\n  const result = useMemo(() => {\n    const dataPath = namespaceDataPath([view.operationName], view.namespace);\n    const data = get(rawResult.data, dataPath);\n    const error = ErrorWrapper.errorIfDataAbsent(rawResult, dataPath, options?.pause);\n\n    return { ...rawResult, data, error };\n  }, [view, options?.pause, rawResult]);\n\n  return [result, refresh];\n}\n"]}
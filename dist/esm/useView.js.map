{"version":3,"file":"useView.js","sourceRoot":"","sources":["../../src/useView.ts"],"names":[],"mappings":"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","sourcesContent":["import type { GQLBuilderResult, VariablesOptions, ViewFunction, ViewResult } from \"@gadgetinc/core\";\nimport type { RuntimeAdapter } from \"./adapter.js\";\nimport { createHookStub } from \"./createHooks.js\";\nimport type { CoreHooks, ReadHookResult, ReadOperationOptions, UseView } from \"./types.js\";\nimport { useQueryArgs } from \"./utils.js\";\n\nexport let useView: UseView = createHookStub(\"useView\", (adapter: RuntimeAdapter, coreHooks: CoreHooks) => {\n  useView = <VariablesT, F extends ViewFunction<VariablesT, any>>(\n    view: F | string,\n    variablesOrOptions?: VariablesT | Omit<ReadOperationOptions, \"live\">,\n    maybeOptions?: Omit<ReadOperationOptions, \"live\">\n  ): ReadHookResult<ViewResult<F>> => {\n    let variables: VariablesT | undefined;\n    let options: Omit<ReadOperationOptions, \"live\"> | undefined;\n    const { errorIfDataAbsent } = coreHooks.useCoreImplementation();\n\n    if (typeof view == \"string\" || \"variables\" in view) {\n      variables = variablesOrOptions as VariablesT;\n      options = maybeOptions;\n    } else if (variablesOrOptions) {\n      options = variablesOrOptions as Omit<ReadOperationOptions, \"live\">;\n    }\n\n    const memoizedVariables = coreHooks.useStructuralMemo(variables);\n    const memoizedOptions = coreHooks.useStructuralMemo({\n      ...options,\n      context: {\n        ...options?.context,\n        // if the view exports the typenames it references, add them to the context so urql will refresh the view when mutations are made against these typenames\n        additionalTypenames: [\n          ...(options?.context?.additionalTypenames ?? []),\n          ...(typeof view == \"string\" ? [] : view.referencedTypenames ?? []),\n        ],\n      },\n    });\n\n    const plan = adapter.framework.useMemo((): GQLBuilderResult => {\n      if (typeof view == \"string\") {\n        return { query: inlineViewQuery, variables: { query: view, variables: memoizedVariables } };\n      } else {\n        const variablesOptions: VariablesOptions = {};\n        if (\"variables\" in view && memoizedVariables) {\n          for (const [name, variable] of Object.entries(view.variables)) {\n            const value = memoizedVariables[name as keyof typeof memoizedVariables] as unknown;\n            if (typeof value != \"undefined\" && value !== null) {\n              variablesOptions[name] = {\n                value,\n                ...variable,\n              };\n            }\n          }\n        }\n\n        return view.plan(variablesOptions);\n      }\n    }, [view, memoizedVariables]);\n\n    const [rawResult, refresh] = coreHooks.useGadgetQuery(useQueryArgs(plan, memoizedOptions));\n\n    const result = adapter.framework.useMemo(() => {\n      if (typeof view == \"string\") {\n        const data = rawResult.data?.[\"gellyView\"];\n        const error = errorIfDataAbsent(rawResult, [\"gellyView\"], options?.pause);\n        return { ...rawResult, data, error };\n      } else {\n        return { ...rawResult, ...view.processResult(rawResult, { pause: options?.pause }) };\n      }\n    }, [rawResult, view, options?.pause]);\n\n    return [result, refresh];\n  };\n});\n\nconst inlineViewQuery = `query InlineView($query: String!, $variables: JSONObject) { \n  gellyView(query: $query, variables: $variables) \n}`;\n"]}
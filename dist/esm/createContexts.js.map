{"version":3,"file":"createContexts.js","sourceRoot":"","sources":["../../src/createContexts.ts"],"names":[],"mappings":"AAgBA,IAAI,gCAAyC,CAAC;AAC9C,IAAI,mCAA4C,CAAC;AAEjD,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,OAAuB,EAAgB,EAAE;IACtE,IAAI,CAAC,gCAAgC,EAAE,CAAC;QACtC,gCAAgC,GAAG,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IAChF,CAAC;IAED,IAAI,CAAC,mCAAmC,EAAE,CAAC;QACzC,mCAAmC,GAAG,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IACnF,CAAC;IAED,OAAO;QACL,uBAAuB,EAAE,gCAAgC;QACzD,0BAA0B,EAAE,mCAAmC;KAChE,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { RuntimeAdapter } from \"./adaptors/types.js\";\n\nexport interface CoreContexts {\n  /**\n   * Context that stores the current urql client\n   *\n   * urql doesn't have its own useClient hook, so we store it on our own context to get at the client object later\n   **/\n  GadgetUrqlClientContext: unknown;\n\n  /**\n   * Context that stores an instance of the JS Client for an app (AKA the `api` object)\n   */\n  GadgetConfigurationContext: unknown;\n}\n\nlet GadgetUrqlClientContextSingleton: unknown;\nlet GadgetConfigurationContextSingleton: unknown;\n\nexport const createContexts = (adapter: RuntimeAdapter): CoreContexts => {\n  if (!GadgetUrqlClientContextSingleton) {\n    GadgetUrqlClientContextSingleton = adapter.framework.createContext(undefined);\n  }\n\n  if (!GadgetConfigurationContextSingleton) {\n    GadgetConfigurationContextSingleton = adapter.framework.createContext(undefined);\n  }\n\n  return {\n    GadgetUrqlClientContext: GadgetUrqlClientContextSingleton,\n    GadgetConfigurationContext: GadgetConfigurationContextSingleton,\n  };\n};\n"]}
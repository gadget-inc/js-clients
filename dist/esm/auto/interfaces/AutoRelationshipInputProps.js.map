{"version":3,"file":"AutoRelationshipInputProps.js","sourceRoot":"","sources":["../../../../src/auto/interfaces/AutoRelationshipInputProps.tsx"],"names":[],"mappings":"AAqCA,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,WAAuC,EAA2B,EAAE;IACvG,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,IAAI,OAAO,WAAW,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;QACnE,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;AAClC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,WAAsC,EAA+B,EAAE;IACpH,MAAM,iBAAiB,GAAG,oBAAoB,CAAC,WAAW,CAAC,CAAC;IAC5D,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACvB,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,OAAO,CAAC,iBAAiB,CAAC,OAAO,EAAE,iBAAiB,CAAC,SAAS,EAAE,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AAC9F,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,MAAqC,EAAE,EAAE;IAC7E,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AACpG,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,MAAwB,EAAE,EAAE;IACnD,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IACE,OAAO,MAAM,KAAK,QAAQ;QAC1B,OAAO,IAAI,MAAM;QACjB,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ;QAChC,MAAM,CAAC,KAAK;QACZ,UAAU,IAAI,MAAM,CAAC,KAAK;QAC1B,MAAM,CAAC,KAAK,CAAC,QAAQ,EACrB,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["import type { FindManyOptions } from \"@gadgetinc/api-client-core\";\nimport type { ReactNode } from \"react\";\nimport type { Control } from \"../../useActionForm.js\";\n\nexport type RecordFilter = FindManyOptions[\"filter\"];\n\nexport interface AutoRelationshipInputProps {\n  field: string;\n  control?: Control<any>;\n  optionLabel?: OptionLabel;\n  label?: string;\n  recordFilter?: RecordFilter;\n}\n\nexport type DisplayedRecordOption = RecordLabel<ReactNode> & {\n  id: string;\n};\n\n/**\n * Type for the option label when displaying a list of records from a related model\n */\nexport type OptionLabel = string | string[] | ((props: { record: Record<string, any> }) => ReactNode);\n\nexport type RecordLabel<T = OptionLabel> = {\n  primary?: T;\n  secondary?: T;\n  tertiary?: T;\n};\n\nexport type AutoRelationshipFormProps = {\n  field: string;\n  label?: ReactNode;\n  children: ReactNode;\n  recordLabel?: OptionLabel | RecordLabel;\n  recordFilter?: RecordFilter;\n};\n\nexport const getRecordLabelObject = (recordLabel?: OptionLabel | RecordLabel): RecordLabel | undefined => {\n  if (!recordLabel) {\n    return undefined;\n  }\n\n  if (typeof recordLabel === \"object\" && !Array.isArray(recordLabel)) {\n    return recordLabel;\n  }\n\n  return { primary: recordLabel };\n};\n\nexport const getOptionLabelsFromRecordLabel = (recordLabel: OptionLabel | RecordLabel): (OptionLabel | undefined)[] => {\n  const recordLabelObject = getRecordLabelObject(recordLabel);\n  if (!recordLabelObject) {\n    return [];\n  }\n  return [recordLabelObject.primary, recordLabelObject.secondary, recordLabelObject.tertiary];\n};\n\nexport const shouldShowOptionLabel = (option?: DisplayedRecordOption | null) => {\n  return option ? [option.primary, option.secondary, option.tertiary].some(canLabelBeShown) : false;\n};\n\nconst canLabelBeShown = (option?: React.ReactNode) => {\n  if (!option) {\n    return false;\n  }\n\n  if (typeof option === \"string\") {\n    return true;\n  }\n\n  if (\n    typeof option === \"object\" &&\n    \"props\" in option &&\n    typeof option.props === \"object\" &&\n    option.props &&\n    \"children\" in option.props &&\n    option.props.children\n  ) {\n    return true;\n  }\n  return false;\n};\n"]}
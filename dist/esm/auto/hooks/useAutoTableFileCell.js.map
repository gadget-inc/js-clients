{"version":3,"file":"useAutoTableFileCell.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useAutoTableFileCell.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEhC,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAE7D,MAAM,oBAAoB,GAAG,EAAE,CAAC;AAEhC,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,KAA+B,EAAE,EAAE;IACtE,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IAExB,MAAM,gBAAgB,GAAG,KAAK,CAAC,QAAQ,CAAC;IAExC,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,EAAE;QACrC,MAAM,QAAQ,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE7C,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACxB,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC3C,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;YAEjC,IAAI,IAAI,CAAC,MAAM,GAAG,oBAAoB,EAAE,CAAC;gBACvC,qCAAqC;gBACrC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,oBAAoB,CAAC,GAAG,MAAM,CAAC;YAC1D,CAAC;YAED,4CAA4C;YAC5C,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrC,CAAC;aAAM,CAAC;YACN,mDAAmD;YACnD,OAAO,gBAAgB,CAAC;QAC1B,CAAC;IACH,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAEvB,MAAM,gBAAgB,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;IAEzF,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,CAAC;AACnE,CAAC,CAAC","sourcesContent":["import { useMemo } from \"react\";\nimport type { FileValueType } from \"../../utils.js\";\nimport { imageFileTypes } from \"./useFileInputController.js\";\n\nconst MAX_FILE_NAME_LENGTH = 12;\n\nexport const useAutoTableFileCell = (props: { value: FileValueType }) => {\n  const { value } = props;\n\n  const originalFileName = value.fileName;\n\n  const formattedFileName = useMemo(() => {\n    const segments = originalFileName.split(\".\");\n\n    if (segments.length > 1) {\n      let name = segments.slice(0, -1).join(\".\");\n      const extension = segments.pop();\n\n      if (name.length > MAX_FILE_NAME_LENGTH) {\n        // Truncate the name if it's too long\n        name = name.substring(0, MAX_FILE_NAME_LENGTH) + \"(..)\";\n      }\n\n      // Join the name and extension back together\n      return [name, extension].join(\".\");\n    } else {\n      // Return the original name if there's no extension\n      return originalFileName;\n    }\n  }, [originalFileName]);\n\n  const imageFileIconUrl = imageFileTypes.includes(value.mimeType) ? value.url : undefined;\n\n  return { originalFileName, formattedFileName, imageFileIconUrl };\n};\n"]}
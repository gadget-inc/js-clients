{"version":3,"file":"useResultBannerController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useResultBannerController.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAClE,OAAO,EAAE,qBAAqB,EAAE,MAAM,mBAAmB,CAAC;AAE1D,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D,MAAM,CAAC,MAAM,yBAAyB,GAAG,GAAG,EAAE;IAC5C,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,mBAAmB,EAAE,CAAC;IAEzD,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IACrD,MAAM,CAAC,sBAAsB,EAAE,yBAAyB,CAAC,GAAG,QAAQ,CAAmC,SAAS,CAAC,CAAC;IAElH,MAAM,IAAI,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAEzD,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,YAAY,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;YACtD,OAAO;QACT,CAAC;QACD,yBAAyB,CAAC,YAAY,CAAC,CAAC;QACxC,cAAc,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAEnB,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,EAAE;QACzB,IAAI,sBAAsB,EAAE,YAAY,EAAE,CAAC;YACzC,OAAO,QAAQ,IAAI,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,QAAQ,EAAE,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,GAAG,QAAQ,EAAE,IAAI,aAAa,CAAC;QACrI,CAAC;QACD,IAAI,sBAAsB,EAAE,KAAK,EAAE,CAAC;YAClC,OAAO,sBAAsB,EAAE,KAAK,EAAE,OAAO,CAAC;QAChD,CAAC;IACH,CAAC,EAAE,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEvC,OAAO;QACL,IAAI,EAAE,CAAC,WAAW;QAClB,IAAI;QACJ,UAAU,EAAE,sBAAsB,EAAE,YAAY;QAChD,KAAK;KACN,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { isModelActionMetadata } from \"../../metadata.js\";\nimport type { AutoFormSubmitResult } from \"../AutoFormContext.js\";\nimport { useAutoFormMetadata } from \"../AutoFormContext.js\";\n\nexport const useResultBannerController = () => {\n  const { metadata, submitResult } = useAutoFormMetadata();\n\n  const [isDismissed, setIsDismissed] = useState(true);\n  const [mostRecentSubmitResult, setMostRecentSubmitResult] = useState<AutoFormSubmitResult | undefined>(undefined);\n\n  const hide = useCallback(() => setIsDismissed(true), []);\n\n  useEffect(() => {\n    if (!submitResult.isSuccessful && !submitResult.error) {\n      return;\n    }\n    setMostRecentSubmitResult(submitResult);\n    setIsDismissed(false);\n  }, [submitResult]);\n\n  const title = useMemo(() => {\n    if (mostRecentSubmitResult?.isSuccessful) {\n      return metadata && isModelActionMetadata(metadata) ? `Saved ${`${metadata?.name} `}successfully.` : `${metadata?.name} succeeded.`;\n    }\n    if (mostRecentSubmitResult?.error) {\n      return mostRecentSubmitResult?.error?.message;\n    }\n  }, [mostRecentSubmitResult, metadata]);\n\n  return {\n    show: !isDismissed,\n    hide,\n    successful: mostRecentSubmitResult?.isSuccessful,\n    title,\n  };\n};\n"]}
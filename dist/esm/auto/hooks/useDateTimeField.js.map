{"version":3,"file":"useDateTimeField.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useDateTimeField.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAC7C,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AACrD,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAEvD,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAE7C,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAA6B,EAAE,EAAE;IAChE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAEzD,eAAe,CAAC;QACd,kBAAkB,EAAE,KAAK,CAAC,KAAK;QAC/B,eAAe,EAAE,QAAQ,CAAC,SAAS;QACnC,iBAAiB,EAAE,eAAe,CAAC,QAAQ;KAC5C,CAAC,CAAC;IAEH,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,aAAa,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAExE,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;IAEjE,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,EAAE;QAC7B,IAAI,UAAU,CAAC,KAAK,IAAI,IAAI;YAAE,OAAO,SAAS,CAAC,CAAC,mCAAmC;QAEnF,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACxC,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;IAC9C,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IAEvB,MAAM,QAAQ,GAAG,WAAW,CAC1B,CAAC,GAAG,IAAW,EAAE,EAAE;QACjB,UAAU,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;QAC7B,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;IAC/B,CAAC,EACD,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,WAAW,CAAC,CACzC,CAAC;IAEF,OAAO;QACL,IAAI;QACJ,QAAQ;QACR,UAAU,EAAE;YACV,GAAG,UAAU;YACb,QAAQ;SACT;QACD,UAAU;QACV,OAAO;QACP,SAAS;KACV,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useCallback, useMemo } from \"react\";\nimport { isValidDate } from \"../../dateTimeUtils.js\";\nimport { GadgetFieldType } from \"../../internal/gql/graphql.js\";\nimport { useController } from \"../../useActionForm.js\";\nimport { type AutoDateTimeInputProps } from \"../shared/AutoInputTypes.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\nimport { assertFieldType } from \"./utils.js\";\n\nexport const useDateTimeField = (props: AutoDateTimeInputProps) => {\n  const { path, metadata } = useFieldMetadata(props.field);\n\n  assertFieldType({\n    fieldApiIdentifier: props.field,\n    actualFieldType: metadata.fieldType,\n    expectedFieldType: GadgetFieldType.DateTime,\n  });\n\n  const { field: fieldProps, fieldState } = useController({ name: path });\n\n  const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  const localTime = useMemo(() => {\n    if (fieldProps.value == null) return undefined; // Prevents null from becoming 1970\n\n    const date = new Date(fieldProps.value);\n    return isValidDate(date) ? date : undefined;\n  }, [fieldProps.value]);\n\n  const onChange = useCallback(\n    (...args: any[]) => {\n      fieldProps.onChange(...args);\n      props.afterChange?.(...args);\n    },\n    [fieldProps.onChange, props.afterChange]\n  );\n\n  return {\n    path,\n    metadata,\n    fieldProps: {\n      ...fieldProps,\n      onChange,\n    },\n    fieldState,\n    localTz,\n    localTime,\n  };\n};\n"]}
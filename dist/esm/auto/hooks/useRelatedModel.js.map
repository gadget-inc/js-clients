{"version":3,"file":"useRelatedModel.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useRelatedModel.tsx"],"names":[],"mappings":"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","sourcesContent":["import { assert, type FieldSelection } from \"@gadgetinc/api-client-core\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { FieldType } from \"../../metadata.js\";\nimport { processDefaultValues } from \"../../use-action-form/utils.js\";\nimport { useFindMany } from \"../../useFindMany.js\";\nimport { useFindOne } from \"../../useFindOne.js\";\nimport { sortByProperty, uniqByProperty } from \"../../utils.js\";\nimport type { OptionLabel } from \"../interfaces/AutoRelationshipInputProps.js\";\nimport type { RelationshipFieldConfig } from \"../interfaces/RelationshipFieldConfig.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\nimport { useModelManager } from \"./useModelManager.js\";\n\nexport const optionRecordsToLoadCount = 25;\nexport const selectedRecordsToLoadCount = 25;\n\nexport const useRelatedModelRecords = (props: { field: string; optionLabel?: OptionLabel }) => {\n  const { field } = props;\n  const { metadata } = useFieldMetadata(field);\n\n  const isBelongsToField = metadata.configuration.fieldType === FieldType.BelongsTo;\n  const isHasOneField = metadata.configuration.fieldType === FieldType.HasOne;\n  const relationshipFieldConfig = metadata.configuration as RelationshipFieldConfig;\n\n  const relatedModelApiIdentifier = relationshipFieldConfig.relatedModel?.apiIdentifier;\n  const relatedModelNamespace = relationshipFieldConfig.relatedModel?.namespace;\n  const relatedModelInverseFieldApiId =\n    \"inverseField\" in relationshipFieldConfig ? relationshipFieldConfig.inverseField?.apiIdentifier : undefined;\n\n  const relatedModelRecords = useAllRelatedModelRecords({\n    relatedModel: { apiIdentifier: relatedModelApiIdentifier!, namespace: relatedModelNamespace },\n    filter: isBelongsToField || isHasOneField ? undefined : { [relatedModelInverseFieldApiId + \"Id\"]: { isSet: false } },\n  });\n\n  return {\n    relatedModelRecords,\n  };\n};\n\nexport const useOptionLabelForField = (field: string, optionLabel?: OptionLabel): OptionLabel => {\n  const { metadata } = useFieldMetadata(field);\n  const relationshipFieldConfig = metadata.configuration as RelationshipFieldConfig;\n\n  return assert(\n    optionLabel ?? relationshipFieldConfig.relatedModel?.defaultDisplayField.apiIdentifier,\n    \"Option label is required for relationships\"\n  );\n};\n\nexport const useRelatedModelOptions = (props: {\n  field: string; // Field API identifier\n  optionLabel?: OptionLabel; // The label to display for each related model record\n}) => {\n  const { field } = props;\n\n  const optionLabel = useOptionLabelForField(field, props.optionLabel);\n  const { relatedModelRecords } = useRelatedModelRecords(props);\n\n  const { relatedModel, pagination, search } = relatedModelRecords;\n\n  const getOptions = () => {\n    const options = uniqByProperty(getRecordsAsOptions(relatedModel.records, optionLabel), \"id\");\n\n    return options;\n  };\n\n  const [options, setOptions] = useState<any[]>(getOptions());\n  const recordIds = getRecordIdsAsString(relatedModel.records);\n\n  useEffect(() => {\n    if (relatedModel.fetching) {\n      return;\n    }\n\n    setOptions(getOptions());\n  }, [relatedModel.fetching, recordIds]);\n\n  return {\n    options,\n    searchFilterOptions: options.filter((option) => {\n      return search.value ? `${option.label}`.toLowerCase().includes(search.value.toLowerCase()) : true;\n    }),\n    relatedModel,\n    pagination,\n    search,\n  };\n};\n\nexport const getRecordLabel = (record: Record<string, any>, optionLabel: OptionLabel): string =>\n  typeof optionLabel === \"string\"\n    ? record[optionLabel] // Related model field API id\n    : Array.isArray(optionLabel)\n    ? optionLabel.map((fieldName) => record[fieldName]).join(\" \")\n    : optionLabel(record); // Callback on the whole related model record\n\nconst getRecordIdsAsString = (records?: { map: (mapperFunction: (record: { id: string }) => string) => string[] }) =>\n  records\n    ?.map((record) => record.id)\n    .sort()\n    .join(\",\");\n\nexport const getRecordAsOption = (record: Record<string, any>, optionLabel: OptionLabel) => {\n  return {\n    id: record.id,\n    label: getRecordLabel(record, optionLabel),\n  };\n};\n\nexport const getRecordsAsOptions = (records: Record<string, any>[], optionLabel: OptionLabel) => {\n  return records?.map((record: Record<string, any>) => getRecordAsOption(record, optionLabel)) ?? [];\n};\n\n/**\n * For getting the selected record in a BelongsTo relationship\n * Returns the selected record in an array for interoperability with the HasOne/HasMany hook\n *\n * The lookup is done using the `findBy` to lookup on the current model to retrieve the related model record data\n */\nconst useLinkedChildModelRelatedModelRecords = (props: {\n  belongsToFieldApiId: string;\n  currentRecordId?: string;\n  currentModel: { apiIdentifier: string; namespace?: string[] | string | null };\n}) => {\n  const { belongsToFieldApiId, currentRecordId, currentModel } = props;\n\n  const modelManager = useModelManager(currentModel);\n\n  const [{ data: selectedRecord, fetching: fetchingSelected, error: fetchSelectedRecordError }] = useFindOne(\n    modelManager as any,\n    currentRecordId ?? \"\",\n    {\n      pause: !currentRecordId, // BelongsTo needs a selected record to query in the related model\n      select: {\n        id: true,\n        [`${belongsToFieldApiId}Id`]: true, // Retrieve the raw field value, regardless of if the ID exists or not\n        [belongsToFieldApiId]: { _all: true }, // All of the fields on the related record iff the record exists\n      },\n    }\n  );\n\n  return {\n    selected: {\n      records: selectedRecord ? [selectedRecord] : undefined,\n      fetching: fetchingSelected,\n      error: fetchSelectedRecordError,\n    },\n  };\n};\n\n/**\n * For getting the related child model records in a HasOne/HasMany relationship\n */\nconst useLinkedParentModelRelatedModelRecords = (props: {\n  relatedModel: {\n    apiIdentifier: string;\n    namespace?: string[] | string | null;\n    inverseFieldApiIdentifier: string;\n  };\n  currentRecordId?: string;\n}) => {\n  const { currentRecordId, relatedModel } = props;\n\n  const relatedModelManager = useModelManager(relatedModel);\n\n  const { apiIdentifier, inverseFieldApiIdentifier } = relatedModel;\n  if (!inverseFieldApiIdentifier) {\n    throw new Error(\n      `The inverse field api identifier is invalid for the related model \"${apiIdentifier}\" in the useLinkedParentModelRelatedModelRecords hook.`\n    );\n  }\n\n  const [{ data, fetching: fetchingSelected, error: fetchSelectedRecordError }] = useFindMany(relatedModelManager as any, {\n    pause: !currentRecordId, // HasOne/HasMany need the current record to query the inverse field in the related model\n\n    first: selectedRecordsToLoadCount, // Many records can point to the current record in hasOne/hasMany\n    filter: { [inverseFieldApiIdentifier + \"Id\"]: { equals: currentRecordId } }, // Filter by the inverse field belongsTo field value\n  });\n\n  const selectedRecords =\n    data &&\n    data.map((record: any) => ({\n      id: record.id,\n      __typename: record.__typename,\n      ...processDefaultValues({ hasAmbiguousDefaultValues: false, modelApiIdentifier: inverseFieldApiIdentifier, data: record }),\n    }));\n\n  return {\n    selected: {\n      records: selectedRecords,\n      fetching: fetchingSelected,\n      error: fetchSelectedRecordError,\n    },\n  };\n};\n\nconst useAllRelatedModelRecords = (props: {\n  optionLabel?: OptionLabel;\n  filter?: Record<string, any>;\n  relatedModel: { apiIdentifier: string; namespace?: string[] | string | null };\n}) => {\n  const { optionLabel, relatedModel } = props;\n\n  let optionLabelSelection: FieldSelection | undefined = undefined;\n\n  if (optionLabel && typeof optionLabel === \"string\") {\n    optionLabelSelection = { id: true, [optionLabel]: true };\n  } else if (optionLabel && Array.isArray(optionLabel)) {\n    optionLabelSelection = optionLabel.reduce(\n      (acc, fieldName) => {\n        acc[fieldName] = true;\n        return acc;\n      },\n      { id: true } as FieldSelection\n    );\n  }\n\n  const relatedModelManager = useModelManager(relatedModel);\n\n  const [loadedRecords, setLoadedRecords] = useState<any[]>([]);\n  const [paginationPage, setPaginationPage] = useState<any>(undefined);\n  const [searchValue, setSearchValue] = useState<string | undefined>();\n\n  const [{ data: newlyFetchedRecords, fetching, error }, _refetch] = useFindMany(relatedModelManager as any, {\n    first: optionRecordsToLoadCount,\n    ...(props.filter && { filter: props.filter }),\n    ...(paginationPage && { after: paginationPage }),\n    ...(searchValue && { search: searchValue }),\n    ...(optionLabelSelection && { select: optionLabelSelection }),\n  });\n\n  const hasNextPage = !!newlyFetchedRecords?.hasNextPage;\n\n  const clearPagination = useCallback(() => setPaginationPage(undefined), []);\n\n  const loadNextPage = useCallback(() => {\n    const canFetchNextPage =\n      newlyFetchedRecords && newlyFetchedRecords.length >= optionRecordsToLoadCount && hasNextPage && newlyFetchedRecords.endCursor;\n\n    if (canFetchNextPage) {\n      setPaginationPage(newlyFetchedRecords.endCursor);\n    }\n  }, [newlyFetchedRecords]);\n\n  const setSearch = useCallback((search?: string) => {\n    clearPagination();\n    const emptySearch = search === \"\";\n    setSearchValue(emptySearch ? undefined : search);\n  }, []);\n\n  /**\n   * This useEffect appends the newly fetched records to the list of records that have already been loaded\n   * `numberOfRecordsToLoad` are retrieved per `useFindMany` call\n   */\n  useEffect(() => {\n    if (fetching || !newlyFetchedRecords) {\n      return;\n    }\n\n    const allOptions = [\n      ...loadedRecords, // Maintain existing options\n      ...newlyFetchedRecords.map((record) => record),\n    ];\n\n    const updatedUniqueOptions = uniqByProperty(allOptions, \"id\");\n    const sortedUniqueOptions = sortByProperty(updatedUniqueOptions, \"id\");\n\n    setLoadedRecords(sortedUniqueOptions);\n  }, [paginationPage, searchValue, fetching]);\n\n  return {\n    relatedModel: {\n      records: loadedRecords,\n      error,\n      fetching,\n    },\n\n    pagination: {\n      clearPagination,\n      loadNextPage,\n      hasNextPage,\n    },\n\n    search: {\n      value: searchValue,\n      set: setSearch,\n    },\n  };\n};\n"]}
{"version":3,"file":"useBelongsToInputController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useBelongsToInputController.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AACpC,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAEvD,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,sBAAsB,EAAE,MAAM,sBAAsB,CAAC;AAE9D,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,KAAiC,EAAE,EAAE;IAC/E,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IACjC,MAAM,aAAa,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC9C,MAAM,EAAE,IAAI,EAAE,GAAG,aAAa,CAAC;IAE/B,MAAM,mBAAmB,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;IAC1D,MAAM,EAAE,YAAY,EAAE,GAAG,mBAAmB,CAAC;IAE7C,MAAM,EACJ,KAAK,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,GAC3B,GAAG,aAAa,CAAC;QAChB,IAAI,EAAE,IAAI,GAAG,KAAK;QAClB,OAAO;KACR,CAAC,CAAC;IAEH,MAAM,cAAc,GAAoC,mBAAmB,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC;IAEvI,MAAM,SAAS,GAAG,YAAY,CAAC,QAAQ,CAAC;IACxC,MAAM,YAAY,GAAG,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC;IAEjD,MAAM,cAAc,GAAG,WAAW,CAChC,CAAC,MAA2B,EAAE,EAAE;QAC9B,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACtB,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE;QACtC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACjB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,OAAO;QACL,aAAa;QACb,mBAAmB;QACnB,cAAc;QACd,cAAc;QACd,cAAc;QACd,SAAS;QACT,YAAY;KACb,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useCallback } from \"react\";\nimport { useController } from \"../../useActionForm.js\";\nimport type { AutoRelationshipInputProps } from \"../interfaces/AutoRelationshipInputProps.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\nimport { useRelatedModelOptions } from \"./useRelatedModel.js\";\n\nexport const useBelongsToInputController = (props: AutoRelationshipInputProps) => {\n  const { field, control } = props;\n  const fieldMetadata = useFieldMetadata(field);\n  const { path } = fieldMetadata;\n\n  const relatedModelOptions = useRelatedModelOptions(props);\n  const { relatedModel } = relatedModelOptions;\n\n  const {\n    field: { value, onChange },\n  } = useController({\n    name: path + \".id\",\n    control,\n  });\n\n  const selectedRecord: Record<string, any> | undefined = relatedModelOptions.relatedModel.records.find((record) => record.id === value);\n\n  const isLoading = relatedModel.fetching;\n  const errorMessage = relatedModel.error?.message;\n\n  const onSelectRecord = useCallback(\n    (record: Record<string, any>) => {\n      onChange(record.id);\n    },\n    [onChange]\n  );\n\n  const onRemoveRecord = useCallback(() => {\n    onChange(null);\n  }, [onChange]);\n\n  return {\n    fieldMetadata,\n    relatedModelOptions,\n    onSelectRecord,\n    onRemoveRecord,\n    selectedRecord,\n    isLoading,\n    errorMessage,\n  };\n};\n"]}
{"version":3,"file":"useRelationshipInputController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useRelationshipInputController.tsx"],"names":[],"mappings":"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","sourcesContent":["import { AnyModelManager } from \"@gadgetinc/api-client-core\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { ControllerRenderProps, useController, type Control } from \"react-hook-form\";\nimport { useApi } from \"../../GadgetProvider.js\";\nimport { GadgetBelongsToConfig } from \"../../internal/gql/graphql.js\";\nimport { FieldType } from \"../../metadata.js\";\nimport { useFindMany } from \"../../useFindMany.js\";\nimport { useFindOne } from \"../../useFindOne.js\";\nimport { getModelManager, uniqByProperty } from \"../../utils.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\n\nexport const numberOfRecordsToLoad = 25;\n\nexport const useRelationshipInputController = (props: {\n  field: string; // Field API identifier\n  control?: Control<any>;\n  optionLabel?: string | ((record: Record<string, any>) => string);\n}) => {\n  const { field, control, optionLabel } = props;\n\n  const { modelManager, metadata, path } = useRelatedModelManager({ field });\n  const isHasMany = metadata.fieldType === FieldType.HasMany;\n\n  const {\n    field: fieldProps,\n    fieldState: { error: fieldError },\n  } = useController({\n    name: path + \".id\",\n    rules: { required: metadata.requiredArgumentForInput },\n    control,\n  });\n\n  const relatedModelRecords = useRelatedModelRecords({\n    modelManager,\n    optionLabel,\n    fieldProps,\n  });\n\n  return {\n    path,\n    isHasMany,\n    fieldProps,\n    fieldError,\n    metadata,\n    ...relatedModelRecords,\n  };\n};\n\nconst useRelatedModelManager = (props: {\n  field: string; // Field API identifier\n}) => {\n  const { field } = props;\n\n  const { path, metadata } = useFieldMetadata(field);\n  const config = metadata.configuration as GadgetBelongsToConfig;\n\n  if (!config || !config.relatedModel) {\n    throw new Error(`Related model for field \"${field}\" not found in metadata`);\n  }\n\n  const api = useApi();\n  const modelManager = getModelManager(api, config.relatedModel.apiIdentifier, config.relatedModel.namespace);\n\n  if (!modelManager) {\n    const relatedModelNamespacedApiId = [...(config.relatedModel.namespace ?? []), config.relatedModel.apiIdentifier].join(\".\");\n    throw new Error(`no model manager for \"${relatedModelNamespacedApiId}\" found for action function`);\n  }\n\n  return { path, metadata, modelManager };\n};\n\nconst useGetSelectedRelatedModelRecords = (props: { modelManager: AnyModelManager; fieldProps: ControllerRenderProps<any, string> }) => {\n  const { modelManager, fieldProps } = props;\n  const [selectedRecordId, setSelectedRecordId] = useState<string | undefined>(fieldProps.value);\n\n  const [{ data: selectedRecord, fetching: fetchingSelectedError, error: fetchSelectedRecordError }] = useFindOne(\n    modelManager as any,\n    selectedRecordId ?? \"\",\n    {\n      pause: !selectedRecordId, // Only fetch with a selected records\n    }\n  );\n\n  return {\n    selectedRecord,\n    fetchingSelectedError,\n    fetchSelectedRecordError,\n\n    selectedRecordId,\n    setSelectedRecordId,\n  };\n};\n\nconst useRelatedModelRecords = (props: {\n  modelManager: AnyModelManager;\n  optionLabel?: string | ((record: Record<string, any>) => string);\n  fieldProps: ControllerRenderProps<any, string>;\n}) => {\n  const { modelManager, optionLabel, fieldProps } = props;\n  const optionLabelIsFieldName = typeof optionLabel === \"string\";\n\n  const [options, setOptions] = useState<any[]>([]);\n  const [recordPage, setRecordPage] = useState<any>(undefined);\n  const [searchValue, setSearchValue] = useState<string | undefined>();\n\n  const selectRecordId = (selectedId?: string) => {\n    setSelectedRecordId(selectedId);\n    setSearch(undefined);\n    fieldProps.onChange(selectedId);\n  };\n\n  const { selectedRecord, fetchingSelectedError, fetchSelectedRecordError, selectedRecordId, setSelectedRecordId } =\n    useGetSelectedRelatedModelRecords(props);\n\n  const [{ data: records, fetching: fetchingRecords, error: fetchRecordsError }, _refetch] = useFindMany(modelManager as any, {\n    first: numberOfRecordsToLoad,\n    ...(recordPage && { after: recordPage }),\n    ...(searchValue && { search: searchValue }),\n    ...(optionLabelIsFieldName && { select: { id: true, [optionLabel]: true } }),\n  });\n\n  const hasNextPage = !!records?.hasNextPage;\n  const isLoadingRelatedRecords = !!(fetchingRecords || !records || fetchingSelectedError);\n\n  const resetPagination = () => setRecordPage(undefined);\n\n  const loadNextPageOfRecords = () => {\n    if (records && records.length >= numberOfRecordsToLoad && hasNextPage && records.endCursor) {\n      setRecordPage(records.endCursor);\n    }\n  };\n\n  const setSearch = (search?: string) => {\n    resetPagination();\n    const emptySearch = search === \"\";\n    setSearchValue(emptySearch ? undefined : search);\n  };\n\n  const getRecordLabel = (record: Record<string, any>): string =>\n    optionLabel\n      ? optionLabelIsFieldName\n        ? record[optionLabel] // Related model field API id\n        : optionLabel(record) // Callback on the whole related model record\n      : record.name; // TODO - Incorporate DataModel.defaultDisplayField\n\n  const getRecordsAsOptions = () =>\n    records?.map((record: Record<string, any>) => ({\n      recordId: record.id,\n      label: getRecordLabel(record),\n    })) ?? [];\n\n  const selectedRecordLabel = useMemo(\n    () => (selectedRecord ? getRecordLabel(selectedRecord) : `id: ${selectedRecordId}`),\n    [selectedRecord]\n  );\n\n  /**\n   * This useEffect appends the newly fetched records to the list of records that have already been loaded\n   * `numberOfRecordsToLoad` are retrieved per `useFindMany` call\n   */\n  useEffect(() => {\n    const updatedUniqueOptions = uniqByProperty(\n      [\n        ...(selectedRecordId ? [{ recordId: selectedRecordId, label: selectedRecordLabel }] : []),\n        ...(recordPage ? options : []),\n        ...getRecordsAsOptions(),\n      ],\n      \"recordId\"\n    );\n    setOptions(updatedUniqueOptions);\n  }, [recordPage, isLoadingRelatedRecords, searchValue, selectedRecordId]);\n\n  return {\n    relatedModel: {\n      options,\n      error: fetchRecordsError,\n      hasNextPage,\n      isLoadingRelatedRecords,\n    },\n\n    selection: {\n      id: selectedRecordId,\n      label: selectedRecordLabel,\n      error: fetchSelectedRecordError,\n      set: selectRecordId,\n    },\n\n    pagination: {\n      resetPagination,\n      loadNextPageOfRecords,\n    },\n\n    search: {\n      value: searchValue,\n      set: setSearch,\n    },\n  };\n};\n"]}
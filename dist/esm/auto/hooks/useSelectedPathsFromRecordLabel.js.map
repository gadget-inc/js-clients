{"version":3,"file":"useSelectedPathsFromRecordLabel.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useSelectedPathsFromRecordLabel.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAChC,OAAO,EACL,eAAe,GAKhB,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAE,mBAAmB,EAAE,MAAM,4BAA4B,CAAC;AACjE,OAAO,EACL,8BAA8B,GAG/B,MAAM,6CAA6C,CAAC;AACrD,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAE9D,MAAM,CAAC,MAAM,+BAA+B,GAAG,CAAC,KAAgC,EAAE,EAAE;IAClF,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC;IACrC,MAAM,EAAE,QAAQ,EAAE,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAElD,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,EAAE;QACjC,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC;YAChE,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,MAAM,WAAW,GAAG,QAAQ,CAAC,aAIJ,CAAC;QAE1B,MAAM,aAAa,GAAG,IAAI,GAAG,EAAU,CAAC;QAExC,MAAM,qBAAqB,GACzB,WAAW,CAAC,YAAY,EAAE,MAAM;aAC7B,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,SAAS,KAAK,eAAe,CAAC,QAAQ,CAAC;aAC9F,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;QAE/C,8BAA8B,CAAC,WAAW,CAAC;aACxC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,+BAA+B,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,qBAAqB,CAAC,CAAC;aACnG,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAE9C,OAAO,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACnC,CAAC,EAAE,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;IAE5B,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAAG,CAAC,WAAyB,EAAE,sCAAuD,EAAE,EAAE;IACpI,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;QAC/B,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE,CAAC;QACpC,OAAO,CAAC,WAAW,CAAC,CAAC;IACvB,CAAC;IAED,yCAAyC;IACzC,OAAO,sCAAsC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,gCAAgC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;AAC/H,CAAC,CAAC;AAEF,MAAM,gCAAgC,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC","sourcesContent":["import { useMemo } from \"react\";\nimport {\n  GadgetFieldType,\n  type GadgetBelongsToConfig,\n  type GadgetHasManyConfig,\n  type GadgetHasManyThroughConfig,\n  type GadgetHasOneConfig,\n} from \"../../internal/gql/graphql.js\";\nimport { isRelationshipField } from \"../../use-table/helpers.js\";\nimport {\n  getOptionLabelsFromRecordLabel,\n  type AutoRelationshipFormProps,\n  type OptionLabel,\n} from \"../interfaces/AutoRelationshipInputProps.js\";\nimport { useMaybeFieldMetadata } from \"./useFieldMetadata.js\";\n\nexport const useSelectedPathsFromRecordLabel = (props: AutoRelationshipFormProps) => {\n  const { field, recordLabel } = props;\n  const { metadata } = useMaybeFieldMetadata(field);\n\n  const selectedPaths = useMemo(() => {\n    if (!recordLabel || !metadata || !isRelationshipField(metadata)) {\n      return [];\n    }\n    const fieldConfig = metadata.configuration as\n      | GadgetHasManyConfig\n      | GadgetHasManyThroughConfig\n      | GadgetHasOneConfig\n      | GadgetBelongsToConfig;\n\n    const selectedPaths = new Set<string>();\n\n    const defaultFieldsToSelect =\n      fieldConfig.relatedModel?.fields\n        .filter((field) => !isRelationshipField(field) && field.fieldType !== GadgetFieldType.Password)\n        .map((field) => field.apiIdentifier) ?? [];\n\n    getOptionLabelsFromRecordLabel(recordLabel)\n      .flatMap((optionLabel) => getSelectedPathsFromOptionLabel(optionLabel, () => defaultFieldsToSelect))\n      .forEach((path) => selectedPaths.add(path));\n\n    return Array.from(selectedPaths);\n  }, [recordLabel, metadata]);\n\n  return selectedPaths;\n};\n\nexport const getSelectedPathsFromOptionLabel = (optionLabel?: OptionLabel, getFieldsToSelectOnRecordLabelCallback?: () => string[]) => {\n  if (!optionLabel) {\n    return [];\n  }\n\n  if (Array.isArray(optionLabel)) {\n    return optionLabel;\n  }\n\n  if (typeof optionLabel === \"string\") {\n    return [optionLabel];\n  }\n\n  // Callback instead of explicit selection\n  return getFieldsToSelectOnRecordLabelCallback?.().filter((field) => !recordLabelCallbackOmittedFields.includes(field)) ?? [];\n};\n\nconst recordLabelCallbackOmittedFields = [\"createdAt\", \"updatedAt\"];\n"]}
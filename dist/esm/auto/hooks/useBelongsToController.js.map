{"version":3,"file":"useBelongsToController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useBelongsToController.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useCallback } from \"react\";\nimport { GadgetFieldType } from \"../../internal/gql/graphql.js\";\nimport { useController, useFormContext, useWatch, type Control } from \"../../useActionForm.js\";\nimport type { AutoRelationshipInputProps, OptionLabel } from \"../interfaces/AutoRelationshipInputProps.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\nimport { useRelatedModelOptions } from \"./useRelatedModel.js\";\nimport { assertFieldType } from \"./utils.js\";\n\nexport const useBelongsToController = (props: {\n  field: string;\n  primaryLabel?: OptionLabel;\n  secondaryLabel?: OptionLabel;\n  tertiaryLabel?: OptionLabel;\n}) => {\n  const { field, primaryLabel, secondaryLabel, tertiaryLabel } = props;\n  const fieldMetadata = useFieldMetadata(field);\n  const { path, metadata } = fieldMetadata;\n  assertFieldType({\n    fieldApiIdentifier: field,\n    actualFieldType: metadata.fieldType,\n    expectedFieldType: GadgetFieldType.BelongsTo,\n  });\n\n  const record = useWatch({ name: path });\n\n  const relatedModelOptions = useRelatedModelOptions({ field, optionLabel: primaryLabel, secondaryLabel, tertiaryLabel });\n\n  const isLoading = relatedModelOptions.relatedModel.fetching;\n  const errorMessage = relatedModelOptions.relatedModel.error?.message;\n\n  return {\n    record,\n    fieldMetadata,\n    relatedModelOptions,\n    isLoading,\n    errorMessage,\n  };\n};\n\nexport const useBelongsToInputController = (props: AutoRelationshipInputProps) => {\n  const { field, control, optionLabel } = props;\n  const { fieldMetadata, relatedModelOptions, isLoading, errorMessage } = useBelongsToController({ field, primaryLabel: optionLabel });\n  const { path } = fieldMetadata;\n\n  const {\n    field: { value, onChange },\n  } = useBelongsToFieldIdPropertyController({\n    name: path,\n    control,\n  });\n\n  const { danglingSelectedRecordId, selectedRecord, maybeClearDanglingSelectedRecord } = useBelongsToSelectedRecord({\n    path,\n    relatedModelOptions,\n    selectedRecordIdFromController: value,\n  });\n\n  const onSelectRecord = useCallback(\n    (record: Record<string, any>) => {\n      onChange(record.id);\n    },\n    [onChange]\n  );\n\n  const onRemoveRecord = useCallback(() => {\n    onChange(null);\n    maybeClearDanglingSelectedRecord();\n  }, [onChange, maybeClearDanglingSelectedRecord]);\n\n  return {\n    fieldMetadata,\n    relatedModelOptions,\n    onSelectRecord,\n    onRemoveRecord,\n    selectedRecord,\n    danglingSelectedRecordId,\n    isLoading,\n    errorMessage,\n  };\n};\n\nconst useBelongsToFieldIdPropertyController = (props: { name: string; control?: Control }) => {\n  const { name, control } = props;\n\n  // use the path of the full belongsTo field here and extract the ID only.\n  // This prevents additional changes on the record beyond the relationship link change\n\n  const {\n    field: { value: fullFieldValue, onChange: fullFieldOnChange },\n  } = useController({ name, control });\n\n  const value = fullFieldValue?.id;\n  const onChange = useCallback(\n    (recordId: any) => {\n      fullFieldOnChange({\n        // Set the ID only to omit additional properties from being included in the GQL request\n        id: recordId,\n      });\n    },\n    [fullFieldOnChange]\n  );\n\n  return { field: { value, onChange } };\n};\n\nconst useBelongsToSelectedRecord = (props: {\n  path: string;\n  relatedModelOptions: ReturnType<typeof useRelatedModelOptions>;\n  selectedRecordIdFromController: any;\n}) => {\n  const { path, relatedModelOptions, selectedRecordIdFromController } = props;\n  const { getValues, setValue } = useFormContext();\n  const selectedRelatedRecord = getValues(path); // The selected record from initial `findBy` lookup\n  const rawSelectedRelatedRecordId = getValues(`${path}Id`); // The raw ID in the current record\n\n  const noSelectedRecord =\n    rawSelectedRelatedRecordId === null || // null when on an existing record without a related ID\n    rawSelectedRelatedRecordId === undefined; // undefined when on a new record\n\n  // The related record ID if the related record ID is defined but the record does not exist.\n  const danglingSelectedRecordId =\n    !noSelectedRecord &&\n    selectedRelatedRecord === null && // Null when the related record does not exist\n    rawSelectedRelatedRecordId\n      ? rawSelectedRelatedRecordId\n      : undefined;\n\n  const maybeClearDanglingSelectedRecord = useCallback(() => {\n    setValue(`${path}Id`, null);\n  }, [setValue, path]);\n\n  const selectedRecord: Record<string, any> | undefined =\n    relatedModelOptions.relatedModel.records.find((record) => record.id === selectedRecordIdFromController) ??\n    //If the selected record exists, but is not in the list of related records, try to get it from the formContext\n    selectedRelatedRecord;\n\n  return {\n    noSelectedRecord,\n    danglingSelectedRecordId,\n    maybeClearDanglingSelectedRecord,\n    selectedRecord,\n  };\n};\n"]}
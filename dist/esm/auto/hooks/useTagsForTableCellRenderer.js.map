{"version":3,"file":"useTagsForTableCellRenderer.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useTagsForTableCellRenderer.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEhC,OAAO,EAAE,sBAAsB,EAAE,MAAM,gBAAgB,CAAC;AAExD,MAAM,cAAc,GAAG,CAAC,CAAC;AAEzB,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,KAI3C,EAAE,EAAE;IACH,MAAM,EAAE,KAAK,EAAE,WAAW,GAAG,cAAc,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;IAEpE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE;QAC9D,IAAI,aAAa,GAAa,EAAE,CAAC;QAEjC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YACzB,IAAI,sBAAsB,CAAC,KAAK,CAAC,EAAE,CAAC;gBAClC,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjD,CAAC;iBAAM,CAAC;gBACN,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,CAAa,CAAC;gBAC3F,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC7D,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;gBAC1C,aAAa,GAAG,CAAC,KAAK,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC;QAED,OAAO;YACL,OAAO,EAAE,aAAa;YACtB,aAAa,EAAE,aAAa;iBACzB,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC;iBACrB,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,YAAY,IAAI,GAAG,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACrG,cAAc,EAAE,aAAa,CAAC,MAAM;SACrC,CAAC;IACJ,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,OAAO;QACL,OAAO;QACP,aAAa;QACb,cAAc;QACd,cAAc,EAAE,cAAc,GAAG,WAAW;KAC7C,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useMemo } from \"react\";\nimport type { Nullable, RoleAssignmentsValueType } from \"../../utils.js\";\nimport { isRoleAssignmentsArray } from \"../../utils.js\";\n\nconst MAX_TAGS_COUNT = 5;\n\nexport const useTagsForTableCellRenderer = (props: {\n  value: Nullable<string> | Nullable<string>[] | RoleAssignmentsValueType[];\n  maxTagCount?: number;\n  maxTagLength?: number;\n}) => {\n  const { value, maxTagCount = MAX_TAGS_COUNT, maxTagLength } = props;\n\n  const { allTags, shortenedTags, originalLength } = useMemo(() => {\n    let formattedTags: string[] = [];\n\n    if (Array.isArray(value)) {\n      if (isRoleAssignmentsArray(value)) {\n        formattedTags = value.map((role) => role.name);\n      } else {\n        const compactValues = value.filter((tag) => tag !== null && tag !== undefined) as string[];\n        formattedTags = compactValues.map((tag) => tag.toString());\n      }\n    } else {\n      if (value !== null && value !== undefined) {\n        formattedTags = [value];\n      }\n    }\n\n    return {\n      allTags: formattedTags,\n      shortenedTags: formattedTags\n        .slice(0, maxTagCount)\n        .map((tag) => (maxTagLength && tag.length > maxTagLength ? tag.slice(0, maxTagLength) + \"â€¦\" : tag)),\n      originalLength: formattedTags.length,\n    };\n  }, [value]);\n\n  return {\n    allTags,\n    shortenedTags,\n    originalLength,\n    hasOmittedTags: originalLength > maxTagCount,\n  };\n};\n"]}
{"version":3,"file":"usePasswordController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/usePasswordController.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC9C,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,aAAa,EAAgB,MAAM,wBAAwB,CAAC;AACrE,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAE7C,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,KAAgD,EAAE,EAAE;IACxF,MAAM,EAAE,MAAM,EAAE,GAAG,mBAAmB,EAAE,CAAC;IACzC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAEzD,eAAe,CAAC;QACd,kBAAkB,EAAE,KAAK,CAAC,KAAK;QAC/B,eAAe,EAAE,QAAQ,CAAC,SAAS;QACnC,iBAAiB,EAAE,eAAe,CAAC,QAAQ;KAC5C,CAAC,CAAC;IAEH,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,aAAa,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAE5D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IAEpD,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE;QACpC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,sCAAsC;QAC/D,YAAY,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,OAAO;QACL,SAAS;QACT,YAAY;QACZ,UAAU;KACX,CAAC;AACJ,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,2BAA2B,GAAG,UAAU,CAAC","sourcesContent":["import { useCallback, useState } from \"react\";\nimport { GadgetFieldType } from \"../../internal/gql/graphql.js\";\nimport { useController, type Control } from \"../../useActionForm.js\";\nimport { useAutoFormMetadata } from \"../AutoFormContext.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\nimport { assertFieldType } from \"./utils.js\";\n\nexport const usePasswordController = (props: { field: string; control?: Control<any> }) => {\n  const { findBy } = useAutoFormMetadata();\n  const { path, metadata } = useFieldMetadata(props.field);\n\n  assertFieldType({\n    fieldApiIdentifier: props.field,\n    actualFieldType: metadata.fieldType,\n    expectedFieldType: GadgetFieldType.Password,\n  });\n\n  const { field: fieldProps } = useController({ name: path });\n\n  const [isEditing, setIsEditing] = useState(!findBy);\n\n  const startEditing = useCallback(() => {\n    fieldProps.onChange(\"\"); // Touch the field to mark it as dirty\n    setIsEditing(true);\n  }, [fieldProps]);\n\n  return {\n    isEditing,\n    startEditing,\n    fieldProps,\n  };\n};\n\n/**\n * The salted password hash is not retrieved from the DB\n * Regardless of the password is defined or not, this placeholder is shown as exposing an unset password is a security risk\n */\nexport const existingPasswordPlaceholder = \"********\";\n"]}
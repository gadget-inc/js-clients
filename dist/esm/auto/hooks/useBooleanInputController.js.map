{"version":3,"file":"useBooleanInputController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useBooleanInputController.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAElC,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AACvE,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAE7C,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,KAAgD,EAAE,EAAE;IAC5F,MAAM,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IAErD,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;IAEhE,eAAe,CAAC,EAAE,kBAAkB,EAAE,eAAe,EAAE,QAAQ,CAAC,SAAS,EAAE,iBAAiB,EAAE,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC;IAEzH,MAAM,EACJ,KAAK,EAAE,UAAU,EACjB,UAAU,EAAE,EAAE,KAAK,EAAE,GACtB,GAAG,aAAa,CAAC;QAChB,OAAO;QACP,IAAI,EAAE,IAAI;KACX,CAAC,CAAC;IAEH,MAAM,EACJ,SAAS,EAAE,EAAE,aAAa,EAAE,GAC7B,GAAG,cAAc,EAAE,CAAC;IAErB,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,QAAQ,CAAC,wBAAwB,EAAE,CAAC;YACtC,qEAAqE;YACrE,uFAAuF;YACvF,MAAM,YAAY,GAAG,GAAG,CAAC,aAAa,IAAI,EAAE,EAAE,IAAI,CAAC,IAAI,KAAK,CAAC;YAC7D,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACpC,CAAC;IACH,CAAC,EAAE,CAAC,QAAQ,CAAC,wBAAwB,EAAE,aAAa,CAAC,CAAC,CAAC;IAEvD,OAAO;QACL,EAAE,EAAE,IAAI;QACR,IAAI;QACJ,UAAU;QACV,KAAK;QACL,QAAQ;KACT,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useEffect } from \"react\";\nimport { type Control } from \"react-hook-form\";\nimport { GadgetFieldType } from \"../../internal/gql/graphql.js\";\nimport { useController, useFormContext } from \"../../useActionForm.js\";\nimport { get } from \"../../utils.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\nimport { assertFieldType } from \"./utils.js\";\n\nexport const useBooleanInputController = (props: { field: string; control?: Control<any> }) => {\n  const { field: fieldApiIdentifier, control } = props;\n\n  const { path, metadata } = useFieldMetadata(fieldApiIdentifier);\n\n  assertFieldType({ fieldApiIdentifier, actualFieldType: metadata.fieldType, expectedFieldType: GadgetFieldType.Boolean });\n\n  const {\n    field: fieldProps,\n    fieldState: { error },\n  } = useController({\n    control,\n    name: path,\n  });\n\n  const {\n    formState: { defaultValues },\n  } = useFormContext();\n\n  useEffect(() => {\n    if (metadata.requiredArgumentForInput) {\n      // when the field is required, this defaults to false to match the UI\n      // When not required, the field will have a null value unless it is touched by the user\n      const defaultValue = get(defaultValues ?? {}, path) ?? false;\n      fieldProps.onChange(defaultValue);\n    }\n  }, [metadata.requiredArgumentForInput, defaultValues]);\n\n  return {\n    id: path,\n    path,\n    fieldProps,\n    error,\n    metadata,\n  };\n};\n"]}
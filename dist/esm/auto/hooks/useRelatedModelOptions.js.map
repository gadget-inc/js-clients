{"version":3,"file":"useRelatedModelOptions.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useRelatedModelOptions.tsx"],"names":[],"mappings":"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","sourcesContent":["import { assert } from \"@gadgetinc/api-client-core\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { FieldType } from \"../../metadata.js\";\nimport type { RecordIdentifier } from \"../../use-action-form/types.js\";\nimport { useFindExistingRecord } from \"../../use-action-form/utils.js\";\nimport { useFindMany } from \"../../useFindMany.js\";\nimport { sortByProperty, uniqByProperty } from \"../../utils.js\";\nimport { useAutoFormMetadata } from \"../AutoFormContext.js\";\nimport type { OptionLabel } from \"../interfaces/AutoRelationshipInputProps.js\";\nimport type { RelationshipFieldConfig } from \"../interfaces/RelationshipFieldConfig.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\nimport { useModelManager } from \"./useModelManager.js\";\n\nexport const optionRecordsToLoadCount = 25;\nexport const selectedRecordsToLoadCount = 25;\n\nexport const useRelatedModelOptions = (props: {\n  field: string; // Field API identifier\n  optionLabel?: OptionLabel; // The label to display for each related model record\n}) => {\n  const { field } = props;\n  const { metadata } = useFieldMetadata(field);\n  const { findBy, model } = useAutoFormMetadata();\n\n  const isBelongsToField = metadata.configuration.fieldType === FieldType.BelongsTo;\n  const relationshipFieldConfig = metadata.configuration as RelationshipFieldConfig;\n\n  const relatedModelApiIdentifier = relationshipFieldConfig.relatedModel?.apiIdentifier;\n  const relatedModelNamespace = relationshipFieldConfig.relatedModel?.namespace;\n  const relatedModelInverseFieldApiId =\n    \"inverseField\" in relationshipFieldConfig ? relationshipFieldConfig.inverseField?.apiIdentifier : undefined;\n\n  const optionLabel = assert(\n    props.optionLabel ?? relationshipFieldConfig.relatedModel?.defaultDisplayField.apiIdentifier,\n    \"Option label is required for relationships\"\n  );\n\n  const { selected } = isBelongsToField\n    ? // eslint-disable-next-line\n      useLinkedChildModelRelatedModelRecords({\n        belongsToFieldApiId: field,\n        findBy,\n        currentModel: { apiIdentifier: model!.apiIdentifier!, namespace: model!.namespace },\n      })\n    : // eslint-disable-next-line\n      useLinkedParentModelRelatedModelRecords({\n        findBy,\n        currentModel: { apiIdentifier: model!.apiIdentifier!, namespace: model!.namespace },\n        relatedModel: {\n          apiIdentifier: relatedModelApiIdentifier!,\n          namespace: relatedModelNamespace,\n          inverseFieldApiIdentifier: relatedModelInverseFieldApiId!,\n        },\n      });\n\n  const relatedModelRecords = useAllRelatedModelRecords({\n    relatedModel: { apiIdentifier: relatedModelApiIdentifier!, namespace: relatedModelNamespace },\n    optionLabel,\n  });\n  const { relatedModel, pagination, search } = relatedModelRecords;\n\n  const getOptions = () => {\n    const options = uniqByProperty(\n      [\n        ...getRecordsAsOptions(selected.records ?? [], optionLabel), // Selected records\n        ...getRecordsAsOptions(relatedModel.records, optionLabel), // All related model records\n      ],\n      \"id\"\n    );\n\n    return options;\n  };\n\n  const [options, setOptions] = useState<any[]>(getOptions());\n\n  useEffect(() => {\n    if (selected.fetching || relatedModel.fetching) {\n      return;\n    }\n\n    setOptions(getOptions());\n  }, [selected.fetching, relatedModel.fetching, getRecordIdsAsString(selected.records), getRecordIdsAsString(relatedModel.records)]);\n\n  return {\n    options,\n    searchFilterOptions: options.filter((option) => {\n      return search.value ? `${option.label}`.toLowerCase().includes(search.value.toLowerCase()) : true;\n    }),\n\n    selected,\n\n    relatedModel,\n    pagination,\n    search,\n  };\n};\n\nconst getRecordIdsAsString = (records?: { map: (mapperFunction: (record: { id: string }) => string) => string[] }) =>\n  records\n    ?.map((record) => record.id)\n    .sort()\n    .join(\",\");\n\nexport const getRecordsAsOptions = (records: Record<string, any>[], optionLabel: OptionLabel) => {\n  const getRecordLabel = (record: Record<string, any>, optionLabel: OptionLabel): string =>\n    typeof optionLabel === \"string\"\n      ? record[optionLabel] // Related model field API id\n      : optionLabel(record); // Callback on the whole related model record\n\n  return (\n    records?.map((record: Record<string, any>) => ({\n      id: record.id,\n      label: getRecordLabel(record, optionLabel),\n    })) ?? []\n  );\n};\n\n/**\n * For getting the selected record in a BelongsTo relationship\n * Returns the selected record in an array for interoperability with the HasOne/HasMany hook\n *\n * The lookup is done using the `findBy` to lookup on the current model to retrieve the related model record data\n */\nexport const useLinkedChildModelRelatedModelRecords = (props: {\n  belongsToFieldApiId: string;\n  findBy?: RecordIdentifier;\n  currentModel: { apiIdentifier: string; namespace?: string[] | string | null };\n}) => {\n  const { findBy, belongsToFieldApiId, currentModel } = props;\n\n  const modelManager = useModelManager(currentModel);\n\n  const [{ data: selectedRecord, fetching: fetchingSelected, error: fetchSelectedRecordError }] = useFindExistingRecord(\n    modelManager,\n    findBy ?? \"\",\n    {\n      pause: !findBy, // BelongsTo needs a selected record to query in the related model\n      select: {\n        id: true,\n        [`${belongsToFieldApiId}Id`]: true, // Retrieve the raw field value, regardless of if the ID exists or not\n        [belongsToFieldApiId]: { _all: true }, // All of the fields on the related record iff the record exists\n      },\n    }\n  );\n\n  return {\n    selected: {\n      records: selectedRecord\n        ? [\n            {\n              ...selectedRecord[belongsToFieldApiId]?._all,\n              [`${belongsToFieldApiId}Id`]: selectedRecord[`${belongsToFieldApiId}Id`],\n            },\n          ]\n        : undefined,\n      fetching: fetchingSelected,\n      error: fetchSelectedRecordError,\n    },\n  };\n};\n\n/**\n * For getting the related child model records in a HasOne/HasMany relationship\n */\nexport const useLinkedParentModelRelatedModelRecords = (props: {\n  currentModel: {\n    apiIdentifier: string;\n    namespace?: string[] | string | null;\n  };\n  relatedModel: {\n    apiIdentifier: string;\n    namespace?: string[] | string | null;\n    inverseFieldApiIdentifier: string;\n  };\n  findBy?: RecordIdentifier;\n}) => {\n  const { currentModel, relatedModel, findBy } = props;\n  const { currentRecordId, fetchingCurrentRecord } = useCurrentRecordId({ currentModel, findBy });\n\n  const relatedModelManager = useModelManager(relatedModel);\n\n  const { apiIdentifier, inverseFieldApiIdentifier } = relatedModel;\n  if (!inverseFieldApiIdentifier) {\n    throw new Error(\n      `The inverse field api identifier is invalid for the related model \"${apiIdentifier}\" in the useLinkedParentModelRelatedModelRecords hook.`\n    );\n  }\n\n  const filterField = `${inverseFieldApiIdentifier}Id`; // Filter on the `Id` suffixed inverse field for compatibility before and after framework version v1.3\n\n  const [{ data: selectedRecords, fetching: fetchingSelected, error: fetchSelectedRecordError }] = useFindMany(relatedModelManager as any, {\n    pause: !currentRecordId || fetchingCurrentRecord, // HasOne/HasMany need the current record to query the inverse field in the related model\n\n    first: selectedRecordsToLoadCount, // Many records can point to the current record in hasOne/hasMany\n    filter: { [filterField]: { equals: currentRecordId } }, // Filter by the inverse field belongsTo field value\n  });\n\n  return {\n    selected: {\n      records: selectedRecords,\n      fetching: fetchingSelected,\n      error: fetchSelectedRecordError,\n    },\n  };\n};\n\nconst useCurrentRecordId = (props: {\n  currentModel: {\n    apiIdentifier: string;\n    namespace?: string[] | string | null;\n  };\n  findBy?: RecordIdentifier;\n}) => {\n  const { currentModel, findBy } = props;\n\n  const findByAsIdString = typeof findBy === \"string\" ? findBy : undefined;\n  const pause = !findBy || !!findByAsIdString;\n  const currentModelManager = useModelManager(currentModel);\n\n  const [{ data: currentRecord, fetching: fetchingCurrentRecord, error: fetchCurrentRecordError }] = useFindExistingRecord(\n    currentModelManager,\n    findBy ?? {},\n    { pause, select: { id: true } }\n  );\n\n  if (findByAsIdString) {\n    return {\n      currentRecordId: findByAsIdString,\n      fetchingCurrentRecord: false,\n    };\n  }\n\n  return {\n    currentRecordId: currentRecord?.id,\n    fetchingCurrentRecord,\n  };\n};\n\nexport const useAllRelatedModelRecords = (props: {\n  optionLabel?: OptionLabel;\n  relatedModel: { apiIdentifier: string; namespace?: string[] | string | null };\n}) => {\n  const { optionLabel, relatedModel } = props;\n  const optionLabelIsFieldName = typeof optionLabel === \"string\";\n\n  const relatedModelManager = useModelManager(relatedModel);\n\n  const [loadedRecords, setLoadedRecords] = useState<any[]>([]);\n  const [paginationPage, setPaginationPage] = useState<any>(undefined);\n  const [searchValue, setSearchValue] = useState<string | undefined>();\n\n  const [{ data: newlyFetchedRecords, fetching, error }, _refetch] = useFindMany(relatedModelManager as any, {\n    first: optionRecordsToLoadCount,\n    ...(paginationPage && { after: paginationPage }),\n    ...(searchValue && { search: searchValue }),\n    ...(optionLabelIsFieldName && { select: { id: true, [optionLabel]: true } }),\n  });\n\n  const hasNextPage = !!newlyFetchedRecords?.hasNextPage;\n\n  const clearPagination = useCallback(() => setPaginationPage(undefined), []);\n\n  const loadNextPage = useCallback(() => {\n    const canFetchNextPage =\n      newlyFetchedRecords && newlyFetchedRecords.length >= optionRecordsToLoadCount && hasNextPage && newlyFetchedRecords.endCursor;\n\n    if (canFetchNextPage) {\n      setPaginationPage(newlyFetchedRecords.endCursor);\n    }\n  }, [newlyFetchedRecords]);\n\n  const setSearch = useCallback((search?: string) => {\n    clearPagination();\n    const emptySearch = search === \"\";\n    setSearchValue(emptySearch ? undefined : search);\n  }, []);\n\n  /**\n   * This useEffect appends the newly fetched records to the list of records that have already been loaded\n   * `numberOfRecordsToLoad` are retrieved per `useFindMany` call\n   */\n  useEffect(() => {\n    if (fetching || !newlyFetchedRecords) {\n      return;\n    }\n\n    const allOptions = [\n      ...loadedRecords, // Maintain existing options\n      ...newlyFetchedRecords.map((record) => record),\n    ];\n\n    const updatedUniqueOptions = uniqByProperty(allOptions, \"id\");\n    const sortedUniqueOptions = sortByProperty(updatedUniqueOptions, \"id\");\n\n    setLoadedRecords(sortedUniqueOptions);\n  }, [paginationPage, searchValue, fetching]);\n\n  return {\n    relatedModel: {\n      records: loadedRecords,\n      error,\n      fetching,\n    },\n\n    pagination: {\n      clearPagination,\n      loadNextPage,\n      hasNextPage,\n    },\n\n    search: {\n      value: searchValue,\n      set: setSearch,\n    },\n  };\n};\n"]}
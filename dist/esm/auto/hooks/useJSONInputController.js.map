{"version":3,"file":"useJSONInputController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useJSONInputController.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACzD,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAE3C,OAAO,EAAE,iBAAiB,EAAwB,MAAM,2BAA2B,CAAC;AACpF,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AAEzE,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,KAEoC,EACpC,EAAE;IACF,MAAM,qBAAqB,GAAG,wBAAwB,CAAC,KAAK,CAAC,CAAC;IAC9D,MAAM,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC;IAC9C,MAAM,YAAY,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAElD,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAS,qBAAqB,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAErI,8HAA8H;IAC9H,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,OAAO,SAAS,IAAI,WAAW,IAAI,SAAS,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YAC1E,IAAI,CAAC;gBACH,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC3C,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,SAAS,CAAC,EAAE,CAAC;oBAC3C,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBAChD,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAChD,CAAC;QACH,CAAC;IACH,CAAC,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC;IAE9B,oFAAoF;IACpF,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,qBAAqB,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC9C,SAAS,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC;IACH,CAAC,EAAE,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC;IAElC,MAAM,QAAQ,GAAG,WAAW,CAC1B,CAAC,SAAiB,EAAE,EAAE;QACpB,SAAS,CAAC,SAAS,CAAC,CAAC;QACrB,IAAI,SAAS,IAAI,EAAE,EAAE,CAAC;YACpB,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACrC,OAAO;QACT,CAAC;QAED,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACrC,qBAAqB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB,CAAC,QAAQ,CAAC;gBAC7B,YAAY,EAAE,IAAI;gBAClB,GAAG,EAAE,SAAS;gBACd,KAAK;aACoB,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,EACD,CAAC,qBAAqB,CAAC,CACxB,CAAC;IAEF,OAAO;QACL,GAAG,qBAAqB;QACxB,QAAQ;QACR,KAAK,EAAE,MAAM;KACd,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport deepEqual from \"react-fast-compare\";\nimport type { UseControllerProps } from \"../../useActionForm.js\";\nimport { isFailedJSONParse, type FailedJSONParse } from \"../../validationSchema.js\";\nimport { useStringInputController } from \"./useStringInputController.js\";\n\nexport const useJSONInputController = (\n  props: {\n    field: string;\n  } & Omit<UseControllerProps, \"name\">\n) => {\n  const stringInputController = useStringInputController(props);\n  const jsonValue = stringInputController.value;\n  const isParseError = isFailedJSONParse(jsonValue);\n\n  const [string, setString] = useState<string>(stringInputController.value && !isParseError ? JSON.stringify(jsonValue, null, 2) : \"\");\n\n  // propagate imperative changes from the form state into the string input, but only if the parsed representations aren't equal\n  useEffect(() => {\n    if (typeof jsonValue != \"undefined\" && jsonValue != null && !isParseError) {\n      try {\n        const stringJSONValue = JSON.parse(string);\n        if (!deepEqual(stringJSONValue, jsonValue)) {\n          setString(JSON.stringify(jsonValue, null, 2));\n        }\n      } catch (error) {\n        setString(JSON.stringify(jsonValue, null, 2));\n      }\n    }\n  }, [jsonValue, isParseError]);\n\n  // Setting the value to an empty string when the value gets undefined through resets\n  useEffect(() => {\n    if (stringInputController.value === undefined) {\n      setString(\"\");\n    }\n  }, [stringInputController.value]);\n\n  const onChange = useCallback(\n    (newString: string) => {\n      setString(newString);\n      if (newString == \"\") {\n        stringInputController.onChange(null);\n        return;\n      }\n\n      try {\n        const parsed = JSON.parse(newString);\n        stringInputController.onChange(parsed);\n      } catch (error: any) {\n        stringInputController.onChange({\n          $failedParse: true,\n          raw: newString,\n          error,\n        } satisfies FailedJSONParse);\n      }\n    },\n    [stringInputController]\n  );\n\n  return {\n    ...stringInputController,\n    onChange,\n    value: string,\n  };\n};\n"]}
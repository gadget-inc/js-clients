{"version":3,"file":"useFileInputController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useFileInputController.tsx"],"names":[],"mappings":"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","sourcesContent":["import { filesize } from \"filesize\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useApi } from \"../../GadgetProvider.js\";\nimport type { GadgetOnlyImageFileFieldValidation, GadgetRangeFieldValidation } from \"../../internal/gql/graphql.js\";\nimport { useController, useFormContext, type Control } from \"../../useActionForm.js\";\nimport type { AutoFileFieldValue } from \"../../validationSchema.js\";\nimport { RequiredValidationSpecId, isAutoFileFieldValue } from \"../../validationSchema.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\n\nexport const imageFileTypes = [\"image/jpeg\", \"image/png\", \"image/svg+xml\", \"image/webp\"];\n\nexport const useFileInputController = (props: {\n  field: string; // The field API identifier\n  control?: Control<any>;\n}) => {\n  const { field: fieldApiIdentifier, control } = props;\n  // For showing a preview of the file\n  const [imageThumbnailURL, setImageThumbnailURL] = useState<string>();\n  const { path, metadata } = useFieldMetadata(fieldApiIdentifier);\n  const api = useApi();\n\n  const {\n    field: fieldProps,\n    fieldState: { error: errorFromValidator },\n  } = useController({\n    control,\n    name: path,\n  });\n\n  const { setError, clearErrors } = useFormContext();\n\n  useEffect(() => {\n    if (fieldProps.value && isAutoFileFieldValue(fieldProps.value) && fieldProps.value.url) {\n      setImageThumbnailURL(fieldProps.value.url);\n    }\n  }, [fieldProps.value]);\n\n  const canClearFileValue = useMemo(\n    () => !metadata.configuration.validations.find((validation) => validation?.specID === RequiredValidationSpecId),\n    [metadata.configuration.validations]\n  );\n\n  const fileSizeValidation = useMemo(\n    () => metadata.configuration.validations.find((validation) => validation?.__typename === \"GadgetRangeFieldValidation\"),\n    [metadata]\n  ) as GadgetRangeFieldValidation | undefined;\n\n  const onlyImagesValidation = useMemo(() => {\n    const imageValidation = metadata.configuration.validations.find(\n      (validation) => validation?.__typename === \"GadgetOnlyImageFileFieldValidation\"\n    ) as GadgetOnlyImageFileFieldValidation | undefined;\n    if (!imageValidation) return;\n\n    const acceptedTypes = [...imageFileTypes];\n    if (imageValidation.allowAnimatedImages) {\n      acceptedTypes.push(\"image/gif\");\n    }\n\n    return { acceptedTypes, allowAnimatedImages: imageValidation.allowAnimatedImages };\n  }, [metadata]);\n\n  const clearFileValue = useCallback(() => {\n    fieldProps.onChange(null);\n    setImageThumbnailURL(undefined);\n    clearErrors(path);\n  }, [clearErrors, fieldProps, path]);\n\n  const onFileUpload = useCallback(\n    async (files: File[]) => {\n      if (files.length === 0) {\n        return;\n      }\n\n      const file = files[0];\n      const baseFileValue = {\n        fileName: file.name,\n        mimeType: file.type,\n      } satisfies AutoFileFieldValue;\n\n      setImageThumbnailURL(window.URL.createObjectURL(file));\n\n      if (\n        fileSizeValidation &&\n        ((fileSizeValidation.min && file.size < fileSizeValidation.min) || (fileSizeValidation.max && file.size > fileSizeValidation.max))\n      ) {\n        setError(path, {\n          message: fileSizeValidationErrorMessage(fileSizeValidation, file.size),\n          type: \"validate\",\n        });\n\n        fieldProps.onChange({\n          ...baseFileValue,\n          $invalidFileSize: file.size,\n        } satisfies AutoFileFieldValue);\n\n        return;\n      }\n\n      fieldProps.onChange({\n        ...baseFileValue,\n        $uploading: true,\n      } satisfies AutoFileFieldValue);\n\n      // Upload the file in the background\n      const { url, token } = await (api as any).getDirectUploadToken();\n      await fetch(url, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": file.type,\n        },\n        body: file,\n      });\n\n      fieldProps.onChange({\n        directUploadToken: token,\n        ...baseFileValue,\n      } satisfies AutoFileFieldValue);\n    },\n    [api, fieldProps, fileSizeValidation, path, setError]\n  );\n\n  return {\n    fieldProps,\n    isError: !!errorFromValidator,\n    errorMessage: errorFromValidator?.message,\n    imageThumbnailURL,\n    onFileUpload,\n    clearFileValue,\n    validations: {\n      fileSize: fileSizeValidation,\n      onlyImages: onlyImagesValidation,\n    },\n    metadata,\n    canClearFileValue,\n  };\n};\n\nexport const getFileSizeValidationMessage = (\n  validation: GadgetRangeFieldValidation,\n  messageMap: {\n    min: (min: number) => string;\n    max: (max: number) => string;\n    inRange: (min: number, max: number) => string;\n  }\n) => {\n  if (validation.min) {\n    if (validation.max) {\n      return messageMap.inRange(validation.min, validation.max);\n    } else {\n      return messageMap.min(validation.min);\n    }\n  } else {\n    if (validation.max) {\n      return messageMap.max(validation.max);\n    }\n  }\n};\n\nexport const fileSizeValidationErrorMessage = (validation: GadgetRangeFieldValidation, fileSize: number) => {\n  let message = getFileSizeValidationMessage(validation, {\n    inRange: (min, max) => `must be a file between ${filesize(min)} and ${filesize(max)} big`,\n    max: (max) => `must be a file smaller than ${filesize(max)}`,\n    min: (min) => `must be a file larger than than ${filesize(min)}`,\n  });\n\n  if (message) {\n    message = `must be a file ${message}, and this file's size is ${filesize(fileSize)}.`;\n  }\n\n  return message;\n};\n"]}
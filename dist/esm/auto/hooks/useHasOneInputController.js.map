{"version":3,"file":"useHasOneInputController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useHasOneInputController.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useMemo } from \"react\";\nimport type { GadgetHasOneConfig } from \"../../internal/gql/graphql.js\";\nimport { useFieldArray } from \"../../useActionForm.js\";\nimport { uniq } from \"../../utils.js\";\nimport type { AutoRelationshipInputProps } from \"../interfaces/AutoRelationshipInputProps.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\nimport { useRelatedModelOptions } from \"./useRelatedModelOptions.js\";\n\nexport const useHasOneInputController = (props: AutoRelationshipInputProps) => {\n  const { field } = props;\n  const fieldMetadata = useFieldMetadata(field);\n  const { metadata, path } = fieldMetadata;\n\n  const inverseFieldApiIdentifier = useMemo(() => {\n    return (metadata.configuration as GadgetHasOneConfig).inverseField?.apiIdentifier;\n  }, [metadata.configuration]);\n\n  const { fields, remove, append, replace } = useFieldArray({\n    /**\n     * Currently, directly using the path will break the submit button.\n     * This feels like a good way to store the state of the hasOne selection, but hasOne fields can't send with array values\n     */\n    name: fieldMetadata.path + \"__RemoveOnceWeUpdateHasOneApiToMaintainOneToOneRelationships\",\n  });\n  const relatedModelOptions = useRelatedModelOptions(props);\n  const { options, selected, pagination, search, relatedModel } = relatedModelOptions;\n\n  const errorMessage = relatedModel.error?.message ?? selected.error?.message;\n  const isLoading = relatedModel.fetching || selected.fetching;\n\n  const retrievedSelectedRecordIds = selected.records?.map((record: { id: string }) => record.id) ?? [];\n  const unlinkedRecordIds = fields.filter((field: any) => field.__unlinkedInverseField).map((field: any) => field.__id);\n\n  const selectedRecordIds = uniq(\n    [\n      ...fields.map((field, i) => (field as any).__id), // To be selected upon submit\n      ...retrievedSelectedRecordIds, // From related model records in DB\n    ].filter((id) => !unlinkedRecordIds.includes(id))\n  );\n\n  const removeFromFieldsByRecordId = useCallback(\n    (recordId: string) => {\n      const index = fields.findIndex((entry) => (entry as any).__id === recordId);\n      if (index > -1) {\n        remove(index);\n      }\n    },\n    [fields]\n  );\n\n  const getUnselectedExistingRetrievedRecordsFieldValues = (excludedId?: string) =>\n    retrievedSelectedRecordIds\n      .filter((recordId) => recordId !== excludedId)\n      .map((recordId) => ({ __id: recordId, __unlinkedInverseField: inverseFieldApiIdentifier! }));\n\n  const onSelectRecord = useCallback(\n    (recordId: string) => {\n      const isAlreadySelected = selectedRecordIds.includes(recordId);\n      if (isAlreadySelected) {\n        onRemoveRecord(recordId);\n        return;\n      }\n\n      const isRetrievedValueReselect = retrievedSelectedRecordIds.includes(recordId);\n\n      replace(\n        isRetrievedValueReselect\n          ? getUnselectedExistingRetrievedRecordsFieldValues(recordId)\n          : [{ __id: recordId }, ...getUnselectedExistingRetrievedRecordsFieldValues()]\n      );\n    },\n    [retrievedSelectedRecordIds, selectedRecordIds]\n  );\n\n  const onRemoveRecord = useCallback(\n    (recordId: string) => {\n      const isSelectedInBackend = retrievedSelectedRecordIds.includes(recordId);\n\n      if (isSelectedInBackend) {\n        append({ __id: recordId, __unlinkedInverseField: inverseFieldApiIdentifier! });\n      } else {\n        // Only selected in frontend\n        removeFromFieldsByRecordId(recordId);\n      }\n    },\n    [retrievedSelectedRecordIds, inverseFieldApiIdentifier]\n  );\n\n  return {\n    fieldMetadata,\n\n    relatedModelOptions,\n\n    selectedRecordIds,\n\n    errorMessage,\n    isLoading,\n\n    onSelectRecord,\n    onRemoveRecord,\n  };\n};\n"]}
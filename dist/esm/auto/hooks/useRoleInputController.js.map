{"version":3,"file":"useRoleInputController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useRoleInputController.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAChC,OAAO,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AAErD,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AACvD,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAEzD,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,KAGtC,EAAE,EAAE;IACH,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IACjC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAEnD,MAAM,EACJ,KAAK,EAAE,UAAU,EACjB,UAAU,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,GAClC,GAAG,aAAa,CAAC;QAChB,OAAO;QACP,IAAI,EAAE,IAAI;KACX,CAAC,CAAC;IAEH,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,gBAAgB,EAAE,CAAC;IAElE,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE;QAC3B,IAAI,CAAC,KAAK;YAAE,OAAO,EAAE,CAAC;QACtB,OAAO,KAAK;aACT,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC1D,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACd,KAAK,EAAE,IAAI,CAAC,GAAG;YACf,KAAK,EAAE,IAAI,CAAC,IAAI;SACjB,CAAC,CAAC,CAAC;IACR,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,MAAM,OAAO,GAAG,QAAQ,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,kEAAkE;IAEpH,OAAO;QACL,gBAAgB,EAAE,UAAU,CAAC,KAAK,IAAI,EAAE;QACxC,QAAQ;QACR,OAAO;QACP,UAAU;QACV,OAAO;QACP,UAAU;QACV,UAAU;KACX,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAAG,CAAC,UAAU,CAAC,CAAC","sourcesContent":["import { useMemo } from \"react\";\nimport { useRolesMetadata } from \"../../metadata.js\";\nimport type { Control } from \"../../useActionForm.js\";\nimport { useController } from \"../../useActionForm.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\n\nexport const useRoleInputController = (props: {\n  field: string; // Field API identifier\n  control?: Control<any>;\n}) => {\n  const { field, control } = props;\n  const { path, metadata } = useFieldMetadata(field);\n\n  const {\n    field: fieldProps,\n    fieldState: { error: fieldError },\n  } = useController({\n    control,\n    name: path,\n  });\n\n  const { roles, fetching, error: rolesError } = useRolesMetadata();\n\n  const options = useMemo(() => {\n    if (!roles) return [];\n    return roles\n      .filter((role) => !unselectableRoleKeys.includes(role.key))\n      .map((role) => ({\n        value: role.key,\n        label: role.name,\n      }));\n  }, [roles]);\n\n  const loading = fetching || options.length === 0; // There must always be at least one role option `unauthenticated`\n\n  return {\n    selectedRoleKeys: fieldProps.value ?? [],\n    metadata,\n    options,\n    fieldProps,\n    loading,\n    rolesError,\n    fieldError,\n  };\n};\n\nconst unselectableRoleKeys = [\"sysadmin\"];\n"]}
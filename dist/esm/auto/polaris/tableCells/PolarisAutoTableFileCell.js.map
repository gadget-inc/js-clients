{"version":3,"file":"PolarisAutoTableFileCell.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/tableCells/PolarisAutoTableFileCell.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AACtE,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEvC,OAAO,EAAE,cAAc,EAAE,MAAM,uCAAuC,CAAC;AAEvE,MAAM,oBAAoB,GAAG,EAAE,CAAC;AAEhC,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,KAA+B,EAAE,EAAE;IAC1E,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IAExB,MAAM,gBAAgB,GAAG,KAAK,CAAC,QAAQ,CAAC;IAExC,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,EAAE;QACrC,MAAM,QAAQ,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE7C,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACxB,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC3C,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;YAEjC,IAAI,IAAI,CAAC,MAAM,GAAG,oBAAoB,EAAE,CAAC;gBACvC,qCAAqC;gBACrC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,oBAAoB,CAAC,GAAG,MAAM,CAAC;YAC1D,CAAC;YAED,4CAA4C;YAC5C,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrC,CAAC;aAAM,CAAC;YACN,mDAAmD;YACnD,OAAO,gBAAgB,CAAC;QAC1B,CAAC;IACH,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAEvB,MAAM,IAAI,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CACrD,oBAAC,SAAS,IAAC,IAAI,EAAC,OAAO,EAAC,GAAG,EAAE,gBAAgB,EAAE,MAAM,EAAE,KAAK,CAAC,GAAG,GAAI,CACrE,CAAC,CAAC,CAAC,CACF;QACE,oBAAC,IAAI,IAAC,MAAM,EAAE,QAAQ,GAAI,CACtB,CACP,CAAC;IAEF,OAAO,CACL,oBAAC,WAAW,IAAC,GAAG,EAAC,KAAK,EAAC,UAAU,EAAC,QAAQ,EAAC,IAAI,EAAE,KAAK;QACnD,IAAI;QACL,oBAAC,IAAI,IAAC,EAAE,EAAC,MAAM,EAAC,QAAQ,UACrB,iBAAiB,CACb,CACK,CACf,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Icon, InlineStack, Text, Thumbnail } from \"@shopify/polaris\";\nimport { NoteIcon } from \"@shopify/polaris-icons\";\nimport React, { useMemo } from \"react\";\nimport type { FileValueType } from \"../../../utils.js\";\nimport { imageFileTypes } from \"../../hooks/useFileInputController.js\";\n\nconst MAX_FILE_NAME_LENGTH = 12;\n\nexport const PolarisAutoTableFileCell = (props: { value: FileValueType }) => {\n  const { value } = props;\n\n  const originalFileName = value.fileName;\n\n  const formattedFileName = useMemo(() => {\n    const segments = originalFileName.split(\".\");\n\n    if (segments.length > 1) {\n      let name = segments.slice(0, -1).join(\".\");\n      const extension = segments.pop();\n\n      if (name.length > MAX_FILE_NAME_LENGTH) {\n        // Truncate the name if it's too long\n        name = name.substring(0, MAX_FILE_NAME_LENGTH) + \"(..)\";\n      }\n\n      // Join the name and extension back together\n      return [name, extension].join(\".\");\n    } else {\n      // Return the original name if there's no extension\n      return originalFileName;\n    }\n  }, [originalFileName]);\n\n  const icon = imageFileTypes.includes(value.mimeType) ? (\n    <Thumbnail size=\"small\" alt={originalFileName} source={value.url} />\n  ) : (\n    <div>\n      <Icon source={NoteIcon} />\n    </div>\n  );\n\n  return (\n    <InlineStack gap=\"200\" blockAlign=\"center\" wrap={false}>\n      {icon}\n      <Text as=\"span\" truncate>\n        {formattedFileName}\n      </Text>\n    </InlineStack>\n  );\n};\n"]}
{"version":3,"file":"PolarisAutoTableEncryptedStringCell.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/tableCells/PolarisAutoTableEncryptedStringCell.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AACnD,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAC5D,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAExC,MAAM,CAAC,MAAM,mCAAmC,GAAG,CAAC,KAAqB,EAAE,EAAE;IAC3E,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IAExB,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAE9C,MAAM,oBAAoB,GAAG,CAC3B,6BACE,KAAK,EAAE;YACL,OAAO,EAAE,MAAM;YACf,UAAU,EAAE,KAAK;SAClB,EACD,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;YACb,iFAAiF;YACjF,CAAC,CAAC,eAAe,EAAE,CAAC;YACpB,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC,EACD,IAAI,EAAC,mCAAmC;QAExC,oBAAC,GAAG,IAAC,OAAO,EAAE,gCAAgC;YAC5C,oBAAC,IAAI,IAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,GAAI,CAC3C,CACF,CACP,CAAC;IAEF,OAAO,CACL,6BAAK,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;QAC7B,oBAAC,GAAG;YACF,oBAAC,IAAI,IAAC,EAAE,EAAC,MAAM,EAAC,IAAI,EAAC,SAAS,EAAC,QAAQ,UACpC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CACtC,CACH;QACL,oBAAoB,CACjB,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,gCAAgC,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC","sourcesContent":["import { Icon, Tag, Text } from \"@shopify/polaris\";\nimport { HideIcon, ViewIcon } from \"@shopify/polaris-icons\";\nimport React, { useState } from \"react\";\n\nexport const PolarisAutoTableEncryptedStringCell = (props: { value: any }) => {\n  const { value } = props;\n\n  const [isShown, setIsShown] = useState(false);\n\n  const showHideToggleButton = (\n    <div\n      style={{\n        display: \"flex\",\n        marginLeft: \"2px\",\n      }}\n      onClick={(e) => {\n        // Prevent the row's onClick handler from being called when the button is clicked\n        e.stopPropagation();\n        e.preventDefault();\n        setIsShown(!isShown);\n      }}\n      role=\"EncryptedStringCellShowHideButton\"\n    >\n      <Tag onClick={dummyFunctionToGetOnClickStyling}>\n        <Icon source={isShown ? HideIcon : ViewIcon} />\n      </Tag>\n    </div>\n  );\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <Tag>\n        <Text as=\"span\" tone=\"subdued\" truncate>\n          {isShown ? value : \"â€¢\".repeat(value.length)}\n        </Text>\n      </Tag>\n      {showHideToggleButton}\n    </div>\n  );\n};\n\nconst dummyFunctionToGetOnClickStyling = () => undefined;\n"]}
{"version":3,"file":"PolarisAutoBulkActionModal.js","sourceRoot":"","sources":["../../../../src/auto/polaris/PolarisAutoBulkActionModal.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Banner, Button, ButtonGroup, Modal, Spinner, Text } from \"@shopify/polaris\";\nimport React, { useMemo } from \"react\";\nimport {\n  getRunActionConfirmationText,\n  useAutoTableBulkActionModal,\n  useGadgetBulkActionModalContent,\n  type AutoBulkActionModal,\n  type GadgetBulkActionModalContentProps,\n} from \"../hooks/useTableBulkActions.js\";\n\nexport const PolarisAutoBulkActionModal = (props: AutoBulkActionModal) => {\n  const { model, modelActionDetails, ids } = props;\n\n  const { actionIsLoaded, closeAndClear, isBulkGadgetAction, modalTitle, showModal } = useAutoTableBulkActionModal(props);\n\n  if (!actionIsLoaded || !isBulkGadgetAction || !modelActionDetails) {\n    return null;\n  }\n\n  return (\n    <>\n      <Modal onClose={closeAndClear} title={modalTitle} open={showModal}>\n        <GadgetBulkActionModalContent\n          model={model}\n          modelActionDetails={modelActionDetails}\n          actionLabel={modalTitle}\n          ids={ids}\n          close={closeAndClear}\n        />\n      </Modal>\n    </>\n  );\n};\n\n/**\n * Modal content for executing Gadget bulk actions\n */\nconst GadgetBulkActionModalContent = (props: GadgetBulkActionModalContentProps) => {\n  const { ids, close } = props;\n  const { hasRun, actionResultMessage, fetching, hasError, runAction } = useGadgetBulkActionModalContent(props);\n\n  return (\n    <>\n      <Modal.Section>\n        {fetching && <CenteredSpinner />}\n        {!fetching &&\n          (hasRun ? (\n            <Banner title={actionResultMessage} tone={hasError ? \"critical\" : \"success\"} />\n          ) : (\n            <RunActionConfirmationText count={ids.length} />\n          ))}\n      </Modal.Section>\n      <Modal.Section>\n        <div style={{ float: \"right\", paddingBottom: \"16px\" }}>\n          <ButtonGroup>\n            <Button variant=\"secondary\" onClick={close}>\n              Close\n            </Button>\n            {((!hasError && !hasRun) || fetching) && (\n              <Button variant=\"primary\" onClick={runAction} loading={fetching}>\n                Run\n              </Button>\n            )}\n          </ButtonGroup>\n        </div>\n      </Modal.Section>\n    </>\n  );\n};\n\nconst CenteredSpinner = () => (\n  <div style={{ textAlign: \"center\", width: \"100%\" }}>\n    <Spinner accessibilityLabel=\"Spinner example\" size=\"large\" />\n  </div>\n);\n\nconst RunActionConfirmationText = (props: { count: number }) => {\n  const { count } = props;\n  return useMemo(() => <Text as=\"p\">{getRunActionConfirmationText(count)}</Text>, [count]);\n};\n"]}
{"version":3,"file":"PolarisAutoBulkActionModal.js","sourceRoot":"","sources":["../../../../src/auto/polaris/PolarisAutoBulkActionModal.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Banner, Button, ButtonGroup, Modal, Spinner, Text } from \"@shopify/polaris\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport type { TableRow } from \"../../use-table/types.js\";\nimport { useBulkAction } from \"../../useBulkAction.js\";\nimport { humanizeCamelCase } from \"../../utils.js\";\nimport type { ModelActionDetails } from \"../hooks/useTableBulkActions.js\";\n\nexport const PolarisAutoBulkActionModal = (props: {\n  model: any;\n  modelActionDetails?: ModelActionDetails;\n  ids: string[];\n  selectedRows: TableRow[];\n  clearSelection: () => void;\n}) => {\n  const { model, modelActionDetails, ids, selectedRows, clearSelection } = props;\n\n  const [showModal, setShowModal] = React.useState(!!modelActionDetails);\n  const [actionName, setActionName] = React.useState(modelActionDetails?.apiIdentifier);\n\n  useEffect(() => {\n    if (!modelActionDetails) {\n      return;\n    }\n    setShowModal(true);\n    setActionName(modelActionDetails.apiIdentifier);\n  }, [modelActionDetails]);\n\n  const actionIsLoaded = modelActionDetails && actionName;\n  const isBulkGadgetAction = actionIsLoaded && model[actionName] && modelActionDetails.isGadgetAction && modelActionDetails.isBulk;\n\n  const modalTitle = useMemo(() => humanizeCamelCase(actionName ?? \"\"), [actionName]);\n\n  const closeAndClear = useCallback(() => {\n    setShowModal(false);\n    clearSelection();\n  }, [setShowModal, clearSelection]);\n\n  if (!actionIsLoaded || !isBulkGadgetAction) {\n    return null;\n  }\n\n  return (\n    <>\n      <Modal onClose={closeAndClear} title={modalTitle} open={showModal}>\n        <GadgetBulkActionModalContent\n          model={model}\n          modelActionDetails={modelActionDetails}\n          actionLabel={modalTitle.replace(\"Bulk \", \"\")}\n          ids={ids}\n          close={closeAndClear}\n        />\n      </Modal>\n    </>\n  );\n};\n\n/**\n * Modal content for executing Gadget bulk actions\n */\nconst GadgetBulkActionModalContent = (props: {\n  model: any;\n  modelActionDetails: ModelActionDetails;\n  actionLabel: string;\n  ids: string[];\n  close: () => void;\n}) => {\n  const { model, modelActionDetails, actionLabel: actionName, ids, close } = props;\n\n  const [hasRun, setHasRun] = React.useState(false);\n\n  // eslint-disable-next-line\n  // @ts-ignore:next-line\n  const [{ fetching, data, error }, runBulkAction] = useBulkAction(model[modelActionDetails.apiIdentifier], {});\n\n  const hasError = !!(error || (data && (data as any).success === false));\n\n  const actionResultBanner = useMemo(\n    () =>\n      hasError ? (\n        <Banner title={`${actionName}${ActionErrorMessage}`} tone=\"critical\" />\n      ) : (\n        <Banner title={`${actionName}${ActionSuccessMessage}`} tone=\"success\" />\n      ),\n    [hasError]\n  );\n\n  const runAction = useCallback(() => {\n    void runBulkAction(ids);\n    setHasRun(true);\n  }, [runBulkAction, ids]);\n\n  return (\n    <>\n      <Modal.Section>\n        {fetching && <CenteredSpinner />}\n        {!fetching && (hasRun ? actionResultBanner : <RunActionConfirmationText count={ids.length} />)}\n      </Modal.Section>\n      <Modal.Section>\n        <div style={{ float: \"right\", paddingBottom: \"16px\" }}>\n          <ButtonGroup>\n            <Button variant=\"secondary\" onClick={close}>\n              Close\n            </Button>\n            {((!hasError && !hasRun) || fetching) && (\n              <Button variant=\"primary\" onClick={runAction} loading={fetching}>\n                Run\n              </Button>\n            )}\n          </ButtonGroup>\n        </div>\n      </Modal.Section>\n    </>\n  );\n};\n\nconst CenteredSpinner = () => (\n  <div style={{ textAlign: \"center\" }}>\n    <Spinner accessibilityLabel=\"Spinner example\" size=\"large\" />\n  </div>\n);\n\nexport const ActionSuccessMessage = ` completed`;\nexport const ActionErrorMessage = ` failed`;\n\nconst RunActionConfirmationText = (props: { count: number }) => {\n  const { count } = props;\n  return useMemo(\n    () => <Text as=\"p\">{`Are you sure you want to run this action on ${count} record${count === 1 ? \"\" : `s`}?`}</Text>,\n    [count]\n  );\n};\n"]}
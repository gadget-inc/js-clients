{"version":3,"file":"PolarisJSONInput.js","sourceRoot":"","sources":["../../../../src/auto/polaris/PolarisJSONInput.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAkG,EAAE,EAAE;IACrI,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IAC3C,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAM,KAAK,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAgB,KAAK,CAAC,CAAC;IACzD,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAS,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5E,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,QAAQ,EAAE,CAAC;IAE3C,MAAM,cAAc,GAAG,WAAW,CAChC,CAAC,SAAiB,EAAE,EAAE;QACpB,SAAS,CAAC,SAAS,CAAC,CAAC;QACrB,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACtC,OAAO,CAAC,OAAO,CAAC,CAAC;YACjB,QAAQ,CAAC,KAAK,CAAC,CAAC;YAChB,QAAQ,CAAC,OAAO,CAAC,CAAC;QACpB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC;IACH,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,OAAO,CACL,oBAAC,SAAS,IACR,SAAS,EAAE,CAAC,EACZ,UAAU,QACV,KAAK,EAAE,MAAM,EACb,QAAQ,EAAE,cAAc,EACxB,KAAK,EAAE,CAAC,SAAS,IAAI,KAAK,IAAI,iBAAiB,KAAK,CAAC,OAAO,EAAE,KAC1D,UAAU,KACV,IAAI,GACR,CACH,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { TextFieldProps } from \"@shopify/polaris\";\nimport { TextField } from \"@shopify/polaris\";\nimport React, { useCallback, useState } from \"react\";\nimport { useFocus } from \"../../useFocus.js\";\n\nexport const PolarisJSONInput = (props: Omit<TextFieldProps, \"value\" | \"onChange\"> & { value: any; onChange: (value: any) => void }) => {\n  const { value, onChange, ...rest } = props;\n  const [json, setJSON] = useState<any>(value);\n  const [error, setError] = useState<Error | false>(false);\n  const [string, setString] = useState<string>(JSON.stringify(json, null, 2));\n  const [isFocused, focusProps] = useFocus();\n\n  const onStringChange = useCallback(\n    (newString: string) => {\n      setString(newString);\n      try {\n        const newJSON = JSON.parse(newString);\n        setJSON(newJSON);\n        setError(false);\n        onChange(newJSON);\n      } catch (error: any) {\n        setError(error);\n      }\n    },\n    [onChange]\n  );\n\n  return (\n    <TextField\n      multiline={4}\n      monospaced\n      value={string}\n      onChange={onStringChange}\n      error={!isFocused && error && `Invalid JSON: ${error.message}`}\n      {...focusProps}\n      {...rest}\n    />\n  );\n};\n"]}
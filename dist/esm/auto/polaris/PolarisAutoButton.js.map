{"version":3,"file":"PolarisAutoButton.js","sourceRoot":"","sources":["../../../../src/auto/polaris/PolarisAutoButton.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,OAAO,EAAE,uBAAuB,EAAE,MAAM,qCAAqC,CAAC;AAI9E;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAK/B,KAAyF,EACzF,EAAE;IACF,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,uBAAuB,CAAC;QAC5F,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE;YACrB,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBACrD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,aAAa,CAAC,CAAC;YACnD,CAAC;iBAAM,CAAC;gBACN,KAAK,CAAC,GAAG,KAAK,aAAa,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;QACD,OAAO,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YAC1B,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBACrD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,0BAA0B,KAAK,CAAC,OAAO,GAAG,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YACnG,CAAC;iBAAM,CAAC;gBACN,KAAK,CAAC,GAAG,KAAK,0BAA0B,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC;YAC5D,CAAC;QACH,CAAC;QACD,GAAG,KAAK;KACT,CAAC,CAAC;IAEH,OAAO,CACL,oBAAC,MAAM,IAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,EAAE,GAAG,KAAM,WAAW,IACtH,KAAK,EAAE,QAAQ,IAAI,KAAK,CAClB,CACV,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { ActionFunction, GlobalActionFunction } from \"@gadgetinc/api-client-core\";\nimport { Button } from \"@shopify/polaris\";\nimport type { ComponentProps } from \"react\";\nimport React from \"react\";\nimport type { OptionsType } from \"../../utils.js\";\nimport type { AutoButtonProps } from \"../hooks/useAutoButtonController.js\";\nimport { useAutoButtonController } from \"../hooks/useAutoButtonController.js\";\n\ndeclare let window: any;\n\n/**\n * Render a button that invokes an action when clicked, and shows a toast notification when the action succeeds or encounters an error by default.\n */\nexport const PolarisAutoButton = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>\n>(\n  props: AutoButtonProps<GivenOptions, SchemaT, ActionFunc> & ComponentProps<typeof Button>\n) => {\n  const { fetching, running, isDestructive, run, label, buttonProps } = useAutoButtonController({\n    onSuccess: (_result) => {\n      if (window && window.shopify && window.shopify.toast) {\n        window.shopify.toast.show(`${label} succeeded.`);\n      } else {\n        alert(`${label} succeeded.`);\n      }\n    },\n    onError: (error, _result) => {\n      if (window && window.shopify && window.shopify.toast) {\n        window.shopify.toast.show(`${label} encountered an error: ${error.message}.`, { isError: true });\n      } else {\n        alert(`${label} encountered an error: ${error.message}.`);\n      }\n    },\n    ...props,\n  });\n\n  return (\n    <Button loading={running} disabled={fetching} tone={isDestructive ? \"critical\" : undefined} onClick={run} {...buttonProps}>\n      {props?.children ?? label}\n    </Button>\n  );\n};\n"]}
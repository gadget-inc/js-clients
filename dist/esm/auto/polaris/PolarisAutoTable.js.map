{"version":3,"file":"PolarisAutoTable.js","sourceRoot":"","sources":["../../../../src/auto/polaris/PolarisAutoTable.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { FindManyFunction } from \"@gadgetinc/api-client-core\";\nimport {\n  BlockStack,\n  DataTable,\n  EmptySearchResult,\n  IndexFilters,\n  IndexTable,\n  IndexTableProps,\n  SkeletonBodyText,\n  useSetIndexFiltersMode,\n} from \"@shopify/polaris\";\nimport pluralize from \"pluralize\";\nimport React, { useMemo } from \"react\";\nimport { useTable } from \"../../useTable.js\";\nimport type { OptionsType } from \"../../utils.js\";\nimport type { AutoTableProps } from \"../AutoTable.js\";\n\nconst PolarisSkeletonTable = (props: { columns: number }) => {\n  const count = Array.from(Array(props.columns));\n  return (\n    <DataTable\n      columnContentTypes={count.map(() => \"text\")}\n      headings={count.map((i) => (\n        <SkeletonBodyText key={i} lines={1} />\n      ))}\n      rows={Array.from(Array(3)).map((_) => count.map((i) => <SkeletonBodyText key={i} lines={1} />))}\n    />\n  );\n};\n\n/**\n * Renders a table of records from the backend automatically for a given model using Polaris\n */\nexport const PolarisAutoTable = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n  Options extends FinderFunction[\"optionsType\"]\n>(\n  props: AutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>\n) => {\n  const [{ rows, columns, metadata, fetching, page, error }, refresh] = useTable<GivenOptions, SchemaT, FinderFunction, Options>(\n    props.model,\n    {\n      select: props.select,\n    } as any\n  );\n\n  const { mode, setMode } = useSetIndexFiltersMode();\n\n  const polarisTableProps = useMemo(() => {\n    const headings = [] as unknown as IndexTableProps[\"headings\"];\n    const sortable: boolean[] = [];\n\n    if (columns) {\n      for (const column of columns) {\n        headings.push({ title: column.name });\n        sortable.push(column.sortable);\n      }\n    }\n\n    return { headings, sortable };\n  }, [columns]);\n\n  if ((fetching && !rows) || !columns) {\n    return <PolarisSkeletonTable columns={polarisTableProps.headings.length} />;\n  }\n\n  const resourceName = {\n    singular: metadata?.name ?? \"\",\n    plural: metadata ? pluralize(metadata.name) : \"\",\n  };\n\n  return (\n    <BlockStack>\n      <IndexFilters\n        mode={mode}\n        setMode={setMode}\n        filters={[]}\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        onQueryChange={() => {}}\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        onQueryClear={() => {}}\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        onClearAll={() => {}}\n        tabs={[]}\n        selected={1}\n        loading={fetching}\n      />\n      <IndexTable\n        {...polarisTableProps}\n        resourceName={resourceName}\n        emptyState={<EmptySearchResult title={`No ${resourceName.plural} yet`} description={\"\"} withIllustration />}\n        loading={fetching}\n        hasMoreItems={page.hasNextPage}\n        itemCount={rows?.length ?? 0}\n        pagination={{\n          hasNext: page.hasNextPage,\n          hasPrevious: page.hasPreviousPage,\n          onNext: page.goToNextPage,\n          onPrevious: page.goToPreviousPage,\n        }}\n      >\n        {rows &&\n          columns &&\n          rows.map((row, index) => (\n            <IndexTable.Row key={row.id as string} id={row.id as string} position={index}>\n              {columns.map((column) => (\n                <IndexTable.Cell key={column.apiIdentifier}>{row[column.apiIdentifier]}</IndexTable.Cell>\n              ))}\n            </IndexTable.Row>\n          ))}\n      </IndexTable>\n    </BlockStack>\n  );\n};\n"]}
{"version":3,"file":"PolarisDateTimePicker.js","sourceRoot":"","sources":["../../../../src/auto/polaris/PolarisDateTimePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { DatePickerProps } from \"@shopify/polaris\";\nimport { DatePicker, Icon, InlineStack, Popover, TextField } from \"@shopify/polaris\";\nimport { CalendarMajor, ClockMinor } from \"@shopify/polaris-icons\";\nimport { format } from \"date-fns\";\nimport { utcToZonedTime, zonedTimeToUtc } from \"date-fns-tz\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useFocus } from \"../../useFocus.js\";\n\nconst localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\nconst getTimeString = (date: Date) => format(date, \"K:m aa\");\n\n// Use a regular expression to extract hours, minutes, and AM/PM\nconst timeStringRegex = /(\\d{1,2}):?(\\d{0,2})\\s*([APMapm]{0,2})/;\n\nconst parseTimeString = (timeString: string) => {\n  const result = timeString.match(timeStringRegex);\n\n  if (!result) {\n    return null;\n  }\n\n  // eslint-disable-next-line prefer-const\n  let [_, hoursStr, minutesStr, ampm] = result;\n\n  // Convert extracted values to integers\n  let hours = parseInt(hoursStr, 10);\n  const minutes = parseInt(minutesStr, 10) || 0; // Default minutes to 0 if not provided\n\n  // Handle AM/PM\n  ampm = ampm.toLowerCase();\n\n  if (ampm === \"pm\" && hours < 12) {\n    hours += 12;\n  } else if (ampm === \"am\" && hours === 12) {\n    hours = 0;\n  }\n\n  // Get the current date to set the time\n  const date = new Date();\n  date.setHours(hours, minutes, 0, 0);\n\n  return date;\n};\n\nconst copyTime = (to: Date, input: Date) => {\n  to.setHours(input.getHours());\n  to.setMinutes(input.getMinutes());\n  to.setSeconds(input.getSeconds());\n  to.setMilliseconds(input.getMilliseconds());\n};\n\nconst today = new Date();\nexport const PolarisDateTimePicker = (props: {\n  id?: string;\n  value?: Date;\n  includeTime?: boolean;\n  dateLabel?: string;\n  timeLabel?: string;\n  onChange: (value: Date) => void;\n  error?: string;\n}) => {\n  const { onChange, value } = props;\n  const localTime = value ? utcToZonedTime(value, localTz) : undefined;\n  const [{ month, year }, setDate] = useState({ month: (localTime ?? today).getMonth(), year: (localTime ?? today).getFullYear() });\n  const [datePopoverActive, setDatePopoverActive] = useState(false);\n\n  const onDateChange = useCallback<Exclude<DatePickerProps[\"onChange\"], undefined>>(\n    (range) => {\n      const date = new Date(range.start);\n      localTime && copyTime(date, localTime);\n      onChange(zonedTimeToUtc(date, localTz));\n      setDatePopoverActive(false);\n    },\n    [localTime, onChange]\n  );\n\n  // use a text field for the time input so any time can be entered\n  // the text field needs to be able to pass through invalid time states as the user enters input, so we use a different state atom for it, and only call `onChange` with valid dates\n  const [timeString, setTimeString] = useState(localTime ? getTimeString(localTime) : \"\");\n  useEffect(() => {\n    if (value) {\n      setTimeString(getTimeString(value));\n    }\n  }, [value]);\n\n  const onTimeStringChange = useCallback(\n    (newValue: string) => {\n      setTimeString(newValue);\n      const parsed = parseTimeString(timeString);\n      if (parsed) {\n        const date = localTime ? new Date(localTime) : new Date();\n        copyTime(date, parsed);\n        onChange(zonedTimeToUtc(date, localTz));\n      }\n    },\n    [localTime, onChange, timeString]\n  );\n\n  const parseSuccess = !!parseTimeString(timeString);\n  const [isTimeFocused, timeInputFocusProps] = useFocus();\n  const toggleDatePopoverActive = useCallback(() => setDatePopoverActive((v) => !v), []);\n  const handleMonthChange = useCallback((month: number, year: number) => setDate({ month, year }), []);\n\n  return (\n    <InlineStack gap=\"400\">\n      <Popover\n        preferredPosition=\"above\"\n        active={datePopoverActive}\n        activator={\n          <TextField\n            id={props.id ? `${props.id}-date` : undefined}\n            label={props.dateLabel ?? \"Date\"}\n            prefix={<Icon source={CalendarMajor} />}\n            autoComplete=\"off\"\n            value={localTime ? format(localTime, \"yyyy-MM-dd\") : \"\"}\n            onFocus={toggleDatePopoverActive}\n            error={props.error}\n          />\n        }\n        onClose={toggleDatePopoverActive}\n      >\n        <div style={{ padding: \"16px\" }}>\n          <DatePicker\n            month={month}\n            year={year}\n            allowRange={false}\n            onChange={onDateChange}\n            onMonthChange={handleMonthChange}\n            selected={props.value}\n          />\n        </div>\n      </Popover>\n      {props.includeTime && (\n        <TextField\n          id={props.id ? `${props.id}-time` : undefined}\n          label={props.timeLabel ?? \"Time\"}\n          prefix={<Icon source={ClockMinor} />}\n          autoComplete=\"off\"\n          value={timeString}\n          onChange={onTimeStringChange}\n          {...timeInputFocusProps}\n          error={!parseSuccess && !isTimeFocused && `Invalid time, please enter a value like \"11:00 AM\"`}\n        />\n      )}\n    </InlineStack>\n  );\n};\n"]}
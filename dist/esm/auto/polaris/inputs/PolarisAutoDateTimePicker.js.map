{"version":3,"file":"PolarisAutoDateTimePicker.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/inputs/PolarisAutoDateTimePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { DatePickerProps, TextFieldProps } from \"@shopify/polaris\";\nimport { DatePicker, Icon, InlineStack, Popover, TextField } from \"@shopify/polaris\";\nimport { CalendarIcon } from \"@shopify/polaris-icons\";\nimport React, { useCallback, useState } from \"react\";\nimport {\n  copyTime,\n  formatShortDateString,\n  getDateTimeObjectFromDate,\n  isValidDate,\n  utcToZonedTime,\n  zonedTimeToUtc,\n} from \"../../../dateTimeUtils.js\";\nimport type { GadgetDateTimeConfig } from \"../../../internal/gql/graphql.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useDateTimeField } from \"../../hooks/useDateTimeField.js\";\nimport PolarisAutoTimePicker from \"./PolarisAutoTimePicker.js\";\n\nexport const PolarisAutoDateTimePicker = autoInput(\n  (props: {\n    field: string;\n    id?: string;\n    value?: Date;\n    onChange?: (value: Date) => void;\n    error?: string;\n    includeTime?: boolean;\n    hideTimePopover?: boolean;\n    label?: string;\n    datePickerProps?: Partial<DatePickerProps>;\n    timePickerProps?: Partial<TextFieldProps>;\n  }) => {\n    const { localTz, localTime, onChange, value, fieldProps, metadata, fieldState } = useDateTimeField({\n      field: props.field,\n      value: props.value,\n      onChange: props?.onChange,\n    });\n\n    const [datePopoverActive, setDatePopoverActive] = useState(false);\n\n    const [popoverMonth, setPopoverMonth] = useState(getDateTimeObjectFromDate(localTime ?? utcToZonedTime(new Date(), localTz)).month);\n    const [popoverYear, setPopoverYear] = useState(getDateTimeObjectFromDate(localTime ?? utcToZonedTime(new Date(), localTz)).year);\n\n    const config = metadata.configuration;\n\n    const onDateChange = useCallback<Exclude<DatePickerProps[\"onChange\"], undefined>>(\n      (range) => {\n        (fieldProps || value) && copyTime(range.start, zonedTimeToUtc(range.start, localTz));\n        const dateOverride = value ?? new Date(fieldProps.value);\n        if (isValidDate(dateOverride)) {\n          range.start.setHours(dateOverride.getHours());\n          range.start.setMinutes(dateOverride.getMinutes());\n          range.start.setSeconds(dateOverride.getSeconds());\n          range.start.setMilliseconds(dateOverride.getMilliseconds());\n        }\n        onChange?.(zonedTimeToUtc(range.start, localTz));\n        fieldProps.onChange(zonedTimeToUtc(range.start, localTz));\n        setDatePopoverActive(false);\n      },\n      [fieldProps, value, localTz, onChange]\n    );\n\n    const toggleDatePopoverActive = useCallback(() => {\n      setPopoverMonth(getDateTimeObjectFromDate(isValidDate(localTime) && localTime ? localTime : new Date()).month);\n      setPopoverYear(getDateTimeObjectFromDate(isValidDate(localTime) && localTime ? localTime : new Date()).year);\n      setDatePopoverActive((active) => !active);\n    }, [localTime]);\n\n    const handleMonthChange = useCallback((month: number, year: number) => {\n      setPopoverMonth(month);\n      setPopoverYear(year);\n    }, []);\n\n    return (\n      <InlineStack gap=\"400\">\n        <Popover\n          preferredPosition=\"above\"\n          active={datePopoverActive}\n          activator={\n            <TextField\n              id={props.id ? `${props.id}-date` : undefined}\n              label={props.label ?? metadata.name ?? \"Date\"}\n              prefix={<Icon source={CalendarIcon} />}\n              autoComplete=\"off\"\n              value={localTime ? formatShortDateString(localTime) : \"\"}\n              onFocus={toggleDatePopoverActive}\n              requiredIndicator={metadata.requiredArgumentForInput}\n              error={props.error ?? fieldState.error?.message}\n            />\n          }\n          onClose={toggleDatePopoverActive}\n        >\n          <div style={{ padding: \"16px\" }}>\n            <DatePicker\n              month={popoverMonth}\n              year={popoverYear}\n              allowRange={false}\n              onChange={onDateChange}\n              onMonthChange={handleMonthChange}\n              selected={localTime ?? new Date()}\n              {...props.datePickerProps}\n            />\n          </div>\n        </Popover>\n        {(props.includeTime ?? (config as GadgetDateTimeConfig).includeTime) && (\n          <div style={{ width: \"130px\" }}>\n            <PolarisAutoTimePicker\n              fieldProps={fieldProps}\n              id={props.id}\n              localTime={localTime}\n              onChange={onChange}\n              hideTimePopover={props.hideTimePopover}\n              localTz={localTz}\n              timePickerProps={props.timePickerProps}\n              value={value}\n            />\n          </div>\n        )}\n      </InlineStack>\n    );\n  }\n);\n"]}
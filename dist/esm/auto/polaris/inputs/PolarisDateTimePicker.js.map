{"version":3,"file":"PolarisDateTimePicker.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/inputs/PolarisDateTimePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { DatePickerProps, TextFieldProps } from \"@shopify/polaris\";\nimport { DatePicker, Icon, InlineStack, Popover, TextField } from \"@shopify/polaris\";\nimport { CalendarIcon } from \"@shopify/polaris-icons\";\nimport { format } from \"date-fns\";\nimport { utcToZonedTime, zonedTimeToUtc } from \"date-fns-tz\";\nimport React, { useCallback, useState } from \"react\";\nimport { useController } from \"react-hook-form\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\nimport PolarisTimePicker from \"./PolarisTimePicker.js\";\n\nexport const copyTime = (to: Date, input: Date) => {\n  to.setHours(input.getHours());\n  to.setMinutes(input.getMinutes());\n  to.setSeconds(input.getSeconds());\n  to.setMilliseconds(input.getMilliseconds());\n};\n\nconst today = new Date();\nexport const PolarisDateTimePicker = (props: {\n  field: string;\n  id?: string;\n  value?: Date;\n  timeLabel?: string;\n  onChange?: (value: Date) => void;\n  error?: string;\n  includeTime?: boolean;\n  hideTimePopover?: boolean;\n  datePickerProps?: Partial<DatePickerProps>;\n  timePickerProps?: Partial<TextFieldProps>;\n}) => {\n  const { path, metadata } = useFieldMetadata(props.field);\n\n  const { field: fieldProps } = useController({\n    name: path,\n  });\n\n  const { onChange, value } = props;\n  const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  const localTime = value ? utcToZonedTime(value, localTz) : fieldProps.value;\n  const [dateTimeState, setDateTimeState] = useState({\n    month: (localTime ?? today).getMonth(),\n    year: (localTime ?? today).getFullYear(),\n    day: (localTime ?? today).getDay(),\n    hour: (localTime ?? today).getHours().toString(),\n    minute: (localTime ?? today).getMinutes().toString().padStart(2, \"0\"),\n    ampm: (localTime ?? today).getHours() >= 12 ? \"PM\" : \"AM\",\n  });\n  const [datePopoverActive, setDatePopoverActive] = useState(false);\n\n  const config = metadata.configuration;\n\n  const onDateChange = useCallback<Exclude<DatePickerProps[\"onChange\"], undefined>>(\n    (range) => {\n      const date = new Date(range.start);\n      localTime && copyTime(date, localTime);\n      onChange?.(zonedTimeToUtc(date, localTz));\n      fieldProps.onChange(zonedTimeToUtc(date, localTz));\n      setDatePopoverActive(false);\n    },\n    [localTime, onChange, localTz, fieldProps]\n  );\n\n  const toggleDatePopoverActive = useCallback(() => setDatePopoverActive((active) => !active), []);\n  const handleMonthChange = useCallback((month: number, year: number) => {\n    setDateTimeState((prevState) => ({\n      ...prevState,\n      month,\n      year,\n    }));\n    // setDateTimeState({ ...dateTimeState, month, year });\n  }, []);\n\n  return (\n    <InlineStack gap=\"400\">\n      <Popover\n        preferredPosition=\"above\"\n        active={datePopoverActive}\n        activator={\n          <TextField\n            id={props.id ? `${props.id}-date` : undefined}\n            label={metadata.name ?? \"Date\"}\n            prefix={<Icon source={CalendarIcon} />}\n            autoComplete=\"off\"\n            value={localTime ? format(localTime, \"yyyy-MM-dd\") : \"\"}\n            onFocus={toggleDatePopoverActive}\n            error={props.error}\n          />\n        }\n        onClose={toggleDatePopoverActive}\n      >\n        <div style={{ padding: \"16px\" }}>\n          <DatePicker\n            month={dateTimeState.month}\n            year={dateTimeState.year}\n            allowRange={false}\n            onChange={onDateChange}\n            onMonthChange={handleMonthChange}\n            selected={props.value}\n            {...props.datePickerProps}\n          />\n        </div>\n      </Popover>\n      {(props.includeTime ?? (config as any).includeTime) && (\n        <PolarisTimePicker\n          {...props.timePickerProps}\n          field={props.field}\n          dateTimeState={dateTimeState}\n          setDateTimeState={setDateTimeState}\n          id={props.id}\n          localTime={localTime}\n          onChange={onChange}\n          hideTimePopover={props.hideTimePopover}\n          localTz={localTz}\n        />\n      )}\n    </InlineStack>\n  );\n};\n"]}
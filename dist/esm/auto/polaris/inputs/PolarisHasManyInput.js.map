{"version":3,"file":"PolarisHasManyInput.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/inputs/PolarisHasManyInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useAutoFormMetadata } from \"../../AutoFormContext.js\";\nimport { assert } from \"@gadgetinc/api-client-core\";\nimport { Autocomplete, LegacyStack, Tag } from \"@shopify/polaris\";\nimport { useApi } from \"../../../GadgetProvider.js\";\nimport React, { useCallback, useState } from \"react\";\nimport { useFormFields } from \"../../AutoForm.js\";\nimport { useFindMany } from \"../../../useFindMany.js\";\nimport type { AnyModelManager } from \"@gadgetinc/api-client-core\";\nimport { useFieldArray, useFormContext } from \"react-hook-form\";\nimport type { GadgetBelongsToConfig } from \"src/internal/gql/graphql.js\";\n\n\n\nexport const PolarisHasManyInput = (props: { field: string }) => {\n  const { metadata } = useAutoFormMetadata();\n  const api = useApi();\n  const gadgetFields = useFormFields(metadata, {});\n\n  const fieldMetadata = gadgetFields.find((field) => field[1].apiIdentifier === props.field);\n\n  if (!fieldMetadata) {\n    throw new Error(`Field ${props.field} not found in metadata`);\n  }\n\n  const path = fieldMetadata[0];\n  const _field = fieldMetadata[1];\n\n  const { getValues } = useFormContext();\n\n  const {\n    fields, remove, replace\n  } = useFieldArray({\n    name: path,\n  });\n\n  const config = _field.configuration as GadgetBelongsToConfig\n\n  if(!config || !config.relatedModel) {\n    throw new Error(`Field ${props.field} not found in metadata`);\n  }\n\n  const modelManager = assert(\n    (api as any)[config.relatedModel.apiIdentifier] as AnyModelManager,\n    \"no model manager found for action function\"\n  );\n\n  const [{ data, fetching, error }, _refetch] = useFindMany(modelManager as any, {first: 25});\n\n  const [inputValue, setInputValue] = useState('');\n\n  const updateText = useCallback(\n    (value: string) => {\n      setInputValue(value);\n    },\n    [],\n  );\n\n  if(fetching || !data) {\n    return <p>Loading...</p>\n  }\n\n  const options = data.map((record: Record<string, any>) => {return { label: record.name, value: record.id}})\n\n  const verticalContentMarkup =\n    fields.length > 0 ? (\n      <LegacyStack spacing=\"extraTight\" alignment=\"center\">\n        {fields.map((field, i) => {\n          const id = getValues(path)[i].id\n          const option = options.find((option) => option.value === id)\n          return (\n            <Tag key={`option${field.id}`} onRemove={() => {\n              const index = fields.findIndex((entry) => entry.id == field.id)\n              remove(index)\n            }}>\n              {option?.label}\n            </Tag>\n          );\n        })}\n      </LegacyStack>\n    ) : null;\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label={_field.name}\n      value={inputValue}\n      verticalContent={verticalContentMarkup}\n      autoComplete=\"off\"\n    />\n  );\n\n  return (\n    <Autocomplete\n        allowMultiple\n        options={options}\n        selected={fields.map((field, i) => getValues(path)[i].id)}\n        textField={textField}\n        onSelect={(selection) => { replace(selection.map((id) => ({id: id}))) }}\n        listTitle={_field.name}\n      />\n  );\n};\n"]}
{"version":3,"file":"PolarisAutoBelongsToForm.js","sourceRoot":"","sources":["../../../../../../src/auto/polaris/inputs/relationships/PolarisAutoBelongsToForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ActionList, BlockStack, Button, ButtonGroup, Divider, InlineGrid, InlineStack, Modal, Popover, Text } from \"@shopify/polaris\";\nimport { MenuHorizontalIcon } from \"@shopify/polaris-icons\";\nimport React from \"react\";\nimport { useBelongsToForm } from \"../../../../useBelongsToForm.js\";\nimport { autoRelationshipForm } from \"../../../AutoInput.js\";\nimport { RelationshipContext } from \"../../../hooks/useAutoRelationship.js\";\nimport type { AutoRelationshipFormProps } from \"../../../interfaces/AutoRelationshipInputProps.js\";\nimport { SearchableSingleRelatedModelRecordSelector } from \"./SearchableSingleRelatedModelRecordSelector.js\";\nimport { renderOptionLabel } from \"./utils.js\";\n\n/**\n * A belongsTo field form component for use within <AutoForm></AutoForm> components\n * This component allows related model records to be created or updated from the current model.\n * Fields on the related model record are controlled with the nested <AutoInput/> child components.\n *\n * @example\n * ```tsx\n * <AutoForm action={api.modelA.create}>\n *   <AutoBelongsToForm field=\"parentModel\" >\n *     <AutoInput field=\"parentModelField\" />\n *   </AutoBelongsToForm>\n * </AutoForm>\n * ```\n * @param props.field - The belongsTo field API identifier\n * @param props.label - The label of the belongTo form component\n * @param props.children - The child components to be rendered within the form. This is intended to be used with <AutoInput/>.\n * @param props.optionLabel - Controls how records on the related model are displayed as options in the relationship field input component.\n *                            When using a string, the string will indicate the field on the related model record to be displayed as the option label.\n *                            When using a function, the function will be called with the record to return a ReactNode to be displayed as the option label\n * @returns The belongsTo field form component\n */\nexport const PolarisAutoBelongsToForm = autoRelationshipForm((props: AutoRelationshipFormProps) => {\n  const belongsToForm = useBelongsToForm(props);\n\n  const {\n    record,\n    actionsOpen,\n    isEditing,\n    setActionsOpen,\n    setIsEditing,\n    pathPrefix,\n    hasRecord,\n    recordOption,\n    relatedModelName: parentName,\n    path,\n    setValue,\n    getValues,\n    metaDataPathPrefix,\n  } = belongsToForm;\n\n  return (\n    <>\n      <BlockStack gap=\"300\">\n        <InlineGrid columns=\"1fr auto\">\n          {props.label ?? (\n            <Text as=\"h2\" variant=\"headingSm\">\n              {parentName}\n            </Text>\n          )}\n          {hasRecord && (\n            <Popover\n              active={actionsOpen}\n              activator={<Button onClick={() => setActionsOpen((prev) => !prev)} icon={MenuHorizontalIcon} />}\n              onClose={() => setActionsOpen(false)}\n            >\n              <ActionList\n                actionRole=\"menuitem\"\n                items={[\n                  {\n                    content: `Edit ${parentName.toLocaleLowerCase()}`,\n                    onAction: () => {\n                      setIsEditing(true);\n                      setActionsOpen(false);\n                    },\n                  },\n                  {\n                    content: `Remove ${parentName.toLocaleLowerCase()}`,\n                    onAction: () => {\n                      const { __typename, ...rest } = record;\n                      const nulledValues = Object.fromEntries(Object.keys(rest).map((key) => [key, null]));\n                      setValue(path, { ...nulledValues, __typename, _unlink: true });\n                      setActionsOpen(false);\n                    },\n                    destructive: true,\n                  },\n                ]}\n              />\n            </Popover>\n          )}\n        </InlineGrid>\n        {hasRecord ? (\n          <>\n            <Divider />\n            <InlineStack align=\"space-between\">\n              <BlockStack gap=\"200\">\n                {renderOptionLabel(recordOption!.primary, \"primary\")}\n                {recordOption!.secondary && renderOptionLabel(recordOption!.secondary, \"secondary\")}\n              </BlockStack>\n              {recordOption!.tertiary && renderOptionLabel(recordOption!.tertiary, \"tertiary\")}\n            </InlineStack>\n          </>\n        ) : (\n          <SearchableSingleRelatedModelRecordSelector form={belongsToForm} />\n        )}\n      </BlockStack>\n      <Modal open={isEditing} onClose={() => setIsEditing(false)} title={`Add ${parentName}`}>\n        <RelationshipContext.Provider\n          value={{ transformPath: (path) => pathPrefix + \".\" + path, transformMetadataPath: (path) => metaDataPathPrefix + \".\" + path }}\n        >\n          <Modal.Section>{props.children}</Modal.Section>\n          <Modal.Section>\n            <div style={{ float: \"right\", paddingBottom: \"16px\" }}>\n              <ButtonGroup>\n                <Button variant=\"secondary\" onClick={() => setIsEditing(false)}>\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"primary\"\n                  onClick={() => {\n                    const { _unlink, _link, id: recordId, ...rest } = getValues(path);\n\n                    if (recordId) {\n                      setValue(path, { ...rest, id: recordId });\n                    } else {\n                      setValue(path, rest);\n                    }\n                    setIsEditing(false);\n                  }}\n                >\n                  Save\n                </Button>\n              </ButtonGroup>\n            </div>\n          </Modal.Section>\n        </RelationshipContext.Provider>\n      </Modal>\n    </>\n  );\n});\n"]}
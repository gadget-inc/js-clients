{"version":3,"file":"PolarisAutoHasOneForm.js","sourceRoot":"","sources":["../../../../../../src/auto/polaris/inputs/relationships/PolarisAutoHasOneForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  ActionList,\n  AutoSelection,\n  BlockStack,\n  Button,\n  ButtonGroup,\n  Divider,\n  Icon,\n  InlineGrid,\n  InlineStack,\n  Listbox,\n  Modal,\n  Popover,\n  Text,\n} from \"@shopify/polaris\";\nimport { MenuHorizontalIcon, PlusCircleIcon } from \"@shopify/polaris-icons\";\nimport React from \"react\";\nimport { useHasOneForm } from \"../../../../useHasOneForm.js\";\nimport { autoRelationshipForm } from \"../../../AutoInput.js\";\nimport { RelationshipContext } from \"../../../hooks/useAutoRelationship.js\";\nimport type { OptionLabel } from \"../../../interfaces/AutoRelationshipInputProps.js\";\nimport { RelatedModelOptionsPopover, RelatedModelOptionsSearch } from \"./RelatedModelOptions.js\";\nimport { renderOptionLabel } from \"./utils.js\";\n\nexport const PolarisAutoHasOneForm = autoRelationshipForm(\n  (props: {\n    field: string;\n    children: React.ReactNode;\n    label?: React.ReactNode;\n    renderSelectedRecord?: (record: Record<string, any>) => React.ReactNode;\n    primaryLabel?: OptionLabel;\n    secondaryLabel?: OptionLabel;\n    tertiaryLabel?: OptionLabel;\n  }) => {\n    const {\n      path,\n      setValue,\n      getValues,\n      record,\n      actionsOpen,\n      setActionsOpen,\n      modalOpen,\n      setModalOpen,\n      searchOpen,\n      setSearchOpen,\n      search,\n      searchFilterOptions,\n      pagination,\n      records,\n      isLoading,\n      pathPrefix,\n      metaDataPathPrefix,\n      hasRecord,\n      recordOption,\n      childName,\n    } = useHasOneForm(props);\n\n    return (\n      <>\n        <RelationshipContext.Provider\n          value={{\n            transformPath: (path) => pathPrefix + \".\" + path,\n            transformMetadataPath: (path) => metaDataPathPrefix + \".\" + path,\n          }}\n        >\n          <BlockStack gap=\"300\">\n            <InlineGrid columns=\"1fr auto\">\n              {props.label ?? (\n                <Text as=\"h2\" variant=\"headingSm\">\n                  {childName}\n                </Text>\n              )}\n\n              {hasRecord && (\n                <Popover\n                  active={actionsOpen}\n                  activator={<Button onClick={() => setActionsOpen((prev) => !prev)} icon={MenuHorizontalIcon} />}\n                  onClose={() => setActionsOpen(false)}\n                >\n                  <ActionList\n                    actionRole=\"hasOneFormMenuItem\"\n                    items={[\n                      {\n                        content: `Edit ${childName.toLocaleLowerCase()}`,\n                        onAction: () => {\n                          setModalOpen(true);\n                          setActionsOpen(false);\n                        },\n                      },\n                      {\n                        content: `Remove ${childName.toLocaleLowerCase()}`,\n                        onAction: () => {\n                          if (!record) return;\n                          const { __typename, id: recordId, ...rest } = record;\n                          const nulledValues = Object.fromEntries(Object.keys(rest).map((key) => [key, null]));\n                          setValue(path, { ...nulledValues, __typename, _unlink: recordId });\n                          setActionsOpen(false);\n                        },\n                        destructive: true,\n                      },\n                    ]}\n                  />\n                </Popover>\n              )}\n            </InlineGrid>\n\n            {hasRecord ? (\n              props.renderSelectedRecord ? (\n                props.renderSelectedRecord(record as Record<string, any>)\n              ) : (\n                <>\n                  <Divider />\n                  <InlineStack align=\"space-between\">\n                    <BlockStack gap=\"200\">\n                      {renderOptionLabel(recordOption!.label, \"primary\")}\n                      {recordOption!.secondaryLabel && renderOptionLabel(recordOption!.secondaryLabel, \"secondary\")}\n                    </BlockStack>\n                    {recordOption!.tertiaryLabel && renderOptionLabel(recordOption!.tertiaryLabel, \"tertiary\")}\n                  </InlineStack>\n                </>\n              )\n            ) : (\n              <RelatedModelOptionsPopover\n                active={searchOpen}\n                activator={\n                  <RelatedModelOptionsSearch\n                    modelName={childName}\n                    value={search.value}\n                    onChange={search.set}\n                    onFocus={() => setSearchOpen(true)}\n                  />\n                }\n                onClose={() => setSearchOpen(false)}\n                onScrolledToBottom={pagination.loadNextPage}\n                actions={[\n                  <Listbox.Action key=\"add-new-record\" value=\"add-new-record\" divider>\n                    <InlineStack gap=\"200\">\n                      <Icon source={PlusCircleIcon} />\n                      Add {childName}\n                    </InlineStack>\n                  </Listbox.Action>,\n                ]}\n                options={searchFilterOptions}\n                records={records}\n                onSelect={(record) => {\n                  if (record.id === \"add-new-record\") {\n                    setModalOpen(true);\n                  } else {\n                    setValue(path, { ...record, _link: record.id });\n                  }\n                }}\n                isLoading={isLoading}\n                autoSelection={AutoSelection.None}\n              />\n            )}\n          </BlockStack>\n          <Modal open={modalOpen} onClose={() => setModalOpen(false)} title={`Add ${childName}`}>\n            <Modal.Section>{props.children}</Modal.Section>\n            <Modal.Section>\n              <div style={{ float: \"right\", paddingBottom: \"16px\" }}>\n                <ButtonGroup>\n                  <Button variant=\"secondary\" onClick={() => setModalOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button\n                    variant=\"primary\"\n                    onClick={() => {\n                      const { _unlink, _link, ...rest } = getValues(path);\n                      setValue(path, rest);\n                      setModalOpen(false);\n                    }}\n                  >\n                    Save\n                  </Button>\n                </ButtonGroup>\n              </div>\n            </Modal.Section>\n          </Modal>\n        </RelationshipContext.Provider>\n      </>\n    );\n  }\n);\n"]}
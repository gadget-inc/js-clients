{"version":3,"file":"RelatedModelOptions.js","sourceRoot":"","sources":["../../../../../../src/auto/polaris/inputs/relationships/RelatedModelOptions.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAC3C,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAe5G,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,KAA+B,EAAE,EAAE;IACrE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IAE9F,MAAM,cAAc,GAAG;QACrB,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC;QAClB,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACxB,OAAO,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAC1B,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAC3B,CAAC,CAAC,CAAC,CACF,oBAAC,gBAAgB,OAAK,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAI,CAChG,CAAC;QACJ,CAAC,CAAC;KACH,CAAC;IAEF,OAAO,CACL,oBAAC,OAAO,IACN,aAAa,EAAE,KAAK,CAAC,aAAa,EAClC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;YACf,MAAM,MAAM,GAAG,OAAO,EAAE,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;YACrE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,uBAAuB,EAAE,GAAG,MAAM,CAAC;YAC5F,QAAQ,CAAC,uBAAuB,CAAC,CAAC;QACpC,CAAC;QAEA,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CACvB,cAAc,CACf,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CACjB,oBAAC,WAAW,IAAC,OAAO,EAAE,eAAe,CAAC,YAAY,CAAC,GAAI,CACxD,CAAC,CAAC,CAAC,CACF,oBAAC,gBAAgB,OAAG,CACrB;QACA,SAAS,IAAI,oBAAC,OAAO,CAAC,OAAO,IAAC,kBAAkB,EAAC,SAAS,GAAG,CACtD,CACX,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { AutoSelection } from \"@shopify/polaris\";\nimport { Listbox } from \"@shopify/polaris\";\nimport React from \"react\";\nimport type { Option } from \"../../../interfaces/AutoRelationshipInputProps.js\";\nimport { ListMessage, NoRecordsMessage, SelectableOption, getErrorMessage } from \"./PolarisListMessages.js\";\n\ntype RelatedModelOptionsProps = {\n  options: Option[];\n  records?: Record<string, any>[];\n  isLoading?: boolean;\n  errorMessage?: string;\n\n  checkSelected?: (id: string) => boolean;\n  onSelect: (record: Record<string, any>) => void;\n  autoSelection?: AutoSelection;\n  actions?: React.ReactNode[];\n  renderOption?: (option: Option) => React.ReactNode;\n};\n\nexport const RelatedModelOptions = (props: RelatedModelOptionsProps) => {\n  const { checkSelected, onSelect, isLoading, errorMessage, options, records, actions } = props;\n\n  const listBoxOptions = [\n    ...(actions ?? []),\n    ...options.map((option) => {\n      return props.renderOption ? (\n        props.renderOption(option)\n      ) : (\n        <SelectableOption {...option} selected={checkSelected?.(option.id) ?? false} key={option.id} />\n      );\n    }),\n  ];\n\n  return (\n    <Listbox\n      autoSelection={props.autoSelection}\n      onSelect={(id) => {\n        const record = records?.find((record) => record.id === id) ?? { id };\n        const { createdAt: _createdAt, updatedAt: _updatedAt, ...recordWithoutTimestamps } = record;\n        onSelect(recordWithoutTimestamps);\n      }}\n    >\n      {listBoxOptions.length ? (\n        listBoxOptions\n      ) : errorMessage ? (\n        <ListMessage message={getErrorMessage(errorMessage)} />\n      ) : (\n        <NoRecordsMessage />\n      )}\n      {isLoading && <Listbox.Loading accessibilityLabel=\"Loading\" />}\n    </Listbox>\n  );\n};\n"]}
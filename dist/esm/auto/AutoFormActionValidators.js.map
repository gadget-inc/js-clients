{"version":3,"file":"AutoFormActionValidators.js","sourceRoot":"","sources":["../../../src/auto/AutoFormActionValidators.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ActionFunction, GlobalActionFunction } from \"@gadgetinc/api-client-core\";\nimport type { FieldMetadata } from \"../metadata.js\";\nimport { type GlobalActionMetadata, type ModelWithOneActionMetadata } from \"../metadata.js\";\nimport type { RecordIdentifier } from \"../use-action-form/types.js\";\nimport { isPlainObject } from \"../use-action-form/utils.js\";\nimport type { useAutoForm } from \"./AutoForm.js\";\n\nexport const validateNonBulkAction = (action: ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>) => {\n  if (action.isBulk) {\n    throw new Error(\"Bulk actions are not supported in AutoForms\");\n  }\n};\n\nconst GadgetApiTriggerSpecId = \"gadget/trigger/graphql_api\";\n\nexport const MissingActionPropErrorMessage = \"Specify a valid Gagdet action to use AutoForm\";\nexport const InvalidActionErrorMessage = `\"action\" is not a valid Gadget action`;\nexport const MissingApiTriggerErrorMessage = `\"action\" requires an API trigger to be used in AutoForm`;\n\nconst validActionTypes = [\"globalAction\", \"action\"];\n\nexport const validateTriggersFromApiClient = (action: ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>) => {\n  if (!validActionTypes.includes(action.type)) {\n    // When the API client is built with an action without the API trigger, the type will be \"stubbedAction\"\n    // action.type === \"globalAction\" | \"action\" // Only when the action has the API trigger when the api client is built\n    throw new Error(MissingApiTriggerErrorMessage);\n  }\n};\n\nexport const validateAutoFormProps = (props: Parameters<typeof useAutoForm>[0]) => {\n  if (!(\"action\" in props)) {\n    throw new Error(MissingActionPropErrorMessage);\n  }\n\n  if (!props.action) {\n    throw new Error(InvalidActionErrorMessage);\n  }\n\n  if (props.children) {\n    if (props.include) {\n      throw new Error(`AutoForm components with children cannot use the include option`);\n    }\n    if (props.exclude) {\n      throw new Error(`AutoForm components with children cannot use the exclude option`);\n    }\n  }\n};\n\nexport const validateTriggersFromMetadata = (metadata?: ModelWithOneActionMetadata | GlobalActionMetadata) => {\n  if (!metadata) {\n    return;\n  }\n  // When an action's API trigger is removed but the referenced API client still uses the old api-triggered action, the presence of the trigger shall be checked in the metadata\n\n  const triggersAsArray =\n    (metadata.__typename === \"GadgetGlobalAction\"\n      ? metadata.triggers\n      : metadata.__typename === \"GadgetModel\"\n      ? metadata.action.triggers\n      : []) ?? [];\n\n  const hasApiTrigger = triggersAsArray.some((trigger) => trigger.specID === GadgetApiTriggerSpecId);\n  if (!hasApiTrigger) {\n    throw new Error(MissingApiTriggerErrorMessage);\n  }\n};\n\nexport const validateFindByObjectWithMetadata = (\n  fields?: readonly { path: string; metadata: FieldMetadata }[],\n  findBy?: RecordIdentifier\n) => {\n  if (!findBy || typeof findBy === \"string\") {\n    return;\n  }\n\n  if (!isPlainObject(findBy) || Object.keys(findBy).length !== 1) {\n    throw new Error(\"The findBy prop in AutoForm must be an object containing a single unique Gadget field API identifier as a key.\");\n  }\n\n  if (!fields || !fields.length) {\n    return;\n  }\n\n  const findByUniqueFieldApiId = Object.keys(findBy)[0];\n  const uniqueFields = fields\n    .filter((field) => field.metadata.configuration.validations.some((validation) => validation?.specID === \"gadget/validation/unique\"))\n    .map((field) => field.metadata.apiIdentifier);\n\n  if (!uniqueFields.includes(findByUniqueFieldApiId)) {\n    throw new Error(\n      `The findBy prop in AutoForm must be an object containing a unique Gadget field API identifier as a key. \"${findByUniqueFieldApiId}\" is not a unique field name.`\n    );\n  }\n};\n"]}
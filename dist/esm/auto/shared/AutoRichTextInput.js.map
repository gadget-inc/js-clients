{"version":3,"file":"AutoRichTextInput.js","sourceRoot":"","sources":["../../../../src/auto/shared/AutoRichTextInput.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAEjD,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAChF,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAY7C,MAAM,iBAAiB,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;IAC9C,MAAM,CACJ,EACE,SAAS,EACT,0BAA0B,EAC1B,WAAW,EACX,UAAU,EACV,UAAU,EACV,cAAc,EACd,WAAW,EACX,WAAW,EACX,mBAAmB,EACnB,sBAAsB,EACtB,gBAAgB,EAChB,gBAAgB,EAChB,aAAa,EACb,uBAAuB,EACvB,QAAQ,EACR,eAAe,EACf,SAAS,GACV,EACD,CAAC,EACF,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,MAAM,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC;IAE5F,MAAM,aAAa,GAAqC,CAAC,KAAK,EAAE,EAAE;QAChE,MAAM,EAAE,SAAS,EAAE,GAAG,cAAc,EAAE,CAAC;QACvC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;QACrD,MAAM,UAAU,GAAG,wBAAwB,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAChE,MAAM,QAAQ,GAAG,MAAM,CAA0B,IAAI,CAAC,CAAC;QAEvD,SAAS,CAAC,GAAG,EAAE;YACb,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC;gBACrB,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,IAAI,EAAE,CAAC,CAAC;YACjE,CAAC;QACH,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAEvB,OAAO,CACL,oBAAC,SAAS,IACR,OAAO,EAAE;gBACP,cAAc,EAAE;gBAChB,WAAW,EAAE;gBACb,WAAW,EAAE;gBACb,mBAAmB,EAAE;gBACrB,sBAAsB,EAAE;gBACxB,gBAAgB,EAAE;gBAClB,gBAAgB,CAAC;oBACf,YAAY,EAAE,GAAG,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,CAAC,EAAE,QAAQ,IAAI,EAAE;oBACjE,QAAQ,EAAE,WAAW;oBACrB,YAAY,EAAE,IAAI;iBACnB,CAAC;gBACF,aAAa,CAAC;oBACZ,eAAe,EAAE,GAAG,EAAE,CAAC,CACrB,oBAAC,uBAAuB;wBACtB,oBAAC,QAAQ,OAAG;wBACZ,oBAAC,eAAe,OAAG;wBACnB,oBAAC,SAAS,OAAG;wBACb,oBAAC,0BAA0B,OAAG;wBAC9B,oBAAC,WAAW,OAAG;wBACf,oBAAC,UAAU,OAAG;wBACd,oBAAC,UAAU,OAAG,CACU,CAC3B;iBACF,CAAC;aACH,EACD,wBAAwB,EAAC,gBAAgB,EACzC,QAAQ,EAAE,UAAU,CAAC,KAAK,EAAE,QAAQ,IAAI,EAAE,EAC1C,QAAQ,EAAE,CAAC,QAAa,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,CAAC,EAC9D,GAAG,EAAE,QAAQ,CAAC,QAAQ,EAAE,SAAS,CAAQ,KACrC,IAAI,GACR,CACH,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC;AACpC,CAAC,CAAC,CAAC;AAEH,eAAe,iBAAiB,CAAC","sourcesContent":["import type { ForwardedRef } from \"react\";\nimport React, { useEffect, useRef } from \"react\";\nimport type { Control } from \"react-hook-form\";\nimport { useFormContext } from \"react-hook-form\";\nimport { get } from \"../../utils.js\";\nimport { useStringInputController } from \"../hooks/useStringInputController.js\";\nimport { multiref } from \"../hooks/utils.js\";\n\ninterface MDXEditorMethods {\n  setMarkdown: (markdown: string) => void;\n}\n\ninterface AutoRichTextInputProps {\n  field: string;\n  control?: Control<any>;\n  editorRef?: ForwardedRef<MDXEditorMethods> | null;\n}\n\nconst AutoRichTextInput = React.lazy(async () => {\n  const [\n    {\n      MDXEditor,\n      BoldItalicUnderlineToggles,\n      ListsToggle,\n      CodeToggle,\n      CreateLink,\n      headingsPlugin,\n      listsPlugin,\n      quotePlugin,\n      thematicBreakPlugin,\n      markdownShortcutPlugin,\n      linkDialogPlugin,\n      diffSourcePlugin,\n      toolbarPlugin,\n      DiffSourceToggleWrapper,\n      UndoRedo,\n      BlockTypeSelect,\n      Separator,\n    },\n    _,\n  ] = await Promise.all([import(\"@mdxeditor/editor\"), import(\"@mdxeditor/editor/style.css\")]);\n\n  const RichTextInput: React.FC<AutoRichTextInputProps> = (props) => {\n    const { formState } = useFormContext();\n    const { field, control, editorRef, ...rest } = props;\n    const controller = useStringInputController({ field, control });\n    const innerRef = useRef<MDXEditorMethods | null>(null);\n\n    useEffect(() => {\n      if (innerRef.current) {\n        innerRef.current.setMarkdown(controller.value?.markdown ?? \"\");\n      }\n    }, [controller.value]);\n\n    return (\n      <MDXEditor\n        plugins={[\n          headingsPlugin(),\n          listsPlugin(),\n          quotePlugin(),\n          thematicBreakPlugin(),\n          markdownShortcutPlugin(),\n          linkDialogPlugin(),\n          diffSourcePlugin({\n            diffMarkdown: get(formState.defaultValues, field)?.markdown ?? \"\",\n            viewMode: \"rich-text\",\n            readOnlyDiff: true,\n          }),\n          toolbarPlugin({\n            toolbarContents: () => (\n              <DiffSourceToggleWrapper>\n                <UndoRedo />\n                <BlockTypeSelect />\n                <Separator />\n                <BoldItalicUnderlineToggles />\n                <ListsToggle />\n                <CodeToggle />\n                <CreateLink />\n              </DiffSourceToggleWrapper>\n            ),\n          }),\n        ]}\n        contentEditableClassName=\"autoform-prose\"\n        markdown={controller.value?.markdown ?? \"\"}\n        onChange={(markdown: any) => controller.onChange({ markdown })}\n        ref={multiref(innerRef, editorRef) as any}\n        {...rest}\n      />\n    );\n  };\n\n  return { default: RichTextInput };\n});\n\nexport default AutoRichTextInput;\n"]}
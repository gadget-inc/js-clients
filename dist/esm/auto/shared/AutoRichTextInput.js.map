{"version":3,"file":"AutoRichTextInput.js","sourceRoot":"","sources":["../../../../src/auto/shared/AutoRichTextInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,SAAS,MAAM,mBAAmB,CAAC;AAC/C,OAAO,6BAA6B,CAAC;AACrC,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AACjD,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAChF,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE9D,OAAO,wBAAwB,CAAC;AAChC,MAAM,EACJ,SAAS,EACT,0BAA0B,EAC1B,WAAW,EACX,UAAU,EACV,UAAU,EACV,cAAc,EACd,WAAW,EACX,WAAW,EACX,mBAAmB,EACnB,sBAAsB,EACtB,gBAAgB,EAChB,aAAa,EACb,QAAQ,EACR,eAAe,EACf,SAAS,GACV,GAAG,SAAS,CAAC;AAEd,MAAM,iBAAiB,GAAG,SAAS,CAAyB,CAAC,KAAK,EAAE,EAAE;IACpE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IACrD,MAAM,UAAU,GAAG,wBAAwB,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;IAChE,eAAe,CAAC;QACd,kBAAkB,EAAE,KAAK;QACzB,eAAe,EAAE,UAAU,CAAC,QAAQ,CAAC,SAAS;QAC9C,iBAAiB,EAAE,eAAe,CAAC,QAAQ;KAC5C,CAAC,CAAC;IACH,MAAM,QAAQ,GAAG,MAAM,CAAmB,IAAI,CAAC,CAAC;IAEhD,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC;YACrB,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,IAAI,EAAE,CAAC,CAAC;QACjE,CAAC;IACH,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IAEvB,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,EAAE,SAAS,CAAQ,CAAC;IAClD,OAAO,CACL,oBAAC,SAAS,IACR,OAAO,EAAE;YACP,cAAc,EAAE;YAChB,WAAW,EAAE;YACb,WAAW,EAAE;YACb,mBAAmB,EAAE;YACrB,sBAAsB,EAAE;YACxB,gBAAgB,EAAE;YAClB,aAAa,CAAC;gBACZ,eAAe,EAAE,GAAG,EAAE,CAAC,CACrB;oBACE,oBAAC,QAAQ,OAAG;oBACZ,oBAAC,eAAe,OAAG;oBACnB,oBAAC,SAAS,OAAG;oBACb,oBAAC,0BAA0B,OAAG;oBAC9B,oBAAC,WAAW,OAAG;oBACf,oBAAC,UAAU,OAAG;oBACd,oBAAC,UAAU,OAAG,CACb,CACJ;aACF,CAAC;SACH,EACD,wBAAwB,EAAC,gBAAgB,EACzC,QAAQ,EAAE,UAAU,CAAC,KAAK,EAAE,QAAQ,IAAI,EAAE,EAC1C,QAAQ,EAAE,CAAC,QAAa,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,CAAC,KAC1D,CAAC,IAAI,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,KACvB,IAAI,GACR,CACH,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,eAAe,iBAAiB,CAAC","sourcesContent":["import * as mdxModule from \"@mdxeditor/editor\";\nimport \"@mdxeditor/editor/style.css\";\nimport React, { useEffect, useRef } from \"react\";\nimport { GadgetFieldType } from \"../../internal/gql/graphql.js\";\nimport { autoInput } from \"../AutoInput.js\";\nimport { useStringInputController } from \"../hooks/useStringInputController.js\";\nimport { assertFieldType, multiref } from \"../hooks/utils.js\";\nimport type { AutoRichTextInputProps, MDXEditorMethods } from \"./AutoRichTextInputProps.js\";\nimport \"./styles/rich-text.css\";\nconst {\n  MDXEditor,\n  BoldItalicUnderlineToggles,\n  ListsToggle,\n  CodeToggle,\n  CreateLink,\n  headingsPlugin,\n  listsPlugin,\n  quotePlugin,\n  thematicBreakPlugin,\n  markdownShortcutPlugin,\n  linkDialogPlugin,\n  toolbarPlugin,\n  UndoRedo,\n  BlockTypeSelect,\n  Separator,\n} = mdxModule;\n\nconst AutoRichTextInput = autoInput<AutoRichTextInputProps>((props) => {\n  const { field, control, editorRef, ...rest } = props;\n  const controller = useStringInputController({ field, control });\n  assertFieldType({\n    fieldApiIdentifier: field,\n    actualFieldType: controller.metadata.fieldType,\n    expectedFieldType: GadgetFieldType.RichText,\n  });\n  const innerRef = useRef<MDXEditorMethods>(null);\n\n  useEffect(() => {\n    if (innerRef.current) {\n      innerRef.current.setMarkdown(controller.value?.markdown ?? \"\");\n    }\n  }, [controller.value]);\n\n  const refs = multiref(innerRef, editorRef) as any;\n  return (\n    <MDXEditor\n      plugins={[\n        headingsPlugin(),\n        listsPlugin(),\n        quotePlugin(),\n        thematicBreakPlugin(),\n        markdownShortcutPlugin(),\n        linkDialogPlugin(),\n        toolbarPlugin({\n          toolbarContents: () => (\n            <>\n              <UndoRedo />\n              <BlockTypeSelect />\n              <Separator />\n              <BoldItalicUnderlineToggles />\n              <ListsToggle />\n              <CodeToggle />\n              <CreateLink />\n            </>\n          ),\n        }),\n      ]}\n      contentEditableClassName=\"autoform-prose\"\n      markdown={controller.value?.markdown ?? \"\"}\n      onChange={(markdown: any) => controller.onChange({ markdown })}\n      {...(refs && { ref: refs })}\n      {...rest}\n    />\n  );\n});\n\nexport default AutoRichTextInput;\n"]}
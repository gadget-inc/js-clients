{"version":3,"file":"MUIAutoForm.js","sourceRoot":"","sources":["../../../../src/auto/mui/MUIAutoForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { ActionFunction } from \"@gadgetinc/api-client-core\";\nimport type { GridProps } from \"@mui/material\";\nimport { Grid, Skeleton, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { FormProvider } from \"../../useActionForm.js\";\nimport { humanizeCamelCase, type OptionsType } from \"../../utils.js\";\nimport { useAutoForm, type AutoFormProps } from \"../AutoForm.js\";\nimport { validateAutoFormProps } from \"../AutoFormActionValidators.js\";\nimport { AutoFormMetadataContext } from \"../AutoFormContext.js\";\nimport { MUIAutoInput } from \"./inputs/MUIAutoInput.js\";\nimport { MUIAutoSubmit } from \"./submit/MUIAutoSubmit.js\";\nimport { MUISubmitErrorBanner, MUISubmitSuccessfulBanner } from \"./submit/MUISubmitResultBanner.js\";\n\nexport const MUIFormSkeleton = () => (\n  <>\n    <Skeleton animation=\"wave\" />\n    <Skeleton animation=\"wave\" />\n  </>\n);\n\nexport type MUIAutoFormProps<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>\n> = AutoFormProps<GivenOptions, SchemaT, ActionFunc> & GridProps;\n\n/**\n * Renders a form for an action on a model automatically using MUI\n */\nexport const MUIAutoForm = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>\n>(\n  props: MUIAutoFormProps<GivenOptions, SchemaT, ActionFunc>\n) => {\n  const { action, findBy } = props as MUIAutoFormProps<GivenOptions, SchemaT, ActionFunc> & { findBy: any };\n\n  validateAutoFormProps(props);\n\n  // Component key to force re-render when the action or findBy changes\n  const componentKey = `${action.modelApiIdentifier ?? \"\"}.${action.operationName}.${JSON.stringify(findBy)}`;\n\n  return <MUIAutoFormComponent key={componentKey} {...props} />;\n};\nexport const MUIAutoFormComponent = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>\n>(\n  props: MUIAutoFormProps<GivenOptions, SchemaT, ActionFunc>\n) => {\n  const { record: _record, action, findBy, ...rest } = props as MUIAutoFormProps<GivenOptions, SchemaT, ActionFunc> & { findBy: any };\n\n  const { metadata, fetchingMetadata, metadataError, fields, submit, formError, isSubmitting, isSubmitSuccessful, originalFormMethods } =\n    useAutoForm(props);\n\n  const autoFormMetadataContext: AutoFormMetadataContext = {\n    findBy,\n    submit,\n    metadata,\n    submitResult: {\n      isSuccessful: isSubmitSuccessful,\n      error: formError ?? metadataError,\n      isSubmitting,\n    },\n    model: {\n      apiIdentifier: action.modelApiIdentifier,\n      namespace: action.namespace,\n    },\n    options: {\n      include: props.include,\n      exclude: props.exclude,\n    },\n  };\n\n  const formTitle = props.title === undefined ? humanizeCamelCase(action.operationName) : props.title;\n\n  if (props.successContent && isSubmitSuccessful) {\n    return props.successContent;\n  }\n\n  if (fetchingMetadata) {\n    return (\n      <Grid container component=\"form\" spacing={2} onSubmit={submit as any} {...rest}>\n        <MUIFormSkeleton />\n      </Grid>\n    );\n  }\n\n  const formContent = props.children ?? (\n    <>\n      {formTitle && <Typography variant=\"h5\">{formTitle}</Typography>}\n      {!props.onSuccess && <MUISubmitSuccessfulBanner />}\n      {!props.onFailure && <MUISubmitErrorBanner />}\n      {!metadataError && (\n        <>\n          {fields.map(({ metadata }) => (\n            <Grid item key={metadata.apiIdentifier} xs={12}>\n              <MUIAutoInput field={metadata.apiIdentifier} />\n            </Grid>\n          ))}\n          <Grid item xs={12}>\n            <MUIAutoSubmit>{props.submitLabel ?? \"Submit\"}</MUIAutoSubmit>\n          </Grid>\n        </>\n      )}\n    </>\n  );\n\n  return (\n    <AutoFormMetadataContext.Provider\n      value={autoFormMetadataContext}\n      key={`${action.modelApiIdentifier}.${action.operationName}.${findBy}`}\n    >\n      <FormProvider {...originalFormMethods}>\n        <Grid container component=\"form\" spacing={2} onSubmit={submit as any} {...rest}>\n          {formContent}\n        </Grid>\n      </FormProvider>\n    </AutoFormMetadataContext.Provider>\n  );\n};\n"]}
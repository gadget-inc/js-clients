{"version":3,"file":"MUIAutoForm.js","sourceRoot":"","sources":["../../../../src/auto/mui/MUIAutoForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { ActionFunction } from \"@gadgetinc/api-client-core\";\nimport type { GridProps } from \"@mui/material\";\nimport { Grid, Skeleton } from \"@mui/material\";\nimport React from \"react\";\nimport { FormProvider } from \"react-hook-form\";\nimport { useActionMetadata } from \"../../metadata.js\";\nimport { useActionForm } from \"../../useActionForm.js\";\nimport type { OptionsType } from \"../../utils.js\";\nimport type { AutoFormProps } from \"../AutoForm.js\";\nimport { useFormFields, useValidationResolver } from \"../AutoForm.js\";\nimport { AutoFormMetadataContext } from \"../AutoFormContext.js\";\nimport { MUIAutoInput } from \"./inputs/MUIAutoInput.js\";\nimport { MUIAutoSubmit } from \"./submit/MUIAutoSubmit.js\";\nimport { MUISubmitResultBanner } from \"./submit/MUISubmitResultBanner.js\";\n\nexport const MUIFormSkeleton = () => (\n  <>\n    <Skeleton animation=\"wave\" />\n    <Skeleton animation=\"wave\" />\n  </>\n);\n\nexport type MUIAutoFormProps<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"]\n> = AutoFormProps<GivenOptions, SchemaT, ActionFunc, Options> & GridProps;\n\n/**\n * Renders a form for an action on a model automatically using MUI\n */\nexport const MUIAutoForm = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"]\n>(\n  props: MUIAutoFormProps<GivenOptions, SchemaT, ActionFunc, Options>\n) => {\n  const { action, record, findBy, ...rest } = props;\n\n  // fetch metadata describing this actions inputs and outputs from the backend\n  const { metadata, fetching: fetchingMetadata, error: metadataError } = useActionMetadata(action);\n\n  // filter down the fields to render only what we want to render for this form\n  const fields = useFormFields(metadata, props);\n\n  // setup the form state for the action\n  const {\n    submit,\n    error: formError,\n    formState: { isLoading, isSubmitSuccessful },\n    originalFormMethods,\n  } = useActionForm(action, {\n    defaultValues: { [action.modelApiIdentifier]: props.record },\n    findBy,\n    resolver: useValidationResolver(metadata),\n    send: fields.map(({ path }) => path),\n  });\n\n  const autoFormMetadataContext: AutoFormMetadataContext = {\n    submit,\n    metadata,\n    submitResult: {\n      isSuccessful: isSubmitSuccessful,\n      error: formError ?? metadataError,\n    },\n  };\n\n  if (props.successContent && isSubmitSuccessful) {\n    return props.successContent;\n  }\n\n  const formContent = props.children ?? (\n    <>\n      <MUISubmitResultBanner />\n      {fetchingMetadata && <MUIFormSkeleton />}\n      {fields.map(({ metadata }) => (\n        <Grid item key={metadata.apiIdentifier} xs={12}>\n          <MUIAutoInput field={metadata.apiIdentifier} />\n        </Grid>\n      ))}\n      <Grid item xs={12}>\n        <MUIAutoSubmit loading={isLoading}>{props.submitLabel ?? \"Submit\"}</MUIAutoSubmit>\n      </Grid>\n    </>\n  );\n\n  return (\n    <AutoFormMetadataContext.Provider value={autoFormMetadataContext}>\n      <FormProvider {...originalFormMethods}>\n        <Grid container component=\"form\" spacing={2} onSubmit={submit} {...rest}>\n          {formContent}\n        </Grid>\n      </FormProvider>\n    </AutoFormMetadataContext.Provider>\n  );\n};\n"]}
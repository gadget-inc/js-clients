{"version":3,"file":"MUIAutoJSONInput.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIAutoJSONInput.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,sBAAsB,EAAE,MAAM,uCAAuC,CAAC;AAE/E,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,KAG2B,EAC3B,EAAE;IACF,MAAM,EAAE,mBAAmB,EAAE,KAAK,EAAE,WAAW,EAAE,kBAAkB,EAAE,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;IACtG,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,QAAQ,EAAE,CAAC;IAC3C,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,WAAW,EAAE,GAAG,KAAK,CAAC;IAEnE,MAAM,YAAY,GAAG,CAAC,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC;IAE3C,OAAO,CACL,oBAAC,SAAS,IACR,SAAS,QACT,OAAO,EAAE,CAAC,EACV,UAAU,EAAE,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,KAC9C,kBAAkB,EACtB,KAAK,EAAE,WAAW,EAClB,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,mBAAmB,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAC5D,KAAK,EAAE,YAAY,EACnB,UAAU,EAAE,YAAY,IAAI,iBAAiB,KAAK,CAAC,OAAO,EAAE,KACxD,UAAU,KACV,WAAW,GACf,CACH,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { TextFieldProps } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport React from \"react\";\nimport type { Control } from \"react-hook-form\";\nimport { useFocus } from \"../../../useFocus.js\";\nimport { useJSONInputController } from \"../../hooks/useJSONInputController.js\";\n\nexport const MUIAutoJSONInput = (\n  props: {\n    field: string; // The field API identifier\n    control?: Control<any>;\n  } & Partial<TextFieldProps>\n) => {\n  const { onStringValueChange, error, stringValue, originalController } = useJSONInputController(props);\n  const [isFocused, focusProps] = useFocus();\n  const { field: _field, control: _control, ...restOfProps } = props;\n\n  const inErrorState = !isFocused && !!error;\n\n  return (\n    <TextField\n      multiline\n      maxRows={4}\n      inputProps={{ style: { fontFamily: \"monospace\" } }}\n      {...originalController}\n      value={stringValue}\n      onChange={(event) => onStringValueChange(event.target.value)}\n      error={inErrorState}\n      helperText={inErrorState && `Invalid JSON: ${error.message}`}\n      {...focusProps}\n      {...restOfProps}\n    />\n  );\n};\n"]}
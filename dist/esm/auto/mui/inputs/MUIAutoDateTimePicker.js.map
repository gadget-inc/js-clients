{"version":3,"file":"MUIAutoDateTimePicker.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIAutoDateTimePicker.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AACpC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAC7D,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAE3D,OAAO,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAC;AAEnE,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,KAAwF,EAAE,EAAE;IAChI,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;IACjE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACzD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC;IACtC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,aAAa,CAAC;QAC1C,IAAI,EAAE,IAAI;KACX,CAAC,CAAC;IAEH,OAAO,CACL,oBAAC,GAAG,IAAC,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;QAC1B,oBAAC,UAAU,IACT,KAAK,EAAE,QAAQ,CAAC,IAAI,EACpB,QAAQ,EAAE,CAAC,QAAuC,EAAE,EAAE;gBACpD,KAAK,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;gBACpE,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YACzE,CAAC,GACD;QACA,MAA+B,CAAC,WAAW,IAAI,CAC/C,oBAAC,UAAU,IACT,QAAQ,EAAE,CAAC,QAAuC,EAAE,EAAE;gBACpD,KAAK,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;gBACpE,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YACzE,CAAC,GACD,CACH,CACG,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,qBAAqB,CAAC","sourcesContent":["import { Box } from \"@mui/material\";\nimport { DatePicker, TimePicker } from \"@mui/x-date-pickers\";\nimport React from \"react\";\nimport { useController } from \"react-hook-form\";\nimport { zonedTimeToUtc } from \"../../../dateTimeUtils.js\";\nimport type { GadgetDateTimeConfig } from \"../../../internal/gql/graphql.js\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\n\nexport const MUIAutoDateTimePicker = (props: { field: string; value?: Date; onChange?: (value: Date) => void; error?: string }) => {\n  const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  const { path, metadata } = useFieldMetadata(props.field);\n  const config = metadata.configuration;\n  const { field: fieldProps } = useController({\n    name: path,\n  });\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <DatePicker\n        label={metadata.name}\n        onChange={(newValue: string | number | Date | null) => {\n          props.onChange?.(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n          fieldProps.onChange(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n        }}\n      />\n      {(config as GadgetDateTimeConfig).includeTime && (\n        <TimePicker\n          onChange={(newValue: string | number | Date | null) => {\n            props.onChange?.(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n            fieldProps.onChange(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n          }}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default MUIAutoDateTimePicker;\n"]}
{"version":3,"file":"MUIAutoFileInput.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIAutoFileInput.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAC/C,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAE3C,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAC;AAOnE,MAAM,mBAAmB,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IAC1C,IAAI,EAAE,eAAe;IACrB,QAAQ,EAAE,YAAY;IACtB,MAAM,EAAE,CAAC;IACT,QAAQ,EAAE,QAAQ;IAClB,QAAQ,EAAE,UAAU;IACpB,MAAM,EAAE,CAAC;IACT,IAAI,EAAE,CAAC;IACP,UAAU,EAAE,QAAQ;IACpB,KAAK,EAAE,CAAC;CACT,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAgD,EAAE,EAAE;IACnF,MAAM,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IACrD,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;IAChE,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC;IAErB,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,aAAa,CAAC;QAC1C,OAAO;QACP,IAAI,EAAE,IAAI;KACX,CAAC,CAAC;IAEH,MAAM,UAAU,GAAG,WAAW,CAC5B,KAAK,EAAE,KAAa,EAAE,EAAE;QACtB,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,MAAO,GAAW,CAAC,oBAAoB,EAAE,CAAC;QACjE,MAAM,KAAK,CAAC,GAAG,EAAE;YACf,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACP,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;aAC9B;YACD,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;SACf,CAAC,CAAC;QACH,UAAU,CAAC,QAAQ,CAAC;YAClB,iBAAiB,EAAE,KAAK;YACxB,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;SACxB,CAAC,CAAC;IACL,CAAC,EACD,CAAC,GAAG,EAAE,UAAU,CAAC,CAClB,CAAC;IAEF,OAAO,CACL,oBAAC,MAAM,IAAC,SAAS,EAAC,OAAO,EAAC,OAAO,EAAC,WAAW;QAC1C,QAAQ,CAAC,IAAI;;QAAG,QAAQ,CAAC,wBAAwB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI;QAC/D,oBAAC,mBAAmB,IAClB,IAAI,EAAC,MAAM,EACX,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;gBAClB,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACxD,KAAK,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3C,CAAC;YACH,CAAC,GACD,CACK,CACV,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Button, styled } from \"@mui/material\";\nimport React, { useCallback } from \"react\";\nimport type { Control } from \"react-hook-form\";\nimport { useController } from \"react-hook-form\";\nimport { useApi } from \"../../../GadgetProvider.js\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\n\nexport interface MUIFileInputProps {\n  label?: string;\n  value?: File;\n  onChange: (value: File) => void;\n}\nconst VisuallyHiddenInput = styled(\"input\")({\n  clip: \"rect(0 0 0 0)\",\n  clipPath: \"inset(50%)\",\n  height: 1,\n  overflow: \"hidden\",\n  position: \"absolute\",\n  bottom: 0,\n  left: 0,\n  whiteSpace: \"nowrap\",\n  width: 1,\n});\n\nexport const MUIAutoFileInput = (props: { field: string; control?: Control<any> }) => {\n  const { field: fieldApiIdentifier, control } = props;\n  const { path, metadata } = useFieldMetadata(fieldApiIdentifier);\n  const api = useApi();\n\n  const { field: fieldProps } = useController({\n    control,\n    name: path,\n  });\n\n  const uploadFile = useCallback(\n    async (files: File[]) => {\n      const { url, token } = await (api as any).getDirectUploadToken();\n      await fetch(url, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": files[0].type,\n        },\n        body: files[0],\n      });\n      fieldProps.onChange({\n        directUploadToken: token,\n        fileName: files[0].name,\n      });\n    },\n    [api, fieldProps]\n  );\n\n  return (\n    <Button component=\"label\" variant=\"contained\">\n      {metadata.name} {metadata.requiredArgumentForInput ? \"*\" : null}\n      <VisuallyHiddenInput\n        type=\"file\"\n        onChange={(event) => {\n          if (event.target.files && event.target.files.length > 0) {\n            void uploadFile([event.target.files[0]]);\n          }\n        }}\n      />\n    </Button>\n  );\n};\n"]}
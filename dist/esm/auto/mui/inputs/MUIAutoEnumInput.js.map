{"version":3,"file":"MUIAutoEnumInput.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIAutoEnumInput.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AACxD,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAC/C,OAAO,EAAE,sBAAsB,EAAE,MAAM,uCAAuC,CAAC;AAE/E,MAAM,CAAC,MAAM,gBAAgB,GAAG,SAAS,CACvC,CAOE,KAAiI,EACjI,EAAE;IACF,MAAM,EAAE,aAAa,EAAE,eAAe,EAAE,iBAAiB,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;IAE/G,OAAO,CACL,oBAAC,YAAY,IACX,aAAa,QACb,QAAQ,EAAE,aAAa,EACvB,OAAO,EAAE,UAAU,EACnB,WAAW,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,oBAAC,SAAS,OAAK,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,KAAK,GAAI,EAC/E,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAC3D,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACzB,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE,CAAC;gBACnE,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBACxB,OAAO;YACT,CAAC;YAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBAC9B,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC;iBAAM,CAAC;gBACN,KAAK,MAAM,MAAM,IAAI,KAAK,EAAE,CAAC;oBAC3B,iBAAiB,CAAC,MAAM,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC;QACH,CAAC,GACD,CACH,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["import type { AutocompleteProps, ChipTypeMap } from \"@mui/material\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport React from \"react\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useEnumInputController } from \"../../hooks/useEnumInputController.js\";\n\nexport const MUIAutoEnumInput = autoInput(\n  <\n    Value,\n    Multiple extends boolean | undefined = false,\n    DisableClearable extends boolean | undefined = false,\n    FreeSolo extends boolean | undefined = false,\n    ChipComponent extends React.ElementType = ChipTypeMap[\"defaultComponent\"]\n  >(\n    props: { field: string; label?: string } & Partial<AutocompleteProps<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>>\n  ) => {\n    const { allowMultiple, selectedOptions, onSelectionChange, allOptions, label } = useEnumInputController(props);\n\n    return (\n      <Autocomplete\n        disablePortal\n        multiple={allowMultiple}\n        options={allOptions}\n        renderInput={(params) => <TextField {...params} label={props.label ?? label} />}\n        value={allowMultiple ? selectedOptions : selectedOptions[0]}\n        onChange={(event, value) => {\n          if (value === null || (Array.isArray(value) && value.length === 0)) {\n            onSelectionChange(null);\n            return;\n          }\n\n          if (typeof value === \"string\") {\n            onSelectionChange(value);\n          } else {\n            for (const option of value) {\n              onSelectionChange(option);\n            }\n          }\n        }}\n      />\n    );\n  }\n);\n"]}
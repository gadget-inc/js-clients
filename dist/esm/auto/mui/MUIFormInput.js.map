{"version":3,"file":"MUIFormInput.js","sourceRoot":"","sources":["../../../../src/auto/mui/MUIFormInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { TextFieldProps } from \"@mui/material\";\nimport { Autocomplete, Checkbox, FormControl, FormControlLabel, FormGroup, FormHelperText, TextField } from \"@mui/material\";\nimport { DatePicker, DateTimePicker } from \"@mui/x-date-pickers\";\nimport type { ReactElement } from \"react\";\nimport React from \"react\";\nimport type { Control } from \"react-hook-form\";\nimport { useController } from \"react-hook-form\";\nimport type { GadgetEnumConfig, GadgetFieldType } from \"../../internal/gql/graphql\";\nimport type { FieldMetadata } from \"../../metadata\";\nimport { FieldType } from \"../../metadata.js\";\nimport { MUIFileInput } from \"./MUIFileInput.js\";\nimport { MUIJSONInput } from \"./MUIJSONInput.js\";\nimport { MUIRolesCombobox } from \"./MUIRolesCombobox.js\";\n\nconst FieldTypeToInputType: Partial<Record<GadgetFieldType, TextFieldProps[\"type\"]>> = {\n  [FieldType.Number]: \"number\",\n  [FieldType.Email]: \"email\",\n  [FieldType.Password]: \"password\",\n  [FieldType.EncryptedString]: \"password\",\n};\n\nexport const MUIAutoFormControl = (props: { path: string; control: Control<any>; field: FieldMetadata; children: ReactElement }) => {\n  const {\n    fieldState: { error },\n  } = useController({\n    name: props.path,\n    control: props.control,\n    rules: { required: props.field.requiredArgumentForInput },\n  });\n\n  return (\n    <FormControl {...props.field} error={!!error}>\n      <FormGroup>\n        <FormControlLabel label={props.field.name} control={props.children} />\n      </FormGroup>\n      {error && <FormHelperText>{error?.message}</FormHelperText>}\n    </FormControl>\n  );\n};\n\nexport const MUIFormInput = (props: { path: string; field: FieldMetadata; control: Control<any> }) => {\n  const {\n    field,\n    fieldState: { error },\n  } = useController({\n    name: props.path,\n    control: props.control,\n    rules: { required: props.field.requiredArgumentForInput },\n  });\n\n  const config = props.field.configuration;\n  switch (config.fieldType) {\n    case FieldType.String:\n    case FieldType.Number:\n    case FieldType.Email:\n    case FieldType.Password:\n    case FieldType.EncryptedString:\n    case FieldType.Color:\n    case FieldType.Url: {\n      return (\n        <TextField\n          label={props.field.name}\n          type={FieldTypeToInputType[props.field.fieldType]}\n          autoComplete=\"off\"\n          {...field}\n          error={!!error}\n          helperText={error?.message}\n        />\n      );\n    }\n    case FieldType.Boolean: {\n      return (\n        <MUIAutoFormControl {...props}>\n          <Checkbox {...field} />\n        </MUIAutoFormControl>\n      );\n    }\n    case FieldType.DateTime: {\n      return (\n        <MUIAutoFormControl {...props}>\n          {(config as any).includeTime ? <DateTimePicker {...field} /> : <DatePicker {...field} />}\n        </MUIAutoFormControl>\n      );\n    }\n    case FieldType.Json: {\n      return <MUIJSONInput label={props.field.name} {...field} />;\n    }\n    case FieldType.Enum: {\n      const config = props.field.configuration as GadgetEnumConfig;\n      return (\n        <Autocomplete\n          disablePortal\n          multiple={config.allowMultiple}\n          options={config.options.map((option) => ({ id: option.name, label: option.name }))}\n          {...field}\n          renderInput={(params) => <TextField {...params} label={props.field.name} />}\n        />\n      );\n    }\n    case FieldType.File: {\n      return (\n        <MUIAutoFormControl {...props}>\n          <MUIFileInput label={props.field.name} {...field} />\n        </MUIAutoFormControl>\n      );\n    }\n    case FieldType.RoleAssignments: {\n      return <MUIRolesCombobox label={props.field.name} {...field} />;\n    }\n    case FieldType.HasMany:\n    case FieldType.HasManyThrough:\n    case FieldType.HasOne:\n    case FieldType.BelongsTo: {\n      // TODO: implement relationship field inputs\n      return null;\n    }\n    case FieldType.RichText: {\n      // TODO: implement rich text input\n      return null;\n    }\n    case FieldType.Money: {\n      // TODO: implement money input\n      return null;\n    }\n    case FieldType.Vector: {\n      return null;\n    }\n    default: {\n      throw new Error(`Unsupported field type for MUI AutoForm: ${props.field.fieldType}`);\n    }\n  }\n};\n"]}
{"version":3,"file":"AutoInput.js","sourceRoot":"","sources":["../../../src/auto/AutoInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\nimport { useFieldsFromChildComponents } from \"./AutoFormContext.js\";\nimport { useRelationshipContext } from \"./hooks/useAutoRelationship.js\";\nimport { useRelationshipTransformedMetaDataPaths } from \"./hooks/useFieldMetadata.js\";\n\nexport interface AutoInputComponent<P> extends React.FC<P> {\n  __autoInput: true;\n}\n\nexport function autoInput<P extends { field: string }>(Component: React.FC<P>): AutoInputComponent<P> {\n  const WrappedComponent: React.FC<P> = (props) => {\n    const { hasCustomFormChildren, registerFields, fieldSet } = useFieldsFromChildComponents();\n    const relationshipContext = useRelationshipContext();\n\n    const fieldSetPath = useMemo(() => {\n      if (relationshipContext) {\n        return relationshipContext?.transformMetadataPath\n          ? relationshipContext.transformMetadataPath(props.field)\n          : relationshipContext.transformPath(props.field);\n      }\n\n      // Non relationship context - Use field name directly\n      return props.field;\n    }, [relationshipContext, props.field]);\n\n    useEffect(() => {\n      registerFields([fieldSetPath]);\n    }, [registerFields, fieldSetPath]);\n\n    if (hasCustomFormChildren && !fieldSet.has(fieldSetPath)) {\n      // Do not render before registration\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n\n  (WrappedComponent as AutoInputComponent<P>).__autoInput = true;\n\n  return WrappedComponent as AutoInputComponent<P>;\n}\n\nexport function autoRelationshipForm<P extends { field: string }>(\n  Component: React.FC<P>\n): AutoInputComponent<P & { selectPaths?: string[] }> {\n  const WrappedComponent: React.FC<P> = (props) => {\n    const { hasCustomFormChildren, registerFields, fieldSet } = useFieldsFromChildComponents();\n\n    const relationshipTransformedPaths = useRelationshipTransformedMetaDataPaths(props.field);\n    const hasSelectPaths = \"selectPaths\" in props && props.selectPaths;\n    const selectPathsToRegister = useMemo(\n      () =>\n        hasSelectPaths && Array.isArray(props.selectPaths)\n          ? props.selectPaths.map((selectPath) => `${relationshipTransformedPaths?.metaDataPath ?? props.field}.${selectPath}`)\n          : [],\n      [hasSelectPaths, props.field]\n    );\n\n    useEffect(() => {\n      if (hasSelectPaths) {\n        registerFields(selectPathsToRegister);\n      }\n    }, [hasSelectPaths, registerFields, selectPathsToRegister]);\n\n    if (hasCustomFormChildren && !selectPathsToRegister.every((field) => fieldSet.has(field))) {\n      // Do not render before registration\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n\n  (WrappedComponent as AutoInputComponent<P>).__autoInput = true;\n\n  return autoInput(WrappedComponent as AutoInputComponent<P>);\n}\n\nexport function isAutoInput(component: React.ReactElement): component is React.ReactElement<any, AutoInputComponent<any>> {\n  return typeof component.type === \"function\" && \"__autoInput\" in component.type;\n}\n"]}
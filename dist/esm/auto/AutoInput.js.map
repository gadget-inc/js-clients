{"version":3,"file":"AutoInput.js","sourceRoot":"","sources":["../../../src/auto/AutoInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\nimport type { FieldMetadata } from \"../metadata.js\";\nimport { useFieldsFromChildComponents } from \"./AutoFormContext.js\";\nimport { useRelationshipContext } from \"./hooks/useAutoRelationship.js\";\nimport { useFieldApiIdentifier, useRelationshipTransformedMetaDataPaths } from \"./hooks/useFieldMetadata.js\";\nimport { useSelectedPathsFromRecordLabel } from \"./hooks/useSelectedPathsFromRecordLabel.js\";\nimport type { AutoRelationshipFormProps } from \"./interfaces/AutoRelationshipInputProps.js\";\n\nexport interface AutoInputComponent<P> extends React.FC<P> {\n  __autoInput: true;\n}\n\nexport function autoInput<P extends { field: string }>(Component: React.FC<P>): AutoInputComponent<P> {\n  const WrappedComponent: React.FC<P> = (props) => {\n    const { hasCustomFormChildren, registerFields, fieldSet } = useFieldsFromChildComponents();\n    const relationshipContext = useRelationshipContext();\n    const fieldApiIdentifier = useFieldApiIdentifier(props.field);\n\n    const fieldSetPath = useMemo(() => {\n      if (relationshipContext) {\n        return relationshipContext?.transformMetadataPath\n          ? relationshipContext.transformMetadataPath(fieldApiIdentifier)\n          : relationshipContext.transformPath(fieldApiIdentifier);\n      }\n\n      // Non relationship context - Use field name directly\n      return fieldApiIdentifier;\n    }, [relationshipContext, fieldApiIdentifier]);\n\n    useEffect(() => {\n      registerFields([fieldSetPath]);\n    }, [registerFields, fieldSetPath]);\n\n    if (hasCustomFormChildren && !fieldSet.has(fieldSetPath)) {\n      // Do not render before registration\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n\n  (WrappedComponent as AutoInputComponent<P>).__autoInput = true;\n\n  return WrappedComponent as AutoInputComponent<P>;\n}\n\nexport function autoRelationshipForm<P extends Pick<AutoRelationshipFormProps, \"field\" | \"recordLabel\">>(\n  Component: React.FC<P>\n): AutoInputComponent<P> {\n  const WrappedComponent: React.FC<P> = (props) => {\n    const { hasCustomFormChildren, registerFields, fieldSet } = useFieldsFromChildComponents();\n\n    const { selectedPaths: displayedRecordPaths, metadata } = useSelectedPathsFromRecordLabel(props);\n\n    const relationshipTransformedPaths = useRelationshipTransformedMetaDataPaths(props.field);\n    const displayedRecordPathsToRegister = useMemo(() => {\n      const fallbackMetaDataPathPrefix = getFallbackMetaDataPathPrefix(props.field, metadata);\n      return displayedRecordPaths.map((path) => `${relationshipTransformedPaths?.metaDataPath ?? fallbackMetaDataPathPrefix}.${path}`);\n    }, [displayedRecordPaths, props.field, relationshipTransformedPaths?.metaDataPath, metadata]);\n\n    useEffect(() => {\n      registerFields(displayedRecordPathsToRegister);\n    }, [registerFields, displayedRecordPathsToRegister]);\n\n    if (hasCustomFormChildren && !displayedRecordPathsToRegister.every((field) => fieldSet.has(field))) {\n      // Do not render before registration\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n\n  (WrappedComponent as AutoInputComponent<P>).__autoInput = true;\n\n  return autoInput(WrappedComponent as AutoInputComponent<P>);\n}\n\nexport function isAutoInput(component: React.ReactElement): component is React.ReactElement<any, AutoInputComponent<any>> {\n  return typeof component.type === \"function\" && \"__autoInput\" in component.type;\n}\n\nconst getFallbackMetaDataPathPrefix = (field: string, metadata?: FieldMetadata) => {\n  const config = metadata?.configuration;\n  if (config?.__typename === \"GadgetHasManyThroughConfig\") {\n    // In HMT fields, the labels are based on the sibling model, but need to be routed through the join model\n    const joinModelHasManyFieldApiIdentifier = config.joinModelHasManyFieldApiIdentifier;\n    const inverseRelatedModelFieldApiId = config.inverseRelatedModelField?.apiIdentifier;\n    const fallbackMetaDataPath = `${joinModelHasManyFieldApiIdentifier}.${inverseRelatedModelFieldApiId}`;\n    return fallbackMetaDataPath;\n  }\n\n  return field;\n};\n"]}
{"version":3,"file":"ShadcnAutoTable.js","sourceRoot":"","sources":["../../../../src/auto/shadcn/ShadcnAutoTable.tsx"],"names":[],"mappings":"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","sourcesContent":["import { type FindManyFunction, type GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport pluralize from \"pluralize\";\nimport * as React from \"react\";\nimport { useCallback, useMemo, useRef } from \"react\";\nimport type { SortState, TableColumn, TableRow } from \"../../use-table/types.js\";\nimport { SelectionType, type RecordSelection } from \"../../useSelectedRecordsController.js\";\nimport { useTable } from \"../../useTable.js\";\nimport { type ColumnValueType, type OptionsType } from \"../../utils.js\";\nimport { type AutoTableProps } from \"../AutoTable.js\";\nimport { validateAutoTableProps } from \"../AutoTableValidators.js\";\nimport { useHover } from \"../hooks/useHover.js\";\nimport { useTableBulkActions } from \"../hooks/useTableBulkActions.js\";\nimport { defaultCellStyle } from \"../shared/defaultTableCellStyle.js\";\nimport type { ShadcnElements } from \"./elements.js\";\nimport { makeShadcnAutoLoadingIndicator } from \"./table/ShadcnAutoLoadingIndicator.js\";\nimport { makeShadcnAutoTableBulkActionModal } from \"./table/ShadcnAutoTableBulkActionModal.js\";\nimport { makeShadcnAutoTableBulkActionSelector } from \"./table/ShadcnAutoTableBulkActionSelector.js\";\nimport { makeShadcnAutoTableColumnSortIndicator } from \"./table/ShadcnAutoTableColumnSortIndicator.js\";\nimport { makeShadcnAutoTablePagination } from \"./table/ShadcnAutoTablePagination.js\";\nimport { makeShadcnAutoTableSearch } from \"./table/ShadcnAutoTableSearch.js\";\nimport { makeShadcnAutoTableCellRenderer } from \"./table/cells/ShadcnAutoTableCellRenderer.js\";\n\n/**\n * Renders a table for a model automatically using Shadcn\n */\nexport const makeAutoTable = (elements: ShadcnElements) => {\n  const { Alert, Skeleton, Table, TableBody, TableCell, TableHead, TableHeader, TableRow, Label, Checkbox } = elements;\n\n  const ShadcnAutoTableCellRenderer = makeShadcnAutoTableCellRenderer(elements);\n  const ShadcnAutoTablePagination = makeShadcnAutoTablePagination(elements);\n  const ShadcnAutoTableSearch = makeShadcnAutoTableSearch(elements);\n  const ShadcnAutoTableColumnSortIndicator = makeShadcnAutoTableColumnSortIndicator(elements);\n  const ShadcnAutoTableBulkActionSelector = makeShadcnAutoTableBulkActionSelector(elements);\n  const ShadcnAutoTableBulkActionModal = makeShadcnAutoTableBulkActionModal(elements);\n  const ShadcnAutoLoadingIndicator = makeShadcnAutoLoadingIndicator(elements);\n\n  function AutoTableSelectAllCheckbox(props: { selection: RecordSelection; rows: TableRow[] }) {\n    const { selection, rows } = props;\n    return (\n      <>\n        <Checkbox\n          id=\"AutoTableSelectAllCheckbox\"\n          checked={\n            selection.recordIds.length === rows?.length && rows?.length > 0\n              ? true\n              : selection.recordIds.length > 0\n              ? \"indeterminate\"\n              : false\n          }\n          onCheckedChange={(value) => selection.onSelectionChange(SelectionType.Page, !!value)}\n          onClick={(e) => e.stopPropagation()}\n        />\n      </>\n    );\n  }\n\n  function AutoTableColumnHeaders(props: { columns: TableColumn[]; sort: SortState }) {\n    const { columns, sort } = props;\n\n    return (\n      <>\n        {columns.map((column) => (\n          <AutoTableColumnHeader key={column.identifier} column={column} sort={sort} />\n        ))}\n      </>\n    );\n  }\n  function AutoTableColumnHeader(props: { column: TableColumn; sort: SortState }) {\n    const { column, sort } = props;\n\n    const [isHovered, hoverProps] = useHover();\n\n    return (\n      <>\n        <TableHead key={column.identifier} {...hoverProps}>\n          <div className=\"flex flex-row items-center gap-2\">\n            <Label>{column.header}</Label>\n            <ShadcnAutoTableColumnSortIndicator column={column} sortState={sort} isHovered={isHovered} />\n          </div>\n        </TableHead>\n      </>\n    );\n  }\n\n  function AutoTableSingleRowCheckbox(props: {\n    row: TableRow;\n    selection: RecordSelection;\n    toggleRecordSelection: (rowId: string) => void;\n  }) {\n    const { row, selection, toggleRecordSelection } = props;\n    return (\n      <TableCell>\n        <Checkbox\n          id={`AutoTableSingleRowCheckbox-${row.id as string}`}\n          checked={selection.recordIds.includes(row.id as string)}\n          onClick={(e) => {\n            toggleRecordSelection(row.id as string);\n            e.stopPropagation();\n          }}\n        />\n      </TableCell>\n    );\n  }\n\n  function AutoTableRowData(props: { row: TableRow; columns: TableColumn[] }) {\n    const { row, columns } = props;\n    return (\n      <>\n        {columns.map((column) => (\n          <TableCell key={column.identifier} style={{ ...defaultCellStyle, ...column.style }}>\n            {column.type == \"CustomRenderer\" ? (\n              (row[column.identifier] as React.ReactNode)\n            ) : (\n              <ShadcnAutoTableCellRenderer column={column} value={row[column.identifier] as ColumnValueType} />\n            )}\n          </TableCell>\n        ))}\n      </>\n    );\n  }\n\n  function ShadcnAutoTableComponent<\n    GivenOptions extends OptionsType,\n    SchemaT,\n    FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n    Options extends FinderFunction[\"optionsType\"]\n  >(props: AutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>) {\n    const { onClick, searchable = true, paginate = true } = props;\n\n    const [methods, refresh] = useTable<GivenOptions, SchemaT, FinderFunction, Options>(props.model, {\n      select: props.select,\n      columns: props.columns,\n      excludeColumns: props.excludeColumns,\n      pageSize: props.pageSize,\n      live: props.live,\n      initialSort: props.initialSort,\n      filter: props.filter,\n      search: props.searchValue,\n    } as any);\n\n    const {\n      columns,\n      rows,\n\n      page,\n      search,\n      fetching, // TODO - add a loading state\n      error, // TODO - add an error state\n      selection,\n      sort,\n      metadata,\n      data: rawRecords,\n    } = methods;\n\n    const onClickCallback = useCallback(\n      (row: any, rawRecord: GadgetRecord<any>) => {\n        return () => onClick?.(row, rawRecord);\n      },\n      [onClick]\n    );\n\n    const toggleRecordSelection = useCallback(\n      (rowId: string) => {\n        selection.onSelectionChange(SelectionType.Single, !selection.recordIds.includes(rowId), rowId);\n      },\n      [selection]\n    );\n\n    const resourceName = useMemo(\n      () =>\n        props.resourceName ?? {\n          singular: metadata?.name ?? \"\",\n          plural: metadata ? pluralize(metadata.name) : \"\",\n        },\n      [props.resourceName, metadata]\n    );\n    const { bulkActionOptions, selectedModelActionDetails } = useTableBulkActions({\n      model: props.model,\n      actions: props.actions,\n      excludeActions: props.excludeActions,\n    });\n    const canSelectRecords = props.selectable === undefined ? bulkActionOptions.length !== 0 : props.selectable;\n    const hasSelectedRecords = selection.recordIds.length > 0;\n    const tableRef = useRef<HTMLDivElement>(null);\n\n    if (error) {\n      return <Alert>Error</Alert>;\n    }\n    if ((fetching && !rows) || !columns) {\n      return <Skeleton />;\n    }\n\n    return (\n      <>\n        <div className=\"sticky flex flex-col gap-2\" ref={tableRef}>\n          <ShadcnAutoTableBulkActionModal\n            model={props.model}\n            modelActionDetails={selectedModelActionDetails}\n            ids={selection.recordIds}\n            clearSelection={selection.clearAll}\n          />\n\n          {hasSelectedRecords ? (\n            <div className=\"absolute flex flex-row items-center w-[100%] pl-2 z-10\">\n              <AutoTableSelectAllCheckbox selection={selection} rows={rows} />\n              <Label className=\"ml-2\">{`${selection.recordIds.length} selected`}</Label>\n\n              <div className=\"flex flex-row ml-auto gap-2 items-center\">\n                <ShadcnAutoTableBulkActionSelector bulkActionOptions={bulkActionOptions} selection={selection} rows={rows} />\n              </div>\n            </div>\n          ) : searchable ? (\n            <ShadcnAutoTableSearch search={search} />\n          ) : null}\n          <Table>\n            <TableHeader>\n              <TableRow className={`${hasSelectedRecords ? \"opacity-0\" : \"\"}`}>\n                {canSelectRecords && (\n                  <TableHead>\n                    <AutoTableSelectAllCheckbox selection={selection} rows={rows} />\n                  </TableHead>\n                )}\n                <AutoTableColumnHeaders columns={columns} sort={sort} />\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {rows?.length ? (\n                rows.map((row, index) => (\n                  <TableRow\n                    key={row.id as string}\n                    className={`${canSelectRecords || onClick ? \"cursor-pointer\" : \"\"}`}\n                    data-state={\"selected\"}\n                    onClick={onClick ? onClickCallback(row, rawRecords?.[index]) : () => toggleRecordSelection(row.id as string)}\n                  >\n                    {canSelectRecords && (\n                      <AutoTableSingleRowCheckbox row={row} selection={selection} toggleRecordSelection={toggleRecordSelection} />\n                    )}\n                    <AutoTableRowData row={row} columns={columns} />\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                    {props.emptyState ?? `No ${resourceName.plural} yet`}\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n          {paginate && <ShadcnAutoTablePagination page={page} />}\n        </div>\n      </>\n    );\n  }\n\n  return <\n    GivenOptions extends OptionsType,\n    SchemaT,\n    FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n    Options extends FinderFunction[\"optionsType\"]\n  >(\n    props: AutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>\n  ) => {\n    const { model } = props;\n    validateAutoTableProps(model);\n    const componentKey = `${[model.findMany.namespace, model.findMany.modelApiIdentifier].join(\"_\")}AutoTable`;\n\n    return <ShadcnAutoTableComponent key={componentKey} {...props} />;\n  };\n};\n"]}
{"version":3,"file":"ShadcnAutoDateTimePicker.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/inputs/ShadcnAutoDateTimePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import { CalendarIcon } from \"@radix-ui/react-icons\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport {\n  copyTime,\n  formatDate,\n  getDateTimeObjectFromDate,\n  getTimeString,\n  isValidDate,\n  timeFormatRegex,\n  zonedTimeToUtc,\n} from \"../../../dateTimeUtils.js\";\nimport type { GadgetDateTimeConfig } from \"../../../internal/gql/graphql.js\";\nimport { useController } from \"../../../useActionForm.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\nimport { ShadcnRequired } from \"../ShadcnRequired.js\";\nimport type { ShadcnElements } from \"../elements.js\";\n\nexport interface Range {\n  start: Date;\n  end: Date;\n}\n\nexport interface DatePickerProps {\n  onChange: (date: Date) => void;\n  selected: Date;\n  onSelect: (date: Date) => void;\n  initialFocus: boolean;\n  mode: \"single\" | \"range\";\n  weekStartsOn: number;\n  dayAccessibilityLabelPrefix: string;\n  onMonthChange: (month: number, year: number) => void;\n  allowRange: boolean;\n  multiMonth: boolean;\n  disableDatesBefore: Date;\n  disableDatesAfter: Date;\n  disableSpecificDates: Date[];\n  range: Range;\n}\n\nexport const makeShadcnAutoDateTimePicker = ({\n  Button,\n  Calendar,\n  Label,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n}: Pick<\n  ShadcnElements,\n  \"Button\" | \"Calendar\" | \"Label\" | \"Popover\" | \"PopoverTrigger\" | \"PopoverContent\" | \"ScrollArea\" | \"ScrollBar\"\n>) => {\n  function ShadcnAutoDateTimePicker(props: {\n    field: string;\n    id?: string;\n    value?: Date;\n    onChange?: (value: Date) => void;\n    error?: string;\n    includeTime?: boolean;\n    hideTimePopover?: boolean;\n    label?: string;\n    datePickerProps?: Partial<DatePickerProps>;\n    timePickerProps?: { label?: string; placeholder?: string };\n  }) {\n    const { path, metadata } = useFieldMetadata(props.field);\n    const { field: fieldProps, fieldState } = useController({ name: path });\n    const { onChange, value } = props;\n    const [timeParseError, setTimeParseError] = useState(false);\n\n    const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const localTime = useMemo(() => {\n      return value ? value : isValidDate(new Date(fieldProps.value)) ? new Date(fieldProps.value) : undefined;\n    }, [value, fieldProps.value]);\n\n    const config = metadata.configuration;\n\n    const onDateChange = useCallback<Exclude<DatePickerProps[\"onChange\"], undefined>>(\n      (range) => {\n        (fieldProps || value) && copyTime(range, zonedTimeToUtc(range, localTz));\n        const dateOverride = value ?? new Date(fieldProps.value);\n        if (isValidDate(dateOverride)) {\n          range.setHours(dateOverride.getHours());\n          range.setMinutes(dateOverride.getMinutes());\n          range.setSeconds(dateOverride.getSeconds());\n          range.setMilliseconds(dateOverride.getMilliseconds());\n        }\n        onChange?.(zonedTimeToUtc(range, localTz));\n        fieldProps.onChange(zonedTimeToUtc(range, localTz));\n      },\n      [fieldProps, value, localTz, onChange]\n    );\n\n    const [date, setDate] = useState<Date>();\n    const [isOpen, setIsOpen] = useState(false);\n\n    const initialTimeString = useMemo(() => (localTime ? getTimeString(getDateTimeObjectFromDate(localTime)) : \"\"), []);\n\n    const [timeString, setTimeString] = useState<string>(initialTimeString);\n\n    const handleDateSelect = (selectedDate: Date | undefined) => {\n      if (selectedDate) {\n        setDate(selectedDate);\n        onDateChange?.(selectedDate);\n      }\n    };\n\n    const handleTimeInput = (inputTimeString: string) => {\n      setTimeString(inputTimeString.toUpperCase());\n\n      if (!timeFormatRegex.test(inputTimeString)) {\n        setTimeParseError(true);\n        return;\n      }\n      setTimeParseError(false);\n\n      if (date) {\n        const [time, period] = inputTimeString.split(\" \");\n        const [hours, minutes] = time.split(\":\").map(Number);\n        const newDate = new Date(date);\n\n        let adjustedHours = hours;\n        if (period.toUpperCase() === \"PM\" && hours !== 12) {\n          adjustedHours = hours + 12;\n        } else if (period.toUpperCase() === \"AM\" && hours === 12) {\n          adjustedHours = 0;\n        }\n\n        newDate.setHours(adjustedHours);\n        newDate.setMinutes(minutes);\n        setDate(newDate);\n        onChange?.(zonedTimeToUtc(newDate, localTz));\n        fieldProps.onChange(zonedTimeToUtc(newDate, localTz));\n      }\n    };\n\n    return (\n      <Popover open={isOpen} onOpenChange={setIsOpen}>\n        <PopoverTrigger asChild>\n          <div>\n            <Label htmlFor={props.id ? `${props.id}-date` : undefined}>\n              {props.label ?? metadata.name ?? \"Date\"}\n              {metadata.requiredArgumentForInput && <ShadcnRequired>*</ShadcnRequired>}\n            </Label>\n            <Button\n              id={props.id ? `${props.id}-date` : undefined}\n              variant=\"outline\"\n              className={`w-full justify-start text-left font-normal ${!date ? \"text-muted-foreground\" : \"\"}`}\n            >\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              {localTime ? (\n                formatDate(localTime)\n              ) : (\n                <span className=\"opacity-50\">\n                  {props.includeTime ?? (config as GadgetDateTimeConfig).includeTime ? \"YYYY-MM-DD hh:mm aa\" : \"YYYY-MM-DD\"}\n                </span>\n              )}\n            </Button>\n            {(props.error || fieldState.error?.message) && (\n              <Label className=\"text-red-500\">{props.error || fieldState.error?.message}</Label>\n            )}\n          </div>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\">\n          <div className=\"flex flex-row flex-nowrap\">\n            <Calendar\n              mode=\"single\"\n              defaultMonth={localTime ?? date}\n              selected={localTime ?? date}\n              onSelect={handleDateSelect}\n              initialFocus\n            />\n            {(props.includeTime ?? (config as GadgetDateTimeConfig).includeTime) && (\n              <div className=\"flex flex-col p-4 bg-white border-l\">\n                <Label htmlFor={props.id ? `${props.id}-time` : undefined} data-testid={props.id ? `${props.id}-time` : undefined}>\n                  {props.timePickerProps?.label ?? \"Time\"} (HH:MM AM/PM)\n                </Label>\n                <input\n                  type=\"text\"\n                  id={props.id ? `${props.id}-time` : undefined}\n                  data-testid={props.id ? `${props.id}-time` : undefined}\n                  className=\"w-32 px-3 py-2 border rounded-md mt-2\"\n                  placeholder={props.timePickerProps?.placeholder ?? \"12:00 AM\"}\n                  value={timeString}\n                  onChange={(e) => handleTimeInput(e.target.value)}\n                />\n                {timeParseError && <span className=\"text-xs text-red-500 mt-1\">Please use format: 12:00 PM</span>}\n              </div>\n            )}\n          </div>\n        </PopoverContent>\n      </Popover>\n    );\n  }\n\n  ShadcnAutoDateTimePicker.displayName = \"ShadcnAutoDateTimePicker\";\n\n  return autoInput(ShadcnAutoDateTimePicker);\n};\n"]}
{"version":3,"file":"ShadcnAutoHasOneForm.js","sourceRoot":"","sources":["../../../../../../src/auto/shadcn/inputs/relationships/ShadcnAutoHasOneForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import { PlusCircleIcon } from \"lucide-react\";\nimport React, { useCallback } from \"react\";\nimport { useHasOneForm } from \"../../../../useHasOneForm.js\";\nimport { autoRelationshipForm } from \"../../../AutoInput.js\";\nimport { RelationshipContext } from \"../../../hooks/useAutoRelationship.js\";\nimport type { AutoRelationshipFormProps } from \"../../../interfaces/AutoRelationshipInputProps.js\";\nimport type { ShadcnElements } from \"../../elements.js\";\nimport { makeShadcnEditableOptionLabelButton } from \"./EditableOptionLabelButton.js\";\nimport { makeSearchableSingleRelatedModelRecordSelector } from \"./SearchableSingleRelatedModelRecordSelector.js\";\n\nexport const makeShadcnAutoHasOneForm = ({\n  Badge,\n  Button,\n  Command,\n  CommandItem,\n  CommandInput,\n  Label,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  Checkbox,\n}: Pick<\n  ShadcnElements,\n  \"Badge\" | \"Button\" | \"Command\" | \"CommandItem\" | \"CommandInput\" | \"Label\" | \"CommandList\" | \"CommandEmpty\" | \"CommandGroup\" | \"Checkbox\"\n>) => {\n  const SearchableSingleRelatedModelRecordSelector = makeSearchableSingleRelatedModelRecordSelector({\n    Command,\n    CommandItem,\n    CommandInput,\n    Label,\n    CommandList,\n    CommandEmpty,\n    CommandGroup,\n    Checkbox,\n  });\n  const EditableOptionLabelButton = makeShadcnEditableOptionLabelButton({ Badge, Button, Label });\n\n  function ShadcnHasOneForm(props: Omit<AutoRelationshipFormProps, \"recordFilter\">) {\n    const { field, label } = props;\n    const form = useHasOneForm(props);\n    const {\n      isEditing,\n      metadata,\n      setIsEditing,\n      pathPrefix,\n      metaDataPathPrefix,\n      hasRecord,\n      recordOption,\n      isCreatingRecord,\n      confirmEdit,\n      removeRecord,\n    } = form;\n\n    const clickConfirmEdit = useCallback(() => confirmEdit(), [confirmEdit]);\n    const clickRemoveRecord = useCallback(() => removeRecord(), [removeRecord]);\n\n    return (\n      <RelationshipContext.Provider\n        value={{ transformPath: (path) => pathPrefix + \".\" + path, transformMetadataPath: (path) => metaDataPathPrefix + \".\" + path }}\n      >\n        <div>\n          <div className=\"flex flex-row justify-between items-center mb-2\">\n            {label ?? <h2 className=\"text-lg font-medium\">{metadata.name}</h2>}\n          </div>\n          {hasRecord || isCreatingRecord ? (\n            <>\n              {!isEditing ? (\n                <>\n                  <ButtonWithLabel onClick={() => setIsEditing(true)}>\n                    <EditableOptionLabelButton option={recordOption} />\n                  </ButtonWithLabel>\n                </>\n              ) : (\n                <>\n                  <div className=\"border rounded-md p-3\">\n                    {props.children}\n                    <div className=\"flex justify-between pt-4\">\n                      <Button variant=\"destructive\" id={`deleteButton_${metaDataPathPrefix}`} onClick={clickRemoveRecord}>\n                        Remove\n                      </Button>\n                      <Button variant=\"default\" type=\"button\" id={`confirmButton_${metaDataPathPrefix}`} onClick={clickConfirmEdit}>\n                        Confirm\n                      </Button>\n                    </div>\n                  </div>\n                </>\n              )}\n            </>\n          ) : (\n            <>\n              <EmptyFormComponent form={form} field={field} />\n            </>\n          )}\n        </div>\n      </RelationshipContext.Provider>\n    );\n  }\n\n  function EmptyFormComponent(props: { field: string; form: ReturnType<typeof useHasOneForm> }) {\n    const { field, form } = props;\n\n    if (canSelectExistingRecord) {\n      return <SearchableSingleRelatedModelRecordSelector field={field} form={form} override={{ addNewRecord: form.startCreatingRecord }} />;\n    }\n    return <CreateNewChildButton form={form} />;\n  }\n\n  function CreateNewChildButton(props: { form: ReturnType<typeof useHasOneForm> }) {\n    const { startCreatingRecord, relatedModelName } = props.form;\n    return (\n      <>\n        <ButtonWithLabel onClick={startCreatingRecord}>\n          <PlusCircleIcon className=\"w-4 h-4\" />\n          <Label className=\"text-sm font-semibold cursor-pointer\">Add {relatedModelName}</Label>\n        </ButtonWithLabel>\n      </>\n    );\n  }\n\n  function ButtonWithLabel(props: { onClick: () => void; children: React.ReactNode }) {\n    return (\n      <>\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          className={`flex w-full h-fit justify-start gap-2 border rounded-md px-4 py-3 cursor-pointer`}\n          onClick={props.onClick}\n        >\n          {props.children}\n        </Button>\n      </>\n    );\n  }\n\n  return autoRelationshipForm(ShadcnHasOneForm);\n};\n\n/**\n * TODO - If this gets enabled fix this:\n *    - Workflow\n *      - existingSelectedRecord\n *      - removeSelection\n *      - reselectTheSameRecordInDropdown\n *      - removeSelection\n *      - send\n *    - Right now, this workflow sends null as the hasOne field value, which does nothing. It should be _unlink\n */\nconst canSelectExistingRecord = false;\n"]}
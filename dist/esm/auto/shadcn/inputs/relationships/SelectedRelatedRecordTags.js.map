{"version":3,"file":"SelectedRelatedRecordTags.js","sourceRoot":"","sources":["../../../../../../src/auto/shadcn/inputs/relationships/SelectedRelatedRecordTags.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACrC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AAIxE,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,EAAE,KAAK,EAAE,MAAM,EAA4C,EAAE,EAAE;IACpG,SAAS,kBAAkB,CAAC,KAI3B;QACC,MAAM,EAAE,eAAe,EAAE,WAAW,EAAE,cAAc,EAAE,GAAG,KAAK,CAAC;QAE/D,MAAM,OAAO,GAAG,mBAAmB,CAAC,eAAe,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;QAE/E,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YACpB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,CACL,0CACG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAC7B,OAAO,CACL,oBAAC,KAAK,IAAC,GAAG,EAAE,UAAU,MAAM,CAAC,EAAE,IAAI,KAAK,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE,mBAAmB,MAAM,CAAC,OAAO,EAAE;gBACpG,MAAM,CAAC,OAAO;gBACf,oBAAC,MAAM,IACL,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;wBACb,CAAC,CAAC,cAAc,EAAE,CAAC;wBACnB,MAAM,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC;wBACzE,cAAc,CAAC,MAAM,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;oBAC9C,CAAC,EACD,OAAO,EAAC,OAAO,gBACH,UAAU,MAAM,CAAC,OAAO,EAAE,EACtC,IAAI,EAAC,MAAM;oBAEX,oBAAC,KAAK,OAAG,CACF,CACH,CACT,CAAC;QACJ,CAAC,CAAC,CACD,CACJ,CAAC;IACJ,CAAC;IAED,SAAS,qBAAqB,CAAC,KAI9B;QACC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;YAClC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,oBAAC,kBAAkB,OAAK,KAAK,GAAI,CAAC;IAC3C,CAAC;IAED,OAAO,EAAE,kBAAkB,EAAE,qBAAqB,EAAE,CAAC;AACvD,CAAC,CAAC","sourcesContent":["import { XIcon } from \"lucide-react\";\nimport React from \"react\";\nimport { getRecordsAsOptions } from \"../../../hooks/useRelatedModel.js\";\nimport type { OptionLabel } from \"../../../interfaces/AutoRelationshipInputProps.js\";\nimport type { ShadcnElements } from \"../../elements.js\";\n\nexport const makeSelectedRecordTags = ({ Badge, Button }: Pick<ShadcnElements, \"Badge\" | \"Button\">) => {\n  function SelectedRecordTags(props: {\n    selectedRecords: Record<string, any>[];\n    optionLabel: OptionLabel;\n    onRemoveRecord: (record: Record<string, any>) => void;\n  }) {\n    const { selectedRecords, optionLabel, onRemoveRecord } = props;\n\n    const options = getRecordsAsOptions(selectedRecords, { primary: optionLabel });\n\n    if (!options.length) {\n      return null;\n    }\n\n    return (\n      <>\n        {options.map((option, index) => {\n          return (\n            <Badge key={`option-${option.id || index}`} variant={\"outline\"} id={`selected-option-${option.primary}`}>\n              {option.primary}\n              <Button\n                onClick={(e) => {\n                  e.preventDefault();\n                  const record = selectedRecords.find((record) => record.id === option.id);\n                  onRemoveRecord(record ?? { id: option.id });\n                }}\n                variant=\"ghost\"\n                aria-label={`Remove ${option.primary}`}\n                size=\"icon\"\n              >\n                <XIcon />\n              </Button>\n            </Badge>\n          );\n        })}\n      </>\n    );\n  }\n\n  function getSelectedRecordTags(props: {\n    selectedRecords: Record<string, any>[];\n    optionLabel: OptionLabel;\n    onRemoveRecord: (record: Record<string, any>) => void;\n  }) {\n    if (!props.selectedRecords.length) {\n      return null;\n    }\n    return <SelectedRecordTags {...props} />;\n  }\n\n  return { SelectedRecordTags, getSelectedRecordTags };\n};\n"]}
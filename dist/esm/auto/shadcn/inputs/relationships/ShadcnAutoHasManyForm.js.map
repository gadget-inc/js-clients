{"version":3,"file":"ShadcnAutoHasManyForm.js","sourceRoot":"","sources":["../../../../../../src/auto/shadcn/inputs/relationships/ShadcnAutoHasManyForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import { PlusCircleIcon } from \"lucide-react\";\nimport React, { useState } from \"react\";\nimport { useFormContext } from \"../../../../useActionForm.js\";\nimport { autoRelationshipForm } from \"../../../AutoInput.js\";\nimport { RelationshipContext, useAutoRelationship, useRelationshipContext } from \"../../../hooks/useAutoRelationship.js\";\nimport { useHasManyController } from \"../../../hooks/useHasManyController.js\";\nimport { getRecordAsOption, useRecordLabelObjectFromProps } from \"../../../hooks/useRelatedModel.js\";\nimport { useRequiredChildComponentsValidator } from \"../../../hooks/useRequiredChildComponentsValidator.js\";\nimport { type AutoRelationshipFormProps } from \"../../../interfaces/AutoRelationshipInputProps.js\";\nimport type { ShadcnElements } from \"../../elements.js\";\nimport { makeShadcnEditableOptionLabelButton } from \"./EditableOptionLabelButton.js\";\n\nexport const makeShadcnAutoHasManyForm = ({\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  Badge,\n  Button,\n  Label,\n}: Pick<ShadcnElements, \"Accordion\" | \"AccordionContent\" | \"AccordionItem\" | \"Badge\" | \"Button\" | \"Label\">) => {\n  const EditableOptionLabelButton = makeShadcnEditableOptionLabelButton({ Badge, Button, Label });\n\n  function ShadcnAutoHasManyForm(props: Omit<AutoRelationshipFormProps, \"recordFilter\">) {\n    useRequiredChildComponentsValidator(props, \"AutoHasManyForm\");\n    const { metadata } = useAutoRelationship({ field: props.field });\n    const { getValues } = useFormContext();\n\n    const { fieldArray, fieldArrayPath } = useHasManyController({ field: props.field });\n    const { fields, append, remove } = fieldArray;\n    const relationshipContext = useRelationshipContext();\n\n    if (metadata.configuration.__typename !== \"GadgetHasManyConfig\") {\n      throw new Error(\"ShadcnAutoHasManyForm can only be used for HasMany fields\");\n    }\n\n    const modelName = metadata.configuration.relatedModel?.name;\n\n    const recordLabel = useRecordLabelObjectFromProps(props);\n\n    const [editingIndex, setEditingIndex] = useState<number | null>(null);\n\n    return (\n      <div>\n        <div style={{ marginBottom: \"8px\" }}>{props.label ?? <h2 className=\"text-lg font-medium\">{metadata.name}</h2>}</div>\n        <div>\n          <Accordion\n            type=\"single\"\n            collapsible\n            value={editingIndex !== null ? `${fieldArrayPath}.${editingIndex}` : undefined}\n            className=\"w-full\"\n          >\n            {fields.flatMap((field, idx) => {\n              // since we don't put full data in the field array when we append, we need to\n              // get the value directly from the form state\n              const record = getValues(`${fieldArrayPath}.${idx}`);\n\n              if (!record) {\n                return [];\n              }\n\n              const option = getRecordAsOption(record, recordLabel);\n\n              const pathPrefix = relationshipContext?.transformPath ? relationshipContext.transformPath(props.field) : props.field;\n              const metadataPathPrefix = relationshipContext?.transformMetadataPath\n                ? relationshipContext.transformMetadataPath(props.field)\n                : props.field;\n\n              const isEditing = editingIndex === idx;\n              const position = idx === 0 ? \"top\" : \"middle\";\n\n              if (isEditing) {\n                return (\n                  <AccordionItem key={field._fieldArrayKey} value={`${fieldArrayPath}.${idx}`} id={`${pathPrefix}.${idx}`}>\n                    <AccordionContent className={`p-3 ${positionalBorder[position]}`}>\n                      <RelationshipContext.Provider\n                        value={{\n                          transformPath: (path) => `${pathPrefix}.${idx}.${path}`,\n                          transformMetadataPath: (path) => `${metadataPathPrefix}.${path}`,\n                          fieldArray,\n                        }}\n                      >\n                        {props.children}\n                      </RelationshipContext.Provider>\n                      <div className=\"flex justify-between pt-4\">\n                        <Button variant=\"destructive\" id={`deleteButton_${metadataPathPrefix}.${idx}`} onClick={() => remove(idx)}>\n                          Delete\n                        </Button>\n                        <Button\n                          variant=\"default\"\n                          type=\"button\"\n                          id={`confirmButton_${metadataPathPrefix}.${idx}`}\n                          onClick={() => setEditingIndex(null)}\n                        >\n                          Confirm\n                        </Button>\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n                );\n              }\n\n              return (\n                <AccordionItem key={field._fieldArrayKey} value={`${fieldArrayPath}.${idx}`} id={`${pathPrefix}.${idx}`}>\n                  <AccordionSection position={position} onClick={() => setEditingIndex(idx)}>\n                    <EditableOptionLabelButton option={option} />\n                  </AccordionSection>\n                </AccordionItem>\n              );\n            })}\n            <AccordionSection\n              position={fields.length === 0 ? \"only\" : \"bottom\"}\n              onClick={() => {\n                append({});\n                setEditingIndex(fields.length);\n              }}\n            >\n              <PlusCircleIcon className=\"w-4 h-4\" />\n              <Label className=\"text-sm font-semibold cursor-pointer\">Add {modelName}</Label>\n            </AccordionSection>\n          </Accordion>\n        </div>\n      </div>\n    );\n  }\n\n  function AccordionSection(props: { position?: \"top\" | \"bottom\" | \"middle\" | \"only\"; children: React.ReactNode; onClick?: () => void }) {\n    const { position, children, onClick } = props;\n\n    return (\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        className={`flex w-full h-fit justify-start gap-2 px-4 py-3 cursor-pointer ${position ? `${positionalBorder[position]}` : \"\"}`}\n        onClick={(e) => {\n          onClick?.();\n        }}\n      >\n        {children}\n      </Button>\n    );\n  }\n\n  return autoRelationshipForm(ShadcnAutoHasManyForm);\n};\n\nconst positionalBorder = {\n  top: \"rounded-t-md rounded-b-none border-0 border-x-[1px] border-t-[1px]\",\n  middle: \"rounded-none border-0 border-x-[1px]\",\n  bottom: \"rounded-b-md rounded-t-none border-0 border-x-[1px] border-b-[1px]\",\n  only: \"rounded-md border-0 border-x-[1px] border-y-[1px]\",\n};\n"]}
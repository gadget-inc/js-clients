{"version":3,"file":"ShadcnAutoEncryptedStringInput.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/inputs/ShadcnAutoEncryptedStringInput.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AACnD,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAuC,MAAM,OAAO,CAAC;AAC7E,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAG/C,OAAO,EAAE,yBAAyB,EAAE,MAAM,4BAA4B,CAAC;AAEvE,MAAM,CAAC,MAAM,kCAAkC,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAsD,EAAE,EAAE;IACjI,MAAM,eAAe,GAAG,yBAAyB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IAEpE,SAAS,8BAA8B,CACrC,KAAoH;QAEpH,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC9C,MAAM,EAAE,MAAM,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;QAEvC,MAAM,oBAAoB,GAAG,CAC3B,oBAAC,MAAM,IACL,OAAO,EAAC,OAAO,EACf,IAAI,EAAC,MAAM,EACX,IAAI,EAAC,QAAQ,EACb,OAAO,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,EACnC,SAAS,EAAC,SAAS,EACnB,IAAI,EAAE,GAAG,KAAK,CAAC,KAAK,sBAAsB,IAEzC,OAAO,CAAC,CAAC,CAAC,oBAAC,UAAU,IAAC,SAAS,EAAC,SAAS,GAAG,CAAC,CAAC,CAAC,oBAAC,OAAO,IAAC,SAAS,EAAC,SAAS,GAAG,CACxE,CACV,CAAC;QAEF,OAAO,oBAAC,eAAe,OAAK,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,IAAI,oBAAoB,GAAI,CAAC;IACzH,CAAC;IAED,OAAO,SAAS,CAAC,8BAA8B,CAAC,CAAC;AACnD,CAAC,CAAC","sourcesContent":["import { EyeIcon, EyeOffIcon } from \"lucide-react\";\nimport React, { useState, type ComponentProps, type ReactNode } from \"react\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { type AutoEncryptedStringInputProps } from \"../../shared/AutoInputTypes.js\";\nimport type { ShadcnElements } from \"../elements.js\";\nimport { makeShadcnAutoStringInput } from \"./ShadcnAutoStringInput.js\";\n\nexport const makeShadcnAutoEncryptedStringInput = ({ Input, Label, Button }: Pick<ShadcnElements, \"Input\" | \"Label\" | \"Button\">) => {\n  const AutoStringInput = makeShadcnAutoStringInput({ Input, Label });\n\n  function ShadcnAutoEncryptedStringInput(\n    props: AutoEncryptedStringInputProps & { suffix?: ReactNode } & Omit<ComponentProps<typeof AutoStringInput>, \"type\">\n  ) {\n    const [isShown, setIsShown] = useState(false);\n    const { suffix, ...restProps } = props;\n\n    const showHideToggleButton = (\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        type=\"button\"\n        onClick={() => setIsShown(!isShown)}\n        className=\"h-8 w-8\"\n        role={`${props.field}ToggleShowHideButton`}\n      >\n        {isShown ? <EyeOffIcon className=\"h-4 w-4\" /> : <EyeIcon className=\"h-4 w-4\" />}\n      </Button>\n    );\n\n    return <AutoStringInput {...restProps} type={isShown ? \"text\" : \"password\"} suffix={suffix ?? showHideToggleButton} />;\n  }\n\n  return autoInput(ShadcnAutoEncryptedStringInput);\n};\n"]}
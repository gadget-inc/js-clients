{"version":3,"file":"ShadcnAutoButton.js","sourceRoot":"","sources":["../../../../src/auto/shadcn/ShadcnAutoButton.tsx"],"names":[],"mappings":"AACA,OAAO,KAA8B,MAAM,OAAO,CAAC;AAGnD,OAAO,EAAE,uBAAuB,EAAE,MAAM,qCAAqC,CAAC;AAG9E;;GAEG;AACH,MAAM,CAAC,MAAM,cAAc,GACzB,CAAkC,EAAE,MAAM,EAAE,KAAK,EAAY,EAAE,EAAE,CACjE,CAKE,KAAyF,EACzF,EAAE;IACF,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,uBAAuB,CAAC;QACnF,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE;YACrB,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,aAAa,CAAC,CAAC;QACvC,CAAC;QACD,OAAO,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YAC1B,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,uBAAuB,EAAE,EAAE,WAAW,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC/E,CAAC;QACD,GAAG,KAAK;KACT,CAAC,CAAC;IAEH,OAAO,CACL,oBAAC,MAAM,IAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,EAAE,GAAG,KAAM,WAAW,IAC1G,KAAK,EAAE,QAAQ,IAAI,KAAK,CAClB,CACV,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { ActionFunction, GlobalActionFunction } from \"@gadgetinc/api-client-core\";\nimport React, { type ComponentProps } from \"react\";\nimport type { OptionsType } from \"../../utils.js\";\nimport type { AutoButtonProps } from \"../hooks/useAutoButtonController.js\";\nimport { useAutoButtonController } from \"../hooks/useAutoButtonController.js\";\nimport { type ShadcnElements } from \"./elements.js\";\n\n/**\n * Render a button that invokes an action when clicked, and shows a toast notification when the action succeeds or encounters an error by default.\n */\nexport const makeAutoButton =\n  <Elements extends ShadcnElements>({ Button, toast }: Elements) =>\n  <\n    GivenOptions extends OptionsType,\n    SchemaT,\n    ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>\n  >(\n    props: AutoButtonProps<GivenOptions, SchemaT, ActionFunc> & ComponentProps<typeof Button>\n  ) => {\n    const { fetching, isDestructive, run, label, buttonProps } = useAutoButtonController({\n      onSuccess: (_result) => {\n        toast.success(`${label} succeeded.`);\n      },\n      onError: (error, _result) => {\n        toast.error(`${label} encountered an error`, { description: error.message });\n      },\n      ...props,\n    });\n\n    return (\n      <Button disabled={fetching} variant={isDestructive ? \"destructive\" : \"default\"} onClick={run} {...buttonProps}>\n        {props?.children ?? label}\n      </Button>\n    );\n  };\n"]}
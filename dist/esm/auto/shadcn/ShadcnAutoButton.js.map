{"version":3,"file":"ShadcnAutoButton.js","sourceRoot":"","sources":["../../../../src/auto/shadcn/ShadcnAutoButton.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,OAAO,EAAE,uBAAuB,EAAE,MAAM,qCAAqC,CAAC;AAiB9E;;GAEG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,EAAE,MAAM,EAAE,KAAK,EAA4C,EAAuB,EAAE;IACjH,MAAM,UAAU,GAAwB,CAAC,KAAK,EAAE,EAAE;QAChD,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,uBAAuB,CAAC;YACnF,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE;gBACrB,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,aAAa,CAAC,CAAC;YACvC,CAAC;YACD,OAAO,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;gBAC1B,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,uBAAuB,EAAE,EAAE,WAAW,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC/E,CAAC;YACD,GAAG,KAAK;SACT,CAAC,CAAC;QAEH,MAAM,EAAE,OAAO,GAAG,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;QAE/E,OAAO,CACL,oBAAC,MAAM,IAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,KAAM,WAAW,KAAM,IAAI,IAClF,KAAK,EAAE,QAAQ,IAAI,KAAK,CAClB,CACV,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,UAAU,CAAC;IAClB,WAAW;IACX,sCAAsC;IACtC,aAAa;IACb,wGAAwG;IACxG,KAAK;IACL,oEAAoE;IACpE,sBAAsB;IACtB,2FAA2F;IAC3F,gCAAgC;IAChC,8CAA8C;IAC9C,SAAS;IACT,qCAAqC;IACrC,sFAAsF;IACtF,SAAS;IACT,gBAAgB;IAChB,QAAQ;IAER,oFAAoF;IAEpF,aAAa;IACb,8FAA8F;IAC9F,mCAAmC;IACnC,gBAAgB;IAChB,OAAO;IACP,KAAK;AACP,CAAC,CAAC","sourcesContent":["import type { ActionFunction, GlobalActionFunction } from \"@gadgetinc/api-client-core\";\nimport React from \"react\";\nimport type { OptionsType } from \"../../utils.js\";\nimport type { AutoButtonProps } from \"../hooks/useAutoButtonController.js\";\nimport { useAutoButtonController } from \"../hooks/useAutoButtonController.js\";\nimport { type ButtonProps, type ShadcnElements } from \"./elements.js\";\n\nexport type ShadcnAutoButtonProps<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>\n> = AutoButtonProps<GivenOptions, SchemaT, ActionFunc> & ButtonProps;\n\nexport type AutoButtonComponent = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>\n>(\n  props: ShadcnAutoButtonProps<GivenOptions, SchemaT, ActionFunc>\n) => JSX.Element;\n\n/**\n * Render a button that invokes an action when clicked, and shows a toast notification when the action succeeds or encounters an error by default.\n */\nexport const makeAutoButton = ({ Button, toast }: Pick<ShadcnElements, \"Button\" | \"toast\">): AutoButtonComponent => {\n  const AutoButton: AutoButtonComponent = (props) => {\n    const { fetching, isDestructive, run, label, buttonProps } = useAutoButtonController({\n      onSuccess: (_result) => {\n        toast.success(`${label} succeeded.`);\n      },\n      onError: (error, _result) => {\n        toast.error(`${label} encountered an error`, { description: error.message });\n      },\n      ...props,\n    });\n\n    const { variant = isDestructive ? \"destructive\" : \"default\", ...rest } = props;\n\n    return (\n      <Button disabled={fetching} variant={variant} onClick={run} {...buttonProps} {...rest}>\n        {props?.children ?? label}\n      </Button>\n    );\n  };\n\n  return AutoButton;\n  // return <\n  //   GivenOptions extends OptionsType,\n  //   SchemaT,\n  //   ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>\n  // >(\n  //   props: ShadcnAutoButtonProps<GivenOptions, SchemaT, ActionFunc>\n  // ): JSX.Element => {\n  //   const { fetching, isDestructive, run, label, buttonProps } = useAutoButtonController({\n  //     onSuccess: (_result) => {\n  //       toast.success(`${label} succeeded.`);\n  //     },\n  //     onError: (error, _result) => {\n  //       toast.error(`${label} encountered an error`, { description: error.message });\n  //     },\n  //     ...props,\n  //   });\n\n  //   const { variant = isDestructive ? \"destructive\" : \"default\", ...rest } = props;\n\n  //   return (\n  //     <Button disabled={fetching} variant={variant} onClick={run} {...buttonProps} {...rest}>\n  //       {props?.children ?? label}\n  //     </Button>\n  //   );\n  // };\n};\n"]}
{"version":3,"file":"ShadcnAutoTableEncryptedStringCell.js","sourceRoot":"","sources":["../../../../../../src/auto/shadcn/table/cells/ShadcnAutoTableEncryptedStringCell.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAC3C,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACxC,OAAO,EAAE,4BAA4B,EAAE,MAAM,6BAA6B,CAAC;AAG3E,MAAM,CAAC,MAAM,sCAAsC,GAAG,CAAC,QAAkD,EAAE,EAAE;IAC3G,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,QAAQ,CAAC;IAEnC,SAAS,kCAAkC,CAAC,KAAqB;QAC/D,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;QACxB,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE9C,gHAAgH;QAChH,+IAA+I;QAC/I,qIAAqI;QAErI,OAAO,CACL;YACE,6BAAK,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE;gBAClE,6BAAK,KAAK,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU,EAAE;oBAChF,oBAAC,KAAK,QAAE,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,4BAA4B,CAAS,CAC3D;gBACN,6BAAK,KAAK,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE;oBAC3B,oBAAC,MAAM,IAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IACxD,OAAO,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CACzC,CACL,CACF,CACL,CACJ,CAAC;IACJ,CAAC;IAED,OAAO,kCAAkC,CAAC;AAC5C,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,oBAAC,GAAG,OAAG,CAAC;AAClC,MAAM,iBAAiB,GAAG,oBAAC,MAAM,OAAG,CAAC;AAErC,MAAM,+BAA+B,GAAG;IACtC,eAAe,EAAE,yCAAyC;IAC1D,gBAAgB,EAAE,0CAA0C;IAC5D,UAAU,EAAE,mCAAmC;IAC/C,UAAU,EAAE,mCAAmC;CAChD,CAAC","sourcesContent":["import { Eye, EyeOff } from \"lucide-react\";\nimport React, { useState } from \"react\";\nimport { defaultPlaceholderHiddenText } from \"../../../shared/defaults.js\";\nimport type { ShadcnElements } from \"../../elements.js\";\n\nexport const makeShadcnAutoTableEncryptedStringCell = (elements: Pick<ShadcnElements, \"Button\" | \"Label\">) => {\n  const { Button, Label } = elements;\n\n  function ShadcnAutoTableEncryptedStringCell(props: { value: any }) {\n    const { value } = props;\n    const [isShown, setIsShown] = useState(false);\n\n    // TODO - add context identifiers so that the passed in base component can differentiate how they are being used\n    // const labelContextIdentifier = isShown ? EncryptedStringCellComponentIds.shownValueLabel : EncryptedStringCellComponentIds.hiddenValueLabel;\n    // const buttonContextIdentifier = isShown ? EncryptedStringCellComponentIds.hideButton : EncryptedStringCellComponentIds.showButton;\n\n    return (\n      <>\n        <div style={{ display: \"flex\", width: \"100%\", alignItems: \"center\" }}>\n          <div style={{ minWidth: 0, flex: 1, overflow: \"hidden\", textOverflow: \"ellipsis\" }}>\n            <Label>{isShown ? value : defaultPlaceholderHiddenText}</Label>\n          </div>\n          <div style={{ flexShrink: 0 }}>\n            <Button variant=\"ghost\" onClick={() => setIsShown(!isShown)}>\n              {isShown ? hideButtonContent : showButtonContent}\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return ShadcnAutoTableEncryptedStringCell;\n};\n\nconst showButtonContent = <Eye />;\nconst hideButtonContent = <EyeOff />;\n\nconst EncryptedStringCellComponentIds = {\n  shownValueLabel: \"encrypted-string-cell-shown-value-label\",\n  hiddenValueLabel: \"encrypted-string-cell-hidden-value-label\",\n  showButton: \"encrypted-string-cell-show-button\",\n  hideButton: \"encrypted-string-cell-hide-button\",\n};\n"]}
{"version":3,"file":"ShadcnAutoTableCellRenderer.js","sourceRoot":"","sources":["../../../../../../src/auto/shadcn/table/cells/ShadcnAutoTableCellRenderer.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport type { TableColumn } from \"src/use-table/types.js\";\nimport { FieldType } from \"../../../../metadata.js\";\nimport type { ColumnValueType } from \"../../../../utils.js\";\nimport type { ShadcnElements } from \"../../elements.js\";\nimport { makeShadcnAutoTableBooleanCell } from \"./ShadcnAutoTableBooleanCell.js\";\nimport { makeShadcnAutoTableDateTimeCell } from \"./ShadcnAutoTableDateTimeCell.js\";\nimport { makeShadcnAutoTableEncryptedStringCell } from \"./ShadcnAutoTableEncryptedStringCell.js\";\nimport { makeShadcnAutoTableFileCell } from \"./ShadcnAutoTableFileCell.js\";\nimport { makeShadcnAutoTableTagCell } from \"./ShadcnAutoTableTagCell.js\";\nimport { makeShadcnAutoTableTextCell } from \"./ShadcnAutoTableTextCell.js\";\n\nexport const makeShadcnAutoTableCellRenderer = (elements: ShadcnElements) => {\n  const ShadcnAutoTableBooleanCell = makeShadcnAutoTableBooleanCell(elements);\n  const ShadcnAutoTableDateTimeCell = makeShadcnAutoTableDateTimeCell(elements);\n  const ShadcnAutoTableEncryptedStringCell = makeShadcnAutoTableEncryptedStringCell(elements);\n  const ShadcnAutoTableFileCell = makeShadcnAutoTableFileCell(elements);\n  const ShadcnAutoTableTagCell = makeShadcnAutoTableTagCell(elements);\n  const ShadcnAutoTableTextCell = makeShadcnAutoTableTextCell(elements);\n\n  function ShadcnAutoTableCellRenderer(props: { column: TableColumn; value: ColumnValueType }) {\n    const { column, value } = props;\n\n    if (value === null || value === undefined) {\n      // Don't render anything for null values\n      return null;\n    }\n\n    if (column.relationshipType === FieldType.HasMany || column.relationshipType === FieldType.HasManyThrough) {\n      return <ShadcnAutoTableTagCell value={value} />;\n    }\n\n    switch (column.type) {\n      case FieldType.Id:\n      case FieldType.String:\n      case FieldType.Number:\n      case FieldType.Email:\n      case FieldType.Computed:\n      case FieldType.Url:\n      case FieldType.RichText:\n      case FieldType.Json: {\n        return <ShadcnAutoTableTextCell value={value} />;\n      }\n\n      case FieldType.EncryptedString: {\n        return <ShadcnAutoTableEncryptedStringCell value={value} />;\n      }\n\n      case FieldType.RoleAssignments:\n      case FieldType.Enum: {\n        return <ShadcnAutoTableTagCell value={value} />;\n      }\n\n      case FieldType.DateTime: {\n        return <ShadcnAutoTableDateTimeCell value={value} includeTime={column.includeTime ?? true} />;\n      }\n\n      case FieldType.Boolean: {\n        return <ShadcnAutoTableBooleanCell value={value} />;\n      }\n\n      case FieldType.File: {\n        return <ShadcnAutoTableFileCell value={value as any} />;\n      }\n\n      default:\n        return null;\n    }\n  }\n\n  return ShadcnAutoTableCellRenderer;\n};\n"]}
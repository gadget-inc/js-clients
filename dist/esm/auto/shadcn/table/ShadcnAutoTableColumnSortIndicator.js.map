{"version":3,"file":"ShadcnAutoTableColumnSortIndicator.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/table/ShadcnAutoTableColumnSortIndicator.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;AAClE,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAI3C,MAAM,CAAC,MAAM,sCAAsC,GAAG,CAAC,QAAwB,EAAE,EAAE;IACjF,oGAAoG;IACpG,MAAM,iBAAiB,GAAG,cAAc,CAAC;IACzC,MAAM,kBAAkB,GAAG,OAAO,CAAC;IACnC,MAAM,mBAAmB,GAAG,SAAS,CAAC;IAEtC,SAAS,kCAAkC,CAAC,KAAwE;QAClH,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;QAC/C,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE;YAClC,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAE9B,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,KAAK,MAAM,CAAC,KAAK,CAAC;QACnD,MAAM,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;QAEtC,OAAO,CACL,6BAAK,OAAO,EAAE,UAAU,EAAE,SAAS,EAAC,KAAK;YACtC,CAAC,QAAQ,IAAI,oBAAC,iBAAiB,IAAC,SAAS,EAAE,GAAG,aAAa,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,EAAE,GAAI;YAClG,QAAQ,IAAI,SAAS,KAAK,WAAW,IAAI,oBAAC,kBAAkB,IAAC,SAAS,EAAE,GAAG,aAAa,EAAE,GAAI;YAC9F,QAAQ,IAAI,SAAS,KAAK,YAAY,IAAI,oBAAC,mBAAmB,IAAC,SAAS,EAAE,GAAG,aAAa,EAAE,GAAI,CAC7F,CACP,CAAC;IACJ,CAAC;IAED,OAAO,kCAAkC,CAAC;AAC5C,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,SAAS,CAAC","sourcesContent":["import { ArrowDown, ArrowUp, ChevronsUpDown } from \"lucide-react\";\nimport React, { useCallback } from \"react\";\nimport type { SortState, TableColumn } from \"../../../use-table/types.js\";\nimport { type ShadcnElements } from \"../elements.js\";\n\nexport const makeShadcnAutoTableColumnSortIndicator = (elements: ShadcnElements) => {\n  // TODO - Update these icons to be based on the passed in elements when starting the icon revolution\n  const UnsortedIndicator = ChevronsUpDown;\n  const AscendingIndicator = ArrowUp;\n  const DescendingIndicator = ArrowDown;\n\n  function ShadcnAutoTableColumnSortIndicator(props: { column: TableColumn; sortState: SortState; isHovered: boolean }) {\n    const { column, sortState, isHovered } = props;\n    const handleSort = useCallback(() => {\n      sortState.handleColumnSort(column.field);\n    }, [sortState, column.field]);\n\n    if (!column.sortable) {\n      return null;\n    }\n\n    const isSorted = sortState.column === column.field;\n    const direction = sortState.direction;\n\n    return (\n      <div onClick={handleSort} className=\"z-0\">\n        {!isSorted && <UnsortedIndicator className={`${iconSizeClass} ${isHovered ? \"\" : \"opacity-50\"}`} />}\n        {isSorted && direction === \"Ascending\" && <AscendingIndicator className={`${iconSizeClass}`} />}\n        {isSorted && direction === \"Descending\" && <DescendingIndicator className={`${iconSizeClass}`} />}\n      </div>\n    );\n  }\n\n  return ShadcnAutoTableColumnSortIndicator;\n};\n\nconst iconSizeClass = \"h-4 w-4\";\n"]}
{"version":3,"file":"ShadcnAutoTableBulkActionSelector.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/table/ShadcnAutoTableBulkActionSelector.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ChevronsUpDown } from \"lucide-react\";\nimport React, { useMemo } from \"react\";\nimport { type TableRow } from \"../../../use-table/types.js\";\nimport { type RecordSelection } from \"../../../useSelectedRecordsController.js\";\nimport { getBulkActionOptionCallback, type BulkActionOption } from \"../../hooks/useTableBulkActions.js\";\nimport { type ShadcnElements } from \"../elements.js\";\n\nexport const makeShadcnAutoTableBulkActionSelector = (elements: ShadcnElements) => {\n  const { Button, Command, CommandGroup, CommandItem, CommandList, Popover, PopoverContent, PopoverTrigger } = elements;\n\n  function NonPromotedActionsActionSelector(props: {\n    nonPromotedActions: BulkActionOption[];\n    selection: RecordSelection;\n    rows: TableRow[];\n  }) {\n    const { nonPromotedActions, selection, rows } = props;\n    const selectedRows = rows.filter((row) => selection.recordIds.includes(row.id as string));\n\n    const [open, setOpen] = React.useState(false);\n\n    if (nonPromotedActions.length === 0) {\n      return null;\n    }\n    return (\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"w-[200px] justify-between\"\n            aria-label=\"More actions\"\n            onClick={() => setOpen(!open)}\n          >\n            {\"Actions...\"}\n            <ChevronsUpDown className=\"opacity-50\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[200px] p-0\">\n          <Command>\n            <CommandList>\n              <CommandGroup>\n                {nonPromotedActions.map((action, i) => (\n                  <CommandItem\n                    key={i}\n                    className={\"bg-background\"}\n                    onSelect={() => {\n                      getBulkActionOptionCallback(action, selectedRows, selection.clearAll)();\n                    }}\n                  >\n                    {action.humanizedName}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    );\n  }\n\n  function PromotedActionsActionSelector(props: { promotedActions: BulkActionOption[]; selection: RecordSelection; rows: TableRow[] }) {\n    const { promotedActions, selection, rows } = props;\n\n    const selectedRows = rows.filter((row) => selection.recordIds.includes(row.id as string));\n\n    return (\n      <>\n        {promotedActions.map((action) => (\n          <Button\n            variant=\"outline\"\n            key={action.humanizedName}\n            onClick={() => {\n              getBulkActionOptionCallback(action, selectedRows, selection.clearAll)();\n            }}\n          >\n            {action.humanizedName}\n          </Button>\n        ))}\n      </>\n    );\n  }\n  function ShadcnAutoTableBulkActionSelector(props: {\n    bulkActionOptions: BulkActionOption[];\n    selection: RecordSelection;\n    rows: TableRow[];\n  }) {\n    const { bulkActionOptions, selection, rows } = props;\n\n    const { promotedActions, nonPromotedActions } = useMemo(() => {\n      const promotedActions = [];\n      const nonPromotedActions = [];\n\n      for (const bulkActionOption of bulkActionOptions) {\n        if (bulkActionOption.promoted) {\n          promotedActions.push(bulkActionOption);\n        } else {\n          nonPromotedActions.push(bulkActionOption);\n        }\n      }\n\n      return { promotedActions, nonPromotedActions };\n    }, [bulkActionOptions]);\n\n    return (\n      <>\n        <PromotedActionsActionSelector promotedActions={promotedActions} selection={selection} rows={rows} />\n        <NonPromotedActionsActionSelector nonPromotedActions={nonPromotedActions} selection={selection} rows={rows} />\n      </>\n    );\n  }\n\n  return ShadcnAutoTableBulkActionSelector;\n};\n"]}
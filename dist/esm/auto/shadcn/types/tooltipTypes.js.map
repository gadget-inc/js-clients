{"version":3,"file":"tooltipTypes.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/types/tooltipTypes.tsx"],"names":[],"mappings":"","sourcesContent":["import type React from \"react\";\n\nexport type TooltipProps = {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened. This will\n   * override the prop with the same name passed to Provider.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  /**\n   * When `true`, trying to hover the content will result in the tooltip closing as the pointer leaves the trigger.\n   * @defaultValue false\n   */\n  disableHoverableContent?: boolean;\n};\n\nexport type TooltipTriggerProps = React.HTMLAttributes<HTMLButtonElement> & React.RefAttributes<HTMLButtonElement>;\n\nexport type TooltipContentProps = React.HTMLAttributes<HTMLDivElement> &\n  React.RefAttributes<HTMLDivElement> & {\n    /**\n     * Used to force mounting when more control is needed. Useful when\n     * controlling animation with React animation libraries.\n     */\n    forceMount?: true;\n    /**\n     * A more descriptive label for accessibility purpose\n     */\n    \"aria-label\"?: string;\n    /**\n     * Event handler called when the escape key is down.\n     * Can be prevented.\n     */\n    onEscapeKeyDown?: (event: KeyboardEvent) => void;\n    /**\n     * Event handler called when the a `pointerdown` event happens outside of the `Tooltip`.\n     * Can be prevented.\n     */\n    onPointerDownOutside?: (event: PointerDownOutsideEvent) => void;\n  };\n\nexport type TooltipProviderProps = {\n  children: React.ReactNode;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n  /**\n   * When `true`, trying to hover the content will result in the tooltip closing as the pointer leaves the trigger.\n   * @defaultValue false\n   */\n  disableHoverableContent?: boolean;\n};\n\ntype PointerDownOutsideEvent = CustomEvent<{ originalEvent: PointerEvent }>;\n\n/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent) */\ninterface CustomEvent<T = any> extends Event {\n  /**\n   * Returns any custom data event was created with. Typically used for synthetic events.\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent/detail)\n   */\n  readonly detail: T;\n  /**\n   * @deprecated\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent/initCustomEvent)\n   */\n  initCustomEvent(type: string, bubbles?: boolean, cancelable?: boolean, detail?: T): void;\n}\n"]}
{"version":3,"file":"useStructuralMemo.js","sourceRoot":"","sources":["../../src/useStructuralMemo.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAC/B,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAE3C;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAI,KAAQ,EAAK,EAAE;IAClD,MAAM,GAAG,GAAG,MAAM,CAAI,KAAK,CAAC,CAAC;IAE7B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;QACnC,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,OAAO,GAAG,CAAC,OAAO,CAAC;AACrB,CAAC,CAAC","sourcesContent":["import { useRef } from \"react\";\nimport deepEqual from \"react-fast-compare\";\n\n/**\n * Memoize and ensure a stable identity on a given value as long as it remains the same, structurally.\n */\nexport const useStructuralMemo = <T>(value: T): T => {\n  const ref = useRef<T>(value);\n\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n};\n"]}
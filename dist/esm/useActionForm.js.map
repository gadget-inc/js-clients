{"version":3,"file":"useActionForm.js","sourceRoot":"","sources":["../../src/useActionForm.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ActionFunction, AnyModelManager, DefaultSelection, GadgetRecord, Select } from \"@gadgetinc/api-client-core\";\nimport { camelize } from \"@gadgetinc/api-client-core\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport type { FieldErrors, UseFormProps, UseFormReturn } from \"react-hook-form\";\nimport { useForm } from \"react-hook-form\";\nimport { useApi } from \"./GadgetProvider.js\";\nimport { useAction } from \"./useAction.js\";\nimport { useFindBy } from \"./useFindBy.js\";\nimport { useFindOne } from \"./useFindOne.js\";\nimport type { ErrorWrapper, OptionsType } from \"./utils.js\";\nimport { get, set } from \"./utils.js\";\n\n/** Finds a given record from the backend database by either id or a `{[field: string]: value}` slug */\nconst useFindExistingRecord = (\n  modelManager: AnyModelManager,\n  findBy: string | { [key: string]: any },\n  options: { select?: Record<string, any>; pause?: boolean }\n): [{ data?: GadgetRecord<any>; fetching: boolean; error?: ErrorWrapper }, () => void] => {\n  // for simplicity, we conditionally call either the findBy or findOne hook. this violates the rules of hooks, but is a LOT simpler than mounting and pausing both hooks and massaging the results of each together. this means we don't support the same form toggling from being for a record found by id and then later a record found by some other criteria, but that's a very rare use case. you can workaround this by adding a `key` prop to the component calling `useActionForm`, and having the value change when the find method changes, which will give different instance of the component and avoid the hook order changing.\n  if (typeof findBy === \"string\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useFindOne(modelManager as any, findBy, options);\n  } else {\n    const findByKey = Object.keys(findBy)[0];\n    const findByValue = Object.values(findBy)[0];\n    const finder = (modelManager as Record<string, any>)[`findBy${camelize(findByKey)}`];\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return (useFindBy as any)(finder, findByValue, options);\n  }\n};\n\n/**\n * The identity of a record to build a form for\n *\n * - Pass the ID of a record as a string to look up a record by id\n * - Pass a {<fieldValue>: <value>} object to look up a record by some other field. __Note__: a `findBy` function must exist for the field you wish to find the record by.\n *\n * @example\n * // find the user record with ID=123\n * const { isReady, submit } = useActionForm(api.user.update, { record: \"123\" });\n *\n * @example\n * // find a record by email. `api.user.findByEmail` must exist\n * const { isReady, submit } = useActionForm(api.user.update, { record: { email: \"user@gadget.app\" } });\n */\nexport type RecordIdentifier = string | { [key: string]: any };\n\nexport type UseActionFormResult<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  FormContext = any\n> = Omit<UseFormReturn<ActionFunc[\"variablesType\"], FormContext>, \"handleSubmit\"> & {\n  /**\n   * Any error that occurred during initial data fetching or action submission\n   */\n  error?: ErrorWrapper | Error | null;\n  /**\n   * Function to call to submit the form\n   */\n  submit: () => Promise<void>;\n  /**\n   * The data resulting from running the action\n   */\n  actionData?: ReturnType<typeof useAction<GivenOptions, SchemaT, ActionFunc, any>>[0][\"data\"];\n};\n\n/**\n * React hook to manage state for a form that calls a Gadget action. `useActionForm` must be passed an action function from an instance of your generated API client library, like `api.user.create`, `api.blogPost.publish` or `api.someGlobalAction`. `useActionForm` returns a `Form` object from `react-hook-form` which can be used to build great form experiences.\n *\n * `useActionForm` manages the Gadget API calls for the form, and handling validation errors returned by the Gadget backend. If your form is for an existing record, `useActionForm` will also fetch the record from the backend and populate the form with the existing values.\n *\n * `useActionForm` doesn't run the action when called. To actually submit the form, call the `submit` function on the returned `Form` object.\n *\n * @see https://react-hook-form.com/\n *\n * @param action an action function from a model manager in your application's client, like `api.user.create`\n * @param options action options, like selecting the fields in the result\n */\nexport const useActionForm = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  FormContext = any\n>(\n  action: ActionFunc,\n  options?: UseFormProps<ActionFunc[\"variablesType\"], FormContext> & {\n    /**\n     * The record identifier to run this action on, if it already exists.\n     * Should be undefined for create actions, or a record ID (or finder) for update / etc actions\n     **/\n    findBy?: RecordIdentifier;\n    /**\n     *\n     */\n    record?: ActionFunc[\"hasReturnType\"] extends true\n      ? any\n      : Partial<\n          GadgetRecord<\n            Select<\n              Exclude<ActionFunc[\"schemaType\"], null | undefined>,\n              DefaultSelection<ActionFunc[\"selectionType\"], ActionFunc[\"optionsType\"], ActionFunc[\"defaultSelection\"]>\n            >\n          >\n        >;\n    /**\n     * Which fields to select on from the record when retrieving it from the backend.\n     */\n    select?: ActionFunc[\"optionsType\"][\"select\"];\n    /**\n     * Which fields to send from the form's values when sending it from the backend.\n     */\n    send?: string[];\n    /**\n     * Called when the form submits\n     */\n    onSubmit?: () => void;\n    /**\n     * Called when the action completes successfully on the backend\n     */\n    onSuccess?: (actionResult: any) => void;\n    /**\n     * Called when the form submission errors before sending, during the API call, or if the API call returns an error.\n     */\n    onError?: (error: Error | FieldErrors<ActionFunc[\"variablesType\"]>) => void;\n  }\n): UseActionFormResult<GivenOptions, SchemaT, ActionFunc, FormContext> => {\n  const api = useApi();\n  const findExistingRecord = !!options?.findBy;\n  const hasSetInitialValues = useRef<boolean>(!findExistingRecord);\n\n  // find the existing record if there is one\n  const modelManager = (api as any)[action.modelApiIdentifier] as AnyModelManager;\n  const [findResult] = useFindExistingRecord(modelManager, options?.findBy || \"1\", {\n    pause: !findExistingRecord,\n    select: options?.select,\n  });\n\n  const existingRecord = options?.record || findResult.data;\n  const isReady = !findExistingRecord || !!existingRecord;\n\n  let defaultValues = options?.defaultValues;\n  if (!defaultValues && existingRecord) {\n    defaultValues = { [action.modelApiIdentifier]: { ...existingRecord } } as any;\n  }\n\n  // setup the react-hook-form object, passing any options from the props\n  const { handleSubmit, formState, ...formHook } = useForm<ActionFunc[\"variablesType\"], FormContext>({\n    defaultValues,\n    ...options,\n  });\n\n  // when the default values arrive from the record find later, reset them into the form. react-hook-form doesn't watch the default values after the first render\n  useEffect(() => {\n    if (isReady && !hasSetInitialValues.current && defaultValues) {\n      hasSetInitialValues.current = true;\n      formHook.reset(defaultValues);\n    }\n  }, [isReady, defaultValues, formHook]);\n\n  // get the action runner to run on submit\n  const [actionResult, runAction] = useAction(action, { select: options?.select } as any);\n\n  const handleSubmissionError = useCallback(\n    (error: Error | FieldErrors<ActionFunc[\"variablesType\"]>) => {\n      if (\"executionErrors\" in error) {\n        const executionErrors = (error as unknown as ErrorWrapper).executionErrors;\n        for (const executionError of executionErrors) {\n          if (\"validationErrors\" in executionError) {\n            for (const validationError of executionError.validationErrors) {\n              formHook.setError(`${action.modelApiIdentifier}.${validationError.apiIdentifier}` as any, {\n                message: validationError.message,\n              });\n            }\n          } else {\n            const codeToReplace = \"code\" in executionError ? `${executionError.code}: ` : \"\";\n            const message = executionError.message.replace(codeToReplace, \"\");\n\n            formHook.setError(\"root\", { message });\n          }\n        }\n      }\n\n      options?.onError?.(error);\n    },\n    [action.modelApiIdentifier, formHook, options]\n  );\n\n  const submit = useCallback(\n    async (event?: React.BaseSyntheticEvent<object, any, any> | undefined) => {\n      let result: any;\n\n      formHook.clearErrors();\n\n      await handleSubmit(\n        async (data) => {\n          let modelInput = data[action.modelApiIdentifier];\n          if (modelInput) {\n            modelInput = { ...modelInput };\n            delete modelInput.__typename;\n            delete modelInput.id;\n            delete modelInput.createdAt;\n            delete modelInput.updatedAt;\n          }\n\n          let variables: Record<string, any> = {\n            id: existingRecord ? existingRecord.id : undefined,\n            ...data,\n            [action.modelApiIdentifier]: modelInput,\n          };\n\n          if (options?.send) {\n            const unmasked = variables;\n            variables = {};\n            for (const key of options.send) {\n              set(variables, key, get(unmasked, key));\n            }\n          }\n\n          options?.onSubmit?.();\n\n          result = await runAction(variables as any);\n          if (!result.error) {\n            options?.onSuccess?.(result.data);\n          }\n        },\n        (errors) => {\n          handleSubmissionError(errors);\n        }\n      )(event);\n\n      if (result?.error) {\n        handleSubmissionError(result.error);\n      }\n    },\n    [handleSubmit, formHook, handleSubmissionError, existingRecord, options, action.modelApiIdentifier, runAction]\n  );\n\n  const proxiedFormState = new Proxy(formState, {\n    get: (target, prop) => {\n      if (prop === \"isSubmitting\") {\n        return target.isSubmitting || actionResult.fetching;\n      } else if (prop === \"isSubmitSuccessful\") {\n        return target.isSubmitSuccessful && !actionResult.fetching && !actionResult.error;\n      } else if (prop === \"isLoading\") {\n        return target.isLoading || findResult.fetching;\n      } else {\n        return (target as any)[prop];\n      }\n    },\n  });\n\n  return {\n    ...formHook,\n    formState: proxiedFormState,\n    error: findResult.error || actionResult.error,\n    submit,\n    actionData: actionResult.data,\n  };\n};\n"]}
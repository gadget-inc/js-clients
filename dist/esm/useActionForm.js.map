{"version":3,"file":"useActionForm.js","sourceRoot":"","sources":["../../src/useActionForm.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ActionFunction,\n  AnyClient,\n  AnyModelManager,\n  DefaultSelection,\n  GadgetRecord,\n  GlobalActionFunction,\n  Select,\n} from \"@gadgetinc/api-client-core\";\nimport { $modelRelationships, camelize } from \"@gadgetinc/api-client-core\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport type { DeepPartial, FieldErrors, FieldValues, UseFormProps, UseFormReturn } from \"react-hook-form\";\nimport { useForm } from \"react-hook-form\";\nimport { useApi } from \"./GadgetProvider.js\";\nimport { useAction } from \"./useAction.js\";\nimport { useFindBy } from \"./useFindBy.js\";\nimport { useFindOne } from \"./useFindOne.js\";\nimport { useGlobalAction } from \"./useGlobalAction.js\";\nimport type { ActionHookState, ErrorWrapper, OptionsType } from \"./utils.js\";\nimport { get, set } from \"./utils.js\";\n\nexport * from \"react-hook-form\";\n\n/** Finds a given record from the backend database by either id or a `{[field: string]: value}` slug */\nconst useFindExistingRecord = (\n  modelManager: AnyModelManager | undefined,\n  findBy: string | { [key: string]: any },\n  options: { select?: Record<string, any>; pause?: boolean }\n): [{ data?: GadgetRecord<any>; fetching: boolean; error?: ErrorWrapper }, () => void] => {\n  // for simplicity, we conditionally call either the findBy or findOne hook. this violates the rules of hooks, but is a LOT simpler than mounting and pausing both hooks and massaging the results of each together. this means we don't support the same form toggling from being for a record found by id and then later a record found by some other criteria, but that's a very rare use case. you can workaround this by adding a `key` prop to the component calling `useActionForm`, and having the value change when the find method changes, which will give different instance of the component and avoid the hook order changing.\n  if (modelManager && typeof findBy === \"string\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useFindOne(modelManager as any, findBy, options);\n  } else if (modelManager) {\n    const [findByKey, findByValue] = Object.entries(findBy)[0];\n    const finder = (modelManager as Record<string, any>)[`findBy${camelize(findByKey)}`];\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return (useFindBy as any)(finder, findByValue, options);\n  } else {\n    return [\n      { fetching: false },\n      () => {\n        // noop\n      },\n    ];\n  }\n};\n\nconst OmittedKeys = [\"id\", \"createdAt\", \"updatedAt\", \"__typename\"] as const;\ntype OmittedKey = (typeof OmittedKeys)[number];\n\nconst omitKeys = (data: any) => {\n  const newData = { ...data };\n  for (const key of OmittedKeys) {\n    delete newData[key];\n  }\n  return newData;\n};\n\nconst toDefaultValues = (modelApiIdentifier: string | undefined, data: any) => {\n  data = omitKeys(data);\n\n  if (modelApiIdentifier && data[modelApiIdentifier] && typeof data[modelApiIdentifier] === \"object\") {\n    data[modelApiIdentifier] = omitKeys(data[modelApiIdentifier]);\n  }\n\n  return unwindEdges(data);\n};\n\nconst unwindEdges = (input: any): any => {\n  if (input !== null || (input !== undefined && typeof input === \"object\")) {\n    if (Array.isArray(input)) {\n      return input.map(unwindEdges);\n    }\n\n    if (input !== null && typeof input === \"object\") {\n      if (input.edges && Array.isArray(input.edges)) {\n        return input.edges.map((edge: any) => unwindEdges(edge.node));\n      }\n\n      const result: any = {};\n      for (const key of Object.keys(input)) {\n        result[key] = unwindEdges(input[key]);\n      }\n      return result;\n    }\n\n    return input;\n  }\n};\n\nconst disambiguateDefaultValues = (data: any, initialData: any, action: any) => {\n  const initialKeys = Object.keys(initialData).filter((key) => !OmittedKeys.includes(key as OmittedKey));\n\n  const result = Object.fromEntries(\n    Object.entries(data).flatMap(([key, value]) => {\n      if (initialKeys.includes(key)) {\n        return [];\n      }\n\n      return [[key, value]];\n    })\n  );\n\n  const modelData = { ...data[action.modelApiIdentifier] };\n\n  for (const key of Object.keys(modelData)) {\n    const initialValue = initialData[key];\n\n    if (\n      !!data[action.modelApiIdentifier] &&\n      typeof data[action.modelApiIdentifier] === \"object\" &&\n      key in data[action.modelApiIdentifier] &&\n      initialValue !== data[action.modelApiIdentifier][key]\n    ) {\n      modelData[key] = data[action.modelApiIdentifier][key];\n    } else if (key in data && initialValue !== data[key]) {\n      modelData[key] = data[key];\n    }\n  }\n\n  result[action.modelApiIdentifier] = modelData;\n  return result;\n};\n\nfunction getUpdates(data: any): Record<string, number[]> {\n  const updateList: Record<string, number[]> = {};\n\n  function traverse(input: any, path: string | undefined = undefined, depth = 0): any {\n    if (Array.isArray(input)) {\n      return input.map((item: any, index) => {\n        const currentPath = path ? `${path}.${index}` : index.toString();\n        return traverse(item, currentPath, depth + 1);\n      });\n    } else if (input !== undefined && input !== null && typeof input === \"object\") {\n      const result: any = {};\n\n      for (const key of Object.keys(input)) {\n        const currentPath = path ? `${path}.${key}` : key;\n        result[key] = traverse(input[key], currentPath, depth + 1);\n      }\n\n      if (depth > 1) {\n        const newPath = path?.substring(0, path.length - 2);\n\n        if (\"id\" in input) {\n          if (!updateList[newPath!]) {\n            updateList[newPath!] = [];\n          }\n\n          updateList[newPath!].push(input[\"id\"]);\n        }\n      }\n\n      return result;\n    }\n\n    return input;\n  }\n\n  traverse(data);\n  return updateList;\n}\n\nexport const reshapeDataForGraphqlApi = async (client: AnyClient, defaultValues: any, data: any) => {\n  const referencedTypes = client[$modelRelationships];\n\n  if (!referencedTypes) {\n    throw new Error(\"No Gadget model metadata found -- please ensure you are using the latest version of the API client for your app\");\n  }\n\n  const updates = getUpdates(defaultValues); // grab the updates from default values to see what needs to be created, updated, or deleted\n\n  function transform(\n    input: any,\n    depth = 0,\n    path: string | undefined = undefined,\n    fieldType: { type: string; model: string } | null = null,\n    fieldRelationships: Record<string, { type: string; model: string }> | null = null\n  ): any {\n    if (Array.isArray(input)) {\n      // If the input is an array, we need to handle it differently\n      const results: any[] = [];\n      const edge = updates[path!]; // grab the list of ids from the updates object, based on the path\n      const handled: number[] = [];\n\n      if (edge) {\n        // if there are ids in the updates object, we need to handle them first\n        results.push(\n          edge.map((nodeId: any, nodeIndex: number) => {\n            // for each id, find the corresponding item in the input array\n            const item = input.find((item: any) => item.id == nodeId); // find the item in the input array that matches the id\n\n            if (!item) {\n              // if the item is not found, we need to delete it from the updates object as well as anything that references it\n              const updateEntries = Object.entries(updates); // grab all the entries from the updates object\n              const updateEntry = updateEntries.find(([key, _ids]) => key.includes(path! + \".\" + nodeIndex));\n\n              if (updateEntry) {\n                // if we find an entry that matches the path, we need to delete it from the updates object\n                const { 0: updatePath, 1: _ } = updateEntry;\n                delete updates[updatePath];\n              }\n\n              return { delete: { id: nodeId } };\n            } else {\n              const index = input.findIndex((item: any) => item.id == nodeId);\n              delete updates[path!][nodeIndex]; // delete the id from the updates object so it's not handled again\n\n              handled.push(index);\n\n              const currentPath = path ? `${path}.${index}` : index.toString();\n              return transform(item, depth + 1, currentPath, fieldType, fieldRelationships); // transform the item\n            }\n          })\n        );\n      }\n\n      // handle the rest of the array - anything that wasn't in the updates object\n      results.push(\n        input\n          .filter((_item, index) => !handled.includes(index))\n          .map((item: any, index) => {\n            const currentPath = path ? `${path}.${index}` : index.toString();\n            return transform(item, depth + 1, currentPath, fieldType, fieldRelationships);\n          })\n      );\n\n      return results.flatMap((result) => result);\n    } else if (input != null && typeof input === \"object\") {\n      // if the input is an object, we need to handle it differently\n      const result: any = {};\n\n      for (const key of Object.keys(input)) {\n        const currentPath = path ? `${path}.${key}` : key;\n\n        const fieldType = fieldRelationships ? fieldRelationships[key] : null;\n        const relationships = fieldType ? referencedTypes?.[fieldType.model] : referencedTypes?.[key]; //\n\n        result[key] = transform(input[key], depth + 1, currentPath, fieldType, relationships);\n      }\n\n      const { __typename, ...rest } = result;\n\n      let belongsTo = null;\n      const belongsToRelationships: Record<string, { type: string; model: string }> | null = fieldRelationships // grab the belongsTo relationships from the fieldRelationships object\n        ? Object.entries(fieldRelationships)\n            .filter(([_key, value]) => value.type === \"BelongsTo\")\n            .reduce((obj, [key, value]) => {\n              obj[key] = value;\n              return obj;\n            }, {} as Record<string, { type: string; model: string }>)\n        : null;\n\n      for (const key of Object.keys(belongsToRelationships ?? {})) {\n        // for each belongsTo relationship, check if the input has a key that matches the relationship\n        if (`${key}Id` in input) {\n          if (belongsTo == null) {\n            belongsTo = {};\n          }\n\n          belongsTo = { ...belongsTo, [key]: { _link: input[`${key}Id`] } };\n          delete rest[`${key}Id`]; // delete the key from the rest object so it's not handled again\n        }\n      }\n\n      if (belongsTo) {\n        return depth <= 1 ? { ...rest, ...belongsTo } : { ...rest, create: { ...belongsTo } }; // when we're in the root, we need to return the belongsTo object as part of the result otherwise wrap it in a create\n      }\n\n      if (depth <= 1) {\n        return { ...rest };\n      }\n\n      if (fieldType == null) {\n        throw new Error(\n          `Can't transform input, no field type found. ${JSON.stringify(\n            {\n              input,\n              path,\n              referencedTypes,\n            },\n            null,\n            2\n          )}`\n        );\n      }\n\n      const inputHasId = \"id\" in input;\n\n      switch (fieldType.type) {\n        case \"HasMany\":\n        case \"HasOne\":\n          return inputHasId ? { update: { ...rest } } : { create: { ...rest } };\n        case \"BelongsTo\":\n          return inputHasId ? { _link: input[\"id\"] } : { create: { ...rest } };\n        default:\n          throw new Error(\n            `Can't transform input, Unknown field type ${fieldType}. ${JSON.stringify(\n              {\n                input,\n                path,\n                referencedTypes,\n              },\n              null,\n              2\n            )}`\n          );\n      }\n    }\n\n    return input;\n  }\n\n  const result = transform(data);\n\n  return result;\n};\n\n/**\n * The identity of a record to build a form for\n *\n * - Pass the ID of a record as a string to look up a record by id\n * - Pass a {<fieldValue>: <value>} object to look up a record by some other field. __Note__: a `findBy` function must exist for the field you wish to find the record by.\n *\n * @example\n * // find the user record with ID=123\n * const { submit } = useActionForm(api.user.update, { record: \"123\" });\n *\n * @example\n * // find a record by email. `api.user.findByEmail` must exist\n * const { submit } = useActionForm(api.user.update, { record: { email: \"user@gadget.app\" } });\n */\nexport type RecordIdentifier = string | { [key: string]: any };\n\ntype UseActionFormHookStateData<F extends ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>> = F extends ActionFunction<\n  any,\n  any,\n  any,\n  any,\n  any\n>\n  ? F[\"hasReturnType\"] extends true\n    ? any\n    : GadgetRecord<\n        Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], F[\"optionsType\"], F[\"defaultSelection\"]>>\n      >\n  : any;\n\ntype UseActionFormHookState<F extends ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>> = ActionHookState<\n  UseActionFormHookStateData<F>,\n  Exclude<F[\"variablesType\"], null | undefined>\n>;\n\ntype UseActionFormSubmit<F extends ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>> = (\n  event?: React.BaseSyntheticEvent<object, any, any> | undefined\n) => Promise<UseActionFormHookState<F>>;\n\ntype ExcludeUndefined<T> = T extends undefined ? never : T;\n\ntype ServerSideError<F extends ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>> = F extends ActionFunction<\n  any,\n  any,\n  any,\n  any,\n  any\n>\n  ? {\n      [key in F[\"modelApiIdentifier\"]]?: {\n        [key in\n          | keyof F[\"selectionType\"]\n          | keyof ExcludeUndefined<F[\"variablesType\"]>\n          | ExcludeUndefined<F[\"modelApiIdentifier\"] extends \"user\" ? \"password\" : never>]?: { message: string };\n      };\n    }\n  : { [key in keyof ExcludeUndefined<F[\"variablesType\"]>]: { message: string } };\n\ntype UseActionFormState<\n  F extends ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>,\n  FormVariables extends FieldValues,\n  FormContext\n> = Omit<UseFormReturn<FormVariables, FormContext>[\"formState\"], \"errors\"> & {\n  errors: UseFormReturn<FormVariables, FormContext>[\"formState\"][\"errors\"] & ServerSideError<F>;\n};\n\ntype Increment<A extends number[]> = [...A, 0];\n\ntype IsAny<T> = 0 extends 1 & T ? true : false;\n\nexport type FormInput<InputT, Depth extends number = 9, CurrentDepth extends number[] = []> = CurrentDepth[\"length\"] extends Depth\n  ? any\n  : IsAny<InputT> extends true\n  ? any\n  : InputT extends (infer Element)[]\n  ? FormInput<Element, Depth, CurrentDepth>[]\n  : InputT extends { create?: unknown; update?: unknown }\n  ? FormInput<InputT[\"create\"], Depth, Increment<CurrentDepth>> | FormInput<InputT[\"update\"], Depth, Increment<CurrentDepth>>\n  : InputT extends object\n  ? { [K in keyof InputT]: FormInput<InputT[K], Depth, Increment<CurrentDepth>> }\n  : InputT | null | undefined;\n\nexport type UseActionFormResult<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>,\n  FormVariables extends FieldValues,\n  FormContext = any\n> = Omit<UseFormReturn<FormVariables & FormInput<ActionFunc[\"variablesType\"]>, FormContext>, \"handleSubmit\" | \"formState\"> & {\n  formState: UseActionFormState<ActionFunc, FormVariables, FormContext>;\n  /**\n   * Any error that occurred during initial data fetching or action submission\n   */\n  error?: ErrorWrapper | Error | null;\n  /**\n   * Function to call to submit the form\n   */\n  submit: UseActionFormSubmit<ActionFunc>;\n  /**\n   * The data resulting from running the action\n   */\n  actionData?: ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>\n    ? ReturnType<typeof useAction<GivenOptions, SchemaT, ActionFunc, any>>[0][\"data\"]\n    : ReturnType<typeof useGlobalAction<any>>[0][\"data\"];\n};\n\n/**\n * React hook to manage state for a form that calls a Gadget action. `useActionForm` must be passed an action function from an instance of your generated API client library, like `api.user.create`, `api.blogPost.publish` or `api.someGlobalAction`. `useActionForm` returns a `Form` object from `react-hook-form` which can be used to build great form experiences.\n *\n * `useActionForm` manages the Gadget API calls for the form, and handling validation errors returned by the Gadget backend. If your form is for an existing record, `useActionForm` will also fetch the record from the backend and populate the form with the existing values.\n *\n * `useActionForm` doesn't run the action when called. To actually submit the form, call the `submit` function on the returned `Form` object.\n *\n * @see https://react-hook-form.com/\n *\n * @param action an action function from a model manager in your application's client, like `api.user.create`\n * @param options action options, like selecting the fields in the result\n */\nexport const useActionForm = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  ExtraFormVariables extends FieldValues = {},\n  FormContext = any,\n  ActionResultData = UseActionFormHookStateData<ActionFunc>,\n  DefaultValues = ActionFunc[\"variablesType\"] & ExtraFormVariables\n>(\n  action: ActionFunc,\n  options?: Omit<UseFormProps<ActionFunc[\"variablesType\"] & ExtraFormVariables, FormContext>, \"defaultValues\"> & {\n    defaultValues?: DeepPartial<DefaultValues & { [key in OmittedKey]?: any }>;\n    /**\n     * The record identifier to run this action on, if it already exists.\n     * Should be undefined for create actions, or a record ID (or finder) for update / etc actions\n     **/\n    findBy?: RecordIdentifier;\n    /**\n     * Which fields to select on from the record when retrieving it from the backend.\n     */\n    select?: ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> ? ActionFunc[\"optionsType\"][\"select\"] : never;\n    /**\n     * Which fields to send from the form's values when sending it from the backend.\n     */\n    send?: string[];\n    /**\n     * Called when the form submits\n     */\n    onSubmit?: () => void;\n    /**\n     * Called when the action completes successfully on the backend\n     */\n    onSuccess?: (actionResult: ActionResultData) => void;\n    /**\n     * Called when the form submission errors before sending, during the API call, or if the API call returns an error.\n     */\n    onError?: (error: Error | FieldErrors<ActionFunc[\"variablesType\"]>) => void;\n  }\n): UseActionFormResult<GivenOptions, SchemaT, ActionFunc, ExtraFormVariables, FormContext> => {\n  const api = useApi();\n  const findExistingRecord = !!options?.findBy;\n  const hasSetInitialValues = useRef<boolean>(!findExistingRecord);\n  const isModelAction = \"modelApiIdentifier\" in action;\n\n  // find the existing record if there is one\n  const modelManager = isModelAction ? ((api as any)[action.modelApiIdentifier] as AnyModelManager) : undefined;\n  const [findResult] = useFindExistingRecord(modelManager, options?.findBy || \"1\", {\n    pause: !findExistingRecord,\n    select: options?.select,\n  });\n\n  const isReady = !findExistingRecord || !!findResult.data;\n\n  let defaultValues = options?.defaultValues;\n  if (isModelAction && findResult.data) {\n    const modelDefaultValues = toDefaultValues(action.modelApiIdentifier, findResult.data);\n    defaultValues = action.hasAmbiguousIdentifier\n      ? { ...options?.defaultValues, [action.modelApiIdentifier]: modelDefaultValues }\n      : { ...options?.defaultValues, ...modelDefaultValues, [action.modelApiIdentifier]: modelDefaultValues };\n  }\n\n  let existingRecordId: string | undefined = undefined;\n\n  if (findResult.data?.id) {\n    existingRecordId = findResult.data.id;\n  } else if (defaultValues?.id) {\n    existingRecordId = defaultValues.id;\n  } else if (isModelAction && (defaultValues as any)?.[action.modelApiIdentifier]?.id) {\n    existingRecordId = (defaultValues as any)?.[action.modelApiIdentifier]?.id;\n  }\n\n  // setup the react-hook-form object, passing any options from the props\n  const { handleSubmit, formState, ...formHook } = useForm<ActionFunc[\"variablesType\"], FormContext>({\n    ...options,\n    defaultValues: toDefaultValues(isModelAction ? action.modelApiIdentifier : undefined, defaultValues),\n  });\n\n  // when the default values arrive from the record find later, reset them into the form. react-hook-form doesn't watch the default values after the first render\n  useEffect(() => {\n    if (isReady && !hasSetInitialValues.current && defaultValues) {\n      hasSetInitialValues.current = true;\n      formHook.reset(defaultValues);\n    }\n  }, [isReady, defaultValues, formHook]);\n\n  // get the action runner to run on submit\n  const [actionResult, runAction] =\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    isModelAction ? useAction(action, { select: options?.select }) : useGlobalAction(action);\n\n  const handleSubmissionError = useCallback(\n    (error: Error | FieldErrors<ActionFunc[\"variablesType\"]>) => {\n      if (\"executionErrors\" in error) {\n        const errorWrapper = error as unknown as ErrorWrapper;\n        const executionErrors = errorWrapper.executionErrors;\n\n        if (executionErrors.length > 0) {\n          for (const executionError of executionErrors) {\n            if (\"validationErrors\" in executionError) {\n              for (const validationError of executionError.validationErrors) {\n                const errorKey = isModelAction\n                  ? `${action.modelApiIdentifier}.${validationError.apiIdentifier}`\n                  : validationError.apiIdentifier;\n                formHook.setError(errorKey as any, {\n                  message: validationError.message,\n                });\n              }\n            } else {\n              const codeToReplace = \"code\" in executionError ? `${executionError.code}: ` : \"\";\n              const message = executionError.message.replace(codeToReplace, \"\");\n\n              formHook.setError(\"root\", { message });\n            }\n          }\n        } else if (errorWrapper.networkError) {\n          formHook.setError(\"root\", { message: errorWrapper.networkError.message });\n        }\n      }\n\n      options?.onError?.(error);\n    },\n    [action, formHook, options, isModelAction]\n  );\n\n  const submit = useCallback(\n    async (event?: React.BaseSyntheticEvent<object, any, any> | undefined) => {\n      let result: any;\n\n      formHook.clearErrors();\n\n      await handleSubmit(\n        async (data) => {\n          if (isModelAction) {\n            if (!action.hasAmbiguousIdentifier && findResult.data) {\n              data = disambiguateDefaultValues(data, findResult.data, action);\n            }\n\n            data = await reshapeDataForGraphqlApi(api, defaultValues, data);\n          }\n\n          let variables: ActionFunc[\"variablesType\"] = {\n            ...data,\n          };\n\n          if (existingRecordId) {\n            variables.id = existingRecordId;\n          }\n\n          if (options?.send) {\n            const unmasked = variables;\n            variables = {};\n            for (const key of options.send) {\n              set(variables, key, get(unmasked, key));\n            }\n          }\n\n          options?.onSubmit?.();\n\n          result = await runAction(variables);\n          if (!result.error) {\n            options?.onSuccess?.(result.data);\n          }\n        },\n        (errors) => {\n          handleSubmissionError(errors);\n        }\n      )(event);\n\n      if (result?.error) {\n        handleSubmissionError(result.error);\n      }\n\n      return result;\n    },\n    [\n      formHook,\n      handleSubmit,\n      action,\n      isModelAction,\n      findResult.data,\n      existingRecordId,\n      options,\n      runAction,\n      api,\n      defaultValues,\n      handleSubmissionError,\n    ]\n  );\n\n  const proxiedFormState = new Proxy(formState, {\n    get: (target, prop) => {\n      if (prop === \"isSubmitting\") {\n        return target.isSubmitting || actionResult.fetching;\n      } else if (prop === \"isSubmitSuccessful\") {\n        return target.isSubmitSuccessful && !actionResult.fetching && !actionResult.error;\n      } else if (prop === \"isLoading\") {\n        return target.isLoading || findResult.fetching;\n      } else {\n        return (target as any)[prop];\n      }\n    },\n  }) as unknown as UseActionFormState<ActionFunc, ActionFunc[\"variablesType\"] & ExtraFormVariables, FormContext>;\n\n  return {\n    ...formHook,\n    formState: proxiedFormState,\n    error: findResult.error || actionResult.error,\n    submit: submit as unknown as UseActionFormSubmit<ActionFunc>,\n    actionData: actionResult.data,\n  };\n};\n"]}
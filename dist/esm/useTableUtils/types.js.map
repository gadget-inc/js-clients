{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/useTableUtils/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport type { OperationContext } from \"@urql/core\";\nimport type { ReactNode } from \"react\";\nimport type { GadgetFieldType } from \"../internal/gql/graphql.js\";\nimport type { ModelMetadata } from \"../metadata.js\";\nimport type { SearchResult } from \"../useDebouncedSearch.js\";\nimport type { PaginationResult } from \"../useList.js\";\nimport type { ColumnValueType, CustomCellColumn, ErrorWrapper, RelatedFieldColumn } from \"../utils.js\";\n\ntype BaseTableColumn = {\n  name: string;\n  apiIdentifier: string;\n};\n\nexport type RecordTableColumnValue = BaseTableColumn & {\n  fieldType: GadgetFieldType;\n  sortable: boolean;\n  relatedField?: RecordTableColumnValue;\n  getValue: (record: GadgetRecord<any>) => ColumnValueType;\n  isCustomCell: false;\n};\n\nexport type CustomTableColumnValue = BaseTableColumn & {\n  getValue: (record: GadgetRecord<any>) => ReactNode;\n  isCustomCell: true;\n  sortable: false;\n};\n\nexport type TableColumn = RecordTableColumnValue | CustomTableColumnValue;\n\nexport type TableRow = Record<string, ColumnValueType | ReactNode>;\n\nexport interface TableOptions {\n  pageSize?: number;\n  initialCursor?: string;\n  initialDirection?: \"forward\" | \"backward\";\n  columns?: (string | RelatedFieldColumn | CustomCellColumn)[];\n}\n\nexport type TableData<Data> =\n  | {\n      columns: TableColumn[];\n      rows: TableRow[];\n      data: Data;\n      metadata: ModelMetadata;\n    }\n  | {\n      columns: null;\n      rows: null;\n      data: null;\n      metadata: null;\n    };\n\nexport type TableResult<Data> = [\n  TableData<Data> & {\n    page: PaginationResult;\n    fetching: boolean;\n    error?: ErrorWrapper;\n    search: SearchResult;\n  },\n  refresh: (opts?: Partial<OperationContext>) => void\n];\n"]}
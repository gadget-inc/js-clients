{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/useTableUtils/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import type { GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport type { FieldMetadataFragment } from \"../internal/gql/graphql.js\";\nimport { GadgetFieldType } from \"../internal/gql/graphql.js\";\nimport type { ModelMetadata } from \"../metadata.js\";\nimport { isCustomCellColumn, isRelatedFieldColumn } from \"../utils.js\";\nimport type { RecordTableColumnValue, TableColumn, TableOptions, TableRow } from \"./types.js\";\n\nexport const getTableData = (props: { columns?: TableColumn[]; data?: GadgetRecord<any>[]; metadata?: ModelMetadata }) => {\n  const { columns, data, metadata } = props;\n\n  return metadata && data && columns\n    ? {\n        rows: getTableRows({ data, columns }),\n        columns,\n        data,\n        metadata,\n      }\n    : {\n        rows: null,\n        columns: null,\n\n        data: null,\n        metadata: null,\n      };\n};\n\nexport const getTableRows = (props: { data: GadgetRecord<any>[]; columns: TableColumn[] }) => {\n  const { columns, data } = props;\n\n  return data.map((record) => {\n    const row: TableRow = { id: record.id };\n    for (const { apiIdentifier, getValue } of columns) {\n      row[apiIdentifier] = getValue(record);\n    }\n    return row;\n  });\n};\n\nexport const getTableColumns = (fields: FieldMetadataFragment[], columns: TableOptions[\"columns\"]) => {\n  const columnsMap = columns && getColumnsMap(columns);\n\n  const result: TableColumn[] = fields.map((field) => {\n    let relatedField: RecordTableColumnValue | undefined;\n    const relatedFieldColumn = columnsMap?.get(field.apiIdentifier);\n\n    if (relatedFieldColumn) {\n      relatedField = getRelatedFieldTableColumn(field, relatedFieldColumn);\n    }\n\n    return {\n      name: field.name,\n      apiIdentifier: field.apiIdentifier,\n      fieldType: field.fieldType,\n      getValue: (record: GadgetRecord<any>) => {\n        return record[field.apiIdentifier];\n      },\n      sortable: \"sortable\" in field && field.sortable,\n      relatedField,\n      isCustomCell: false,\n    } satisfies RecordTableColumnValue;\n  });\n\n  if (columns) {\n    // Add custom cell columns\n    for (const column of columns) {\n      if (!isCustomCellColumn(column)) continue;\n      result.push({\n        name: column.name,\n        apiIdentifier: column.name,\n        isCustomCell: true,\n        getValue: (record: GadgetRecord<any>) => column.render(record),\n        sortable: false,\n      });\n    }\n\n    // Sort columns based on the order in the options\n    const sortingColumnList = columns.map((column) => {\n      if (isRelatedFieldColumn(column)) {\n        return column.field;\n      }\n\n      if (isCustomCellColumn(column)) {\n        return column.name;\n      }\n\n      return column;\n    });\n    result.sort((a, b) => {\n      return sortingColumnList.indexOf(a.apiIdentifier) - sortingColumnList.indexOf(b.apiIdentifier);\n    });\n  }\n\n  return result;\n};\n\nconst getColumnsMap = (columns: Exclude<TableOptions[\"columns\"], undefined>) => {\n  return new Map(\n    columns.map((column) => {\n      if (isRelatedFieldColumn(column)) {\n        return [column.field, column.relatedField];\n      } else {\n        return [column, undefined];\n      }\n    })\n  );\n};\n\nconst getRelatedFieldTableColumn = (field: FieldMetadataFragment, relatedFieldColumn: string): RecordTableColumnValue => {\n  if (\n    field.fieldType !== GadgetFieldType.HasOne &&\n    field.fieldType !== GadgetFieldType.BelongsTo &&\n    field.fieldType !== GadgetFieldType.HasMany\n  ) {\n    throw new Error(`Field '${field.apiIdentifier}' is not a relationship field`);\n  }\n\n  const relatedFieldMetadata =\n    field.configuration.__typename === \"GadgetHasOneConfig\" ||\n    field.configuration.__typename === \"GadgetBelongsToConfig\" ||\n    field.configuration.__typename === \"GadgetHasManyConfig\"\n      ? field.configuration.relatedModel?.fields?.find((relatedField) => relatedField.apiIdentifier === relatedFieldColumn)\n      : undefined;\n\n  if (!relatedFieldMetadata) {\n    throw new Error(`Related field '${relatedFieldColumn}' not found in metadata`);\n  }\n\n  return {\n    name: relatedFieldMetadata.name,\n    apiIdentifier: relatedFieldMetadata.apiIdentifier,\n    fieldType: relatedFieldMetadata.fieldType,\n    getValue: (record: GadgetRecord<any>) => {\n      return record[field.apiIdentifier]?.[relatedFieldMetadata.apiIdentifier];\n    },\n    isCustomCell: false,\n    sortable: false,\n  };\n};\n"]}
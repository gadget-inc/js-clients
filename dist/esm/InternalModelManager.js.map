{"version":3,"file":"InternalModelManager.js","sourceRoot":"","sources":["../../src/InternalModelManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { query } from \"gql-query-builder\";\nimport type { GadgetConnection } from \"./GadgetConnection.js\";\nimport type { GadgetRecord, RecordShape } from \"./GadgetRecord.js\";\nimport { GadgetRecordList } from \"./GadgetRecordList.js\";\nimport type { GadgetTransaction } from \"./GadgetTransaction.js\";\nimport {\n  GadgetClientError,\n  GadgetOperationError,\n  assert,\n  assertMutationSuccess,\n  assertNullableOperationSuccess,\n  assertOperationSuccess,\n  camelize,\n  capitalizeIdentifier,\n  hydrateConnection,\n  hydrateRecord,\n  hydrateRecordArray,\n} from \"./support.js\";\n\nconst internalErrorsDetails = `\nfragment InternalErrorsDetails on ExecutionError {\n  code\n  message\n  ...on InvalidRecordError {\n    validationErrors {\n      apiIdentifier\n      message\n    }\n    model {\n      apiIdentifier\n    }\n    record\n  }\n}\n`;\n\nconst internalHydrationPlan = (modelApiIdentifer: string) => `\n  gadgetMeta {\n    hydrations(modelName: \"${modelApiIdentifer}\")\n  }\n`;\n\nexport const internalFindOneQuery = (apiIdentifier: string) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  return `\n    query InternalFind${capitalizedApiIdentifier}($id: GadgetID!, $select: [String!]) {\n      ${internalHydrationPlan(apiIdentifier)}\n      internal {\n        ${apiIdentifier}(id: $id, select: $select)\n      }\n    }\n    `;\n};\n\n/**\n * A list of fields to select from the internal API\n * Matches the format of the Public API `select` option, but only allows going one level deep -- no relationships can be selected using the internal API.\n *\n * Supports passing a list of strings as a shorthand.\n *\n * @example\n * { fieldA: true, fieldB: true, fieldC: false }\n *\n * @example\n * ['fieldA', 'fieldB']\n */\nexport type InternalFieldSelection = string[] | { [field: string]: boolean | null | undefined };\n\n/** Options for the api functions that return one record on an InternalModelManager */\nexport interface InternalFindOneOptions {\n  /**\n   * What fields to retrieve from the API for this API call\n   **/\n  select?: InternalFieldSelection;\n}\n\n/** Options for functions that query a list of records on an InternalModelManager */\nexport interface InternalFindListOptions {\n  /**\n   * A string to search for within all the stringlike fields of the records\n   * Matches the behavior of the Public API `search` option\n   **/\n  search?: string;\n  /**\n   * How to sort the returned records\n   * Matches the format and behavior of the Public API `sort` option\n   *\n   * @example\n   * {\n   *   sort: { publishedAt: \"Descending\" }\n   * }\n   **/\n  sort?: Record<string, \"Ascending\" | \"Descending\"> | Record<string, \"Ascending\" | \"Descending\">[];\n  /**\n   * Only return records matching this filter\n   * Matches the format and behavior of the Public API `filter` option\n   *\n   * @example\n   * {\n   *   filter: { published: { equals: true } }\n   * }\n   * */\n  filter?: Record<string, any>;\n  /**\n   * What fields to retrieve from the API for this API call\n   **/\n  select?: InternalFieldSelection;\n}\n\n/** Options for functions that return a paginated list of records from an InternalModelManager */\nexport interface InternalFindManyOptions extends InternalFindListOptions {\n  /**\n   * A count of records to return\n   * Often used in tandem with the `after` option for GraphQL relay-style cursor pagination\n   * Matches the pagination style and behavior of the Public API\n   **/\n  first?: number;\n  /**\n   * The `after` cursor from the GraphQL Relay pagination spec\n   * Matches the pagination style and behavior of the Public API\n   **/\n  after?: string;\n  /**\n   * A count of records to return\n   * Often used in tandem with the `before` option for GraphQL relay-style cursor pagination\n   * Matches the pagination style and behavior of the Public API\n   **/\n  last?: number;\n  /**\n   * The `before` cursor from the GraphQL Relay pagination spec\n   * Matches the pagination style and behavior of the Public API\n   **/\n  before?: string;\n}\n\nconst internalFindListVariables = (capitalizedApiIdentifier: string, options?: InternalFindListOptions) => {\n  return {\n    ...(options?.search && { search: { value: options?.search, type: \"String\", required: false } }),\n    ...(options?.sort && { sort: { value: options?.sort, type: `${capitalizedApiIdentifier}Sort!`, list: true } }),\n    ...(options?.filter && { filter: { value: options?.filter, type: `${capitalizedApiIdentifier}Filter!`, list: true } }),\n    ...(options?.select && { select: { value: formatInternalSelectVariable(options?.select), type: `String!`, list: true } }),\n  };\n};\n\nexport const internalFindFirstQuery = (apiIdentifier: string, options?: InternalFindListOptions) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  const defaultVariables = internalFindListVariables(capitalizedApiIdentifier, options);\n\n  return query(\n    [\n      {\n        operation: \"internal\",\n        fields: [\n          {\n            operation: `list${capitalizedApiIdentifier}`,\n            fields: [\n              {\n                edges: [\"node\"],\n              },\n            ],\n            variables: {\n              ...defaultVariables,\n              first: { value: 1, type: \"Int\" },\n            },\n          },\n        ],\n      },\n    ],\n    null,\n    { operationName: `InternalFindFirst${capitalizedApiIdentifier}` }\n  );\n};\n\nexport const internalFindManyQuery = (apiIdentifier: string, options?: InternalFindManyOptions) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  const defaultVariables = internalFindListVariables(capitalizedApiIdentifier, options);\n\n  return query(\n    [\n      {\n        operation: \"internal\",\n        fields: [\n          {\n            operation: `list${capitalizedApiIdentifier}`,\n            fields: [\n              {\n                pageInfo: [\"hasNextPage\", \"hasPreviousPage\", \"startCursor\", \"endCursor\"],\n              },\n              {\n                edges: [\"cursor\", \"node\"],\n              },\n            ],\n            variables: {\n              ...defaultVariables,\n              after: { value: options?.after, type: \"String\" },\n              before: { value: options?.before, type: \"String\" },\n              first: { value: options?.first, type: \"Int\" },\n              last: { value: options?.last, type: \"Int\" },\n            },\n          },\n        ],\n      },\n    ],\n    null,\n    { operationName: `InternalFindMany${capitalizedApiIdentifier}` }\n  );\n};\n\nexport const internalCreateMutation = (apiIdentifier: string) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  return `\n    ${internalErrorsDetails}\n\n    mutation InternalCreate${capitalizedApiIdentifier}($record: Internal${capitalizedApiIdentifier}Input) {\n      ${internalHydrationPlan(apiIdentifier)}\n      internal {\n        create${capitalizedApiIdentifier}(${apiIdentifier}: $record) {\n          success\n          errors {\n            ... InternalErrorsDetails\n          }\n          ${apiIdentifier}\n        }\n      }\n    }\n  `;\n};\n\nexport const internalBulkCreateMutation = (apiIdentifier: string, pluralApiIdentifier: string) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  const capitalizedPluralApiIdentifier = capitalizeIdentifier(pluralApiIdentifier);\n\n  return `\n    ${internalErrorsDetails}\n\n    mutation InternalBulkCreate${capitalizedPluralApiIdentifier}($records: [Internal${capitalizedApiIdentifier}Input]!) {\n      ${internalHydrationPlan(apiIdentifier)}\n      internal {\n        bulkCreate${capitalizedPluralApiIdentifier}(${pluralApiIdentifier}: $records) {\n          success\n          errors {\n            ... InternalErrorsDetails\n          }\n          ${pluralApiIdentifier}\n        }\n      }\n    }\n  `;\n};\n\nexport const internalUpdateMutation = (apiIdentifier: string) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  return `\n    ${internalErrorsDetails}\n\n    mutation InternalUpdate${capitalizedApiIdentifier}($id: GadgetID!, $record: Internal${capitalizedApiIdentifier}Input) {\n      ${internalHydrationPlan(apiIdentifier)}\n      internal {\n        update${capitalizedApiIdentifier}(id: $id, ${apiIdentifier}: $record) {\n          success\n          errors {\n            ... InternalErrorsDetails\n          }\n          ${apiIdentifier}\n        }\n      }\n    }\n  `;\n};\n\nexport const internalDeleteMutation = (apiIdentifier: string) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  return `\n    ${internalErrorsDetails}\n\n    mutation InternalDelete${capitalizedApiIdentifier}($id: GadgetID!) {\n      ${internalHydrationPlan(apiIdentifier)}\n      internal {\n        delete${capitalizedApiIdentifier}(id: $id) {\n          success\n          errors {\n            ... InternalErrorsDetails\n          }\n        }\n      }\n    }\n  `;\n};\n\nexport const internalDeleteManyMutation = (apiIdentifier: string) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  return `\n    ${internalErrorsDetails}\n\n    mutation InternalDeleteMany${capitalizedApiIdentifier}(\n      $search: String\n      $filter: [${capitalizedApiIdentifier}Filter!]\n    ) {\n      ${internalHydrationPlan(apiIdentifier)}\n      internal {\n        deleteMany${capitalizedApiIdentifier}(search: $search, filter: $filter) {\n          success\n          errors {\n            ... InternalErrorsDetails\n          }\n        }\n      }\n    }\n  `;\n};\n\n/** The fields for a given record to send to the backend */\nexport type RecordData = Record<string, any>;\n\n/**\n * Model specific manager for a given model's internal representation. Used to access the inner, raw data in the Gadget database. Use with caution -- it's easy to break stuff, and the Public API should be used when possible!\n */\nexport class InternalModelManager {\n  private readonly capitalizedApiIdentifier: string;\n\n  constructor(\n    private readonly apiIdentifier: string,\n    readonly connection: GadgetConnection,\n    readonly options?: { pluralApiIdentifier: string; hasAmbiguousIdentifiers?: boolean }\n  ) {\n    this.capitalizedApiIdentifier = camelize(apiIdentifier);\n  }\n\n  private validateRecord(record: RecordData) {\n    if (!this.options || !this.options.hasAmbiguousIdentifiers) {\n      return true;\n    }\n    const keys = Object.keys(record);\n\n    // any keys that aren't the apiIdentifier are invalid\n    return keys.every((key) => key === this.apiIdentifier);\n  }\n\n  private getRecordFromData(record: RecordData, functionName: string) {\n    let recordData = record;\n\n    if (!this.validateRecord(record)) {\n      throw new GadgetOperationError(\n        `Invalid arguments found in variables. Did you mean to use ${functionName}({ ${this.apiIdentifier}: { ... } })?`,\n        \"GGT_INVALID_RECORD_DATA\"\n      );\n    }\n\n    if (this.apiIdentifier in record) {\n      recordData = recordData[this.apiIdentifier];\n    }\n\n    return recordData;\n  }\n\n  /**\n   * Find a single record by ID. Throws an error by default if the record with the given ID is not found.\n   *\n   * @example\n   * // returns post with id 10\n   * const post = await api.internal.post.findOne(10);\n   *\n   * @param id The ID of the record to find\n   * @param options Options for the find operation\n   * @param throwOnEmptyData Whether or not to throw an error if the record is not found\n   * @returns The record, if found\n   */\n  async findOne(id: string, options?: InternalFindOneOptions, throwOnEmptyData = true): Promise<GadgetRecord<RecordData>> {\n    const response = await this.connection.currentClient\n      .query(internalFindOneQuery(this.apiIdentifier), { id, select: formatInternalSelectVariable(options?.select) })\n      .toPromise();\n    const assertSuccess = throwOnEmptyData ? assertOperationSuccess : assertNullableOperationSuccess;\n    const result = assertSuccess(response, [\"internal\", this.apiIdentifier]);\n    return hydrateRecord(response, result);\n  }\n\n  /**\n   * Find a single record by ID. Returns null if the record doesn't exist.\n   *\n   * @example\n   * // returns post with id 10 if it exists, null otherwise\n   * const post = await api.internal.post.maybeFindOne(10);\n   *\n   * @param id The ID of the record to find\n   * @param options Options for the find operation\n   * @returns The record, if found, null otherwise\n   */\n  async maybeFindOne(id: string, options?: InternalFindOneOptions): Promise<GadgetRecord<RecordData> | null> {\n    const record = await this.findOne(id, options, false);\n    return record.isEmpty() ? null : record;\n  }\n\n  /**\n   * Find a list of records matching the given options\n   *\n   * @example\n   * // returns the first page of published posts\n   * const posts = await api.internal.post.findMany({ filter: { published: { equals: true }}});\n   *\n   * @param options Options for the find operation, like sorts, filters, and pagination\n   * @returns The record, if found, null otherwise\n   */\n  async findMany(options?: InternalFindManyOptions): Promise<GadgetRecordList<any>> {\n    const plan = internalFindManyQuery(this.apiIdentifier, options);\n    const response = await this.connection.currentClient.query(plan.query, plan.variables).toPromise();\n    const connection = assertNullableOperationSuccess(response, [\"internal\", `list${this.capitalizedApiIdentifier}`]);\n    const records = hydrateConnection(response, connection);\n\n    return GadgetRecordList.boot(this, records, { options, pageInfo: connection.pageInfo });\n  }\n\n  /**\n   * Find the first record matching the given options. Throws an error by default if no records matching the options are found.\n   *\n   * @example\n   * // returns the first published post or throws if none found\n   * const post = await api.internal.post.findFirst({ filter: { published: { equals: true }}});\n   *\n   * @param options Options for the find operation, like sorts, filters, and pagination\n   * @returns The first record matching the options\n   */\n  async findFirst(options?: InternalFindListOptions, throwOnEmptyData = true): Promise<GadgetRecord<RecordShape>> {\n    const plan = internalFindFirstQuery(this.apiIdentifier, options);\n    const response = await this.connection.currentClient.query(plan.query, plan.variables).toPromise();\n\n    let connection;\n    if (throwOnEmptyData === false) {\n      // If this is a nullable operation, don't throw errors on empty\n      connection = assertNullableOperationSuccess(response, [\"internal\", `list${this.capitalizedApiIdentifier}`]);\n    } else {\n      // Otherwise, passthrough the `throwOnEmptyData` flag, to account for\n      // `findMany` (allows empty arrays) vs `findFirst` (no empty result) usage.\n      connection = assertOperationSuccess(response, [\"internal\", `list${this.capitalizedApiIdentifier}`], throwOnEmptyData);\n    }\n\n    const records = hydrateConnection(response, connection);\n    const recordList = GadgetRecordList.boot(this, records, { options, pageInfo: connection.pageInfo });\n    return recordList[0];\n  }\n\n  /**\n   * Find the first record matching the given options. Returns null if no records matching the options are found.\n   *\n   * @example\n   * // returns the first published post or null if none are published\n   * const post = await api.internal.post.maybeFindFirst({ filter: { published: { equals: true }}});\n   *\n   * @param options Options for the find operation, like sorts, filters, and pagination\n   * @returns The first record matching the options, null otherwise\n   */\n  async maybeFindFirst(options?: InternalFindListOptions): Promise<GadgetRecord<RecordShape> | null> {\n    return await this.findFirst(options, false);\n  }\n\n  /**\n   * Creates a new record in the backend datastore for this model using the Internal API\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // creates a new post record in the database\n   * const post = await api.internal.post.create({ title: \"A new post\" });\n   *\n   * @param record The data for the record to create\n   * @returns The created record\n   */\n  async create(record: RecordData): Promise<GadgetRecord<RecordShape>> {\n    return await this.transaction(async (transaction) => {\n      const response = await transaction.client\n        .mutation(internalCreateMutation(this.apiIdentifier), {\n          record: this.getRecordFromData(record, \"create\"),\n        })\n        .toPromise();\n      const result = assertMutationSuccess(response, [\"internal\", `create${this.capitalizedApiIdentifier}`]);\n      return hydrateRecord(response, result[this.apiIdentifier]);\n    });\n  }\n\n  /**\n   * Creates a set of new records in the backend datastore for this model using the Internal API. Creates in bulk within the same database transaction for performance.\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // creates 2 new post records in the database\n   * const posts = await api.internal.post.bulkCreate([\n   *   { title: \"A new post\" },\n   *   { title: \"Another new post\" }\n   * ]);\n   *\n   * @param record An array of data for the records to create\n   * @returns The created records\n   */\n  async bulkCreate(records: RecordData[]): Promise<GadgetRecord<RecordShape>[]> {\n    return await this.transaction(async (transaction) => {\n      if (!this.options?.pluralApiIdentifier) {\n        throw new GadgetClientError(\"Cannot perform bulkCreate without a pluralApiIdentifier\");\n      }\n\n      const capitalizedPluralApiIdentifier = capitalizeIdentifier(this.options.pluralApiIdentifier);\n      const response = await transaction.client\n        .mutation(internalBulkCreateMutation(this.apiIdentifier, this.options.pluralApiIdentifier), {\n          records,\n        })\n        .toPromise();\n      const result = assertMutationSuccess(response, [\"internal\", `bulkCreate${capitalizedPluralApiIdentifier}`]);\n      return hydrateRecordArray(response, result[this.options.pluralApiIdentifier]);\n    });\n  }\n\n  /**\n   * Updates an existing record in the backend datastore for this model using the Internal API\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // updates post with id 10 in the database\n   * const post = await api.internal.post.update(10, { title: \"A new post title\" });\n   *\n   * @param record The data for the record to update\n   * @returns The updated record\n   */\n  async update(id: string, record: RecordData): Promise<GadgetRecord<RecordShape>> {\n    assert(id, `Can't update a record without an ID passed`);\n    return await this.transaction(async (transaction) => {\n      const response = await transaction.client\n        .mutation(internalUpdateMutation(this.apiIdentifier), {\n          id,\n          record: this.getRecordFromData(record, \"update\"),\n        })\n        .toPromise();\n      const result = assertMutationSuccess(response, [\"internal\", `update${this.capitalizedApiIdentifier}`]);\n\n      return hydrateRecord(response, result[this.apiIdentifier]);\n    });\n  }\n\n  /**\n   * Deletes an existing record in the backend datastore for this model using the Internal API\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // removes the post with id 10 in the database\n   * await api.internal.post.delete(10);\n   *\n   * @param id The id of the record to delete\n   */\n  async delete(id: string): Promise<void> {\n    assert(id, `Can't delete a record without an ID`);\n    return await this.transaction(async (transaction) => {\n      const response = await transaction.client.mutation(internalDeleteMutation(this.apiIdentifier), { id }).toPromise();\n      assertMutationSuccess(response, [\"internal\", `delete${this.capitalizedApiIdentifier}`]);\n    });\n  }\n\n  /**\n   * Deletes the records in the backend datastore that match the given filter criteria. Uses the Internal API.\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // removes all unpublished posts from the database\n   * await api.internal.post.deleteMany({filter: { published: { equals: false } } });\n   *\n   * @param options Search and filter options for the records to delete\n   */\n  async deleteMany(options?: { search?: string; filter?: RecordData }): Promise<void> {\n    return await this.transaction(async (transaction) => {\n      const response = await transaction.client.mutation(internalDeleteManyMutation(this.apiIdentifier), options).toPromise();\n      assertMutationSuccess(response, [\"internal\", `deleteMany${this.capitalizedApiIdentifier}`]);\n    });\n  }\n\n  /** @private */\n  async transaction<T>(callback: (transaction: GadgetTransaction) => Promise<T>): Promise<T> {\n    return await this.connection.transaction(callback);\n  }\n}\n\nfunction formatInternalSelectVariable(select: InternalFieldSelection | undefined): undefined | string[] {\n  if (!select) return;\n  if (Array.isArray(select)) return select;\n  const result: string[] = [];\n  for (const [key, value] of Object.entries(select)) {\n    if (value) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"]}
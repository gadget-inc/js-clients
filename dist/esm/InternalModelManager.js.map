{"version":3,"file":"InternalModelManager.js","sourceRoot":"","sources":["../../src/InternalModelManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Call, Var, compileWithVariableValues } from \"tiny-graphql-query-compiler\";\nimport type { GadgetConnection } from \"./GadgetConnection.js\";\nimport type { GadgetRecord, RecordShape } from \"./GadgetRecord.js\";\nimport { GadgetRecordList } from \"./GadgetRecordList.js\";\nimport {\n  ErrorsSelection,\n  GadgetClientError,\n  GadgetOperationError,\n  assert,\n  assertMutationSuccess,\n  assertNullableOperationSuccess,\n  assertOperationSuccess,\n  camelize,\n  capitalizeIdentifier,\n  filterTypeName,\n  hydrateConnection,\n  hydrateRecord,\n  hydrateRecordArray,\n  hydrationSelection,\n  namespaceDataPath,\n  namespacedGraphQLTypeName,\n  namespacify,\n  sortTypeName,\n} from \"./support.js\";\nimport type {\n  AnyFilter,\n  InternalFieldSelection,\n  InternalFindListOptions,\n  InternalFindManyOptions,\n  InternalFindOneOptions,\n} from \"./types.js\";\n\nexport const internalFindOneQuery = (apiIdentifier: string, id: string, namespace: string[], select?: InternalFieldSelection) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"query\",\n    name: `InternalFind${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [apiIdentifier]: Call({\n          id: Var({ value: id, type: \"GadgetID!\" }),\n          select: Var({ value: formatInternalSelectVariable(select), type: `[String!]` }),\n        }),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nconst internalFindListVariables = (apiIdentifier: string, namespace: string[], options?: InternalFindListOptions) => {\n  return {\n    search: options?.search ? Var({ value: options?.search, type: \"String\" }) : undefined,\n    sort: options?.sort ? Var({ value: options?.sort, type: `[${sortTypeName(apiIdentifier, namespace)}!]` }) : undefined,\n    filter: options?.filter ? Var({ value: options?.filter, type: `[${filterTypeName(apiIdentifier, namespace)}!]` }) : undefined,\n    select: options?.select ? Var({ value: formatInternalSelectVariable(options?.select), type: `[String!]` }) : undefined,\n  };\n};\n\nexport const internalFindFirstQuery = (apiIdentifier: string, namespace: string[], options?: InternalFindListOptions) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  const defaultVariables = internalFindListVariables(capitalizedApiIdentifier, namespace, options);\n\n  return compileWithVariableValues({\n    type: \"query\",\n    name: `InternalFindFirst${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`list${capitalizedApiIdentifier}`]: Call(\n          {\n            ...defaultVariables,\n            first: Var({ value: 1, type: \"Int\" }),\n          },\n          {\n            edges: {\n              node: true,\n            },\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nexport const internalFindManyQuery = (apiIdentifier: string, namespace: string[], options?: InternalFindManyOptions) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  const defaultVariables = internalFindListVariables(capitalizedApiIdentifier, namespace, options);\n\n  return compileWithVariableValues({\n    type: \"query\",\n    name: `InternalFindMany${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`list${capitalizedApiIdentifier}`]: Call(\n          {\n            ...defaultVariables,\n            after: options?.after ? Var({ value: options.after, type: \"String\" }) : undefined,\n            before: options?.before ? Var({ value: options?.before, type: \"String\" }) : undefined,\n            first: options?.first ? Var({ value: options?.first, type: \"Int\" }) : undefined,\n            last: options?.last ? Var({ value: options?.last, type: \"Int\" }) : undefined,\n          },\n          {\n            pageInfo: { hasNextPage: true, hasPreviousPage: true, startCursor: true, endCursor: true },\n            edges: { cursor: true, node: true },\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nconst internalInputTypeName = (apiIdentifier: string, namespace: string[]) =>\n  `Internal${namespacedGraphQLTypeName(apiIdentifier, namespace)}Input`;\n\nexport const internalCreateMutation = (apiIdentifier: string, namespace: string[], record: RecordData) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalCreate${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`create${capitalizedApiIdentifier}`]: Call(\n          {\n            [apiIdentifier]: Var({ value: record, type: internalInputTypeName(apiIdentifier, namespace) }),\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n            [apiIdentifier]: true,\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nexport const internalBulkCreateMutation = (\n  apiIdentifier: string,\n  pluralApiIdentifier: string,\n  namespace: string[],\n  records: RecordData[]\n) => {\n  const capitalizedPluralApiIdentifier = capitalizeIdentifier(pluralApiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalBulkCreate${capitalizedPluralApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`bulkCreate${capitalizedPluralApiIdentifier}`]: Call(\n          {\n            [pluralApiIdentifier]: Var({ value: records, type: `[${internalInputTypeName(apiIdentifier, namespace)}]!` }),\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n            [pluralApiIdentifier]: true,\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nexport const internalUpdateMutation = (apiIdentifier: string, namespace: string[], id: string, record: RecordData) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalUpdate${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`update${capitalizedApiIdentifier}`]: Call(\n          {\n            id: Var({ value: id, type: \"GadgetID!\" }),\n            [apiIdentifier]: Var({ value: record, type: internalInputTypeName(apiIdentifier, namespace) }),\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n            [apiIdentifier]: true,\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nexport const internalUpsertMutation = (apiIdentifier: string, namespace: string[], on: string[] | undefined, record: RecordData) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalUpsert${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`upsert${capitalizedApiIdentifier}`]: Call(\n          {\n            on: Var({ value: on, type: \"[String!]\" }),\n            [apiIdentifier]: Var({ value: record, type: internalInputTypeName(apiIdentifier, namespace) }),\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n            [apiIdentifier]: true,\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nexport const internalDeleteMutation = (apiIdentifier: string, namespace: string[], id: string) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalDelete${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`delete${capitalizedApiIdentifier}`]: Call(\n          {\n            id: Var({ value: id, type: \"GadgetID!\" }),\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n          }\n        ),\n      }),\n    },\n  });\n};\n\nexport const internalDeleteManyMutation = (\n  apiIdentifier: string,\n  namespace: string[],\n  options?: { search?: string; filter?: AnyFilter }\n) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalDeleteMany${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`deleteMany${capitalizedApiIdentifier}`]: Call(\n          {\n            search: options?.search ? Var({ value: options?.search, type: \"String\" }) : undefined,\n            filter: options?.filter ? Var({ value: options?.filter, type: `[${filterTypeName(apiIdentifier, namespace)}!]` }) : undefined,\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n          }\n        ),\n      }),\n    },\n  });\n};\n\n/** The fields for a given record to send to the backend */\nexport type RecordData = Record<string, any>;\n\n/**\n * Model specific manager for a given model's internal representation. Used to access the inner, raw data in the Gadget database. Use with caution -- it's easy to break stuff, and the Public API should be used when possible!\n */\nexport class InternalModelManager<Shape extends RecordShape = RecordData> {\n  private readonly capitalizedApiIdentifier: string;\n  private readonly namespace: string[];\n\n  constructor(\n    private readonly apiIdentifier: string,\n    readonly connection: GadgetConnection,\n    readonly options?: { pluralApiIdentifier: string; hasAmbiguousIdentifiers?: boolean; namespace?: string[] }\n  ) {\n    this.capitalizedApiIdentifier = camelize(apiIdentifier);\n    this.namespace = options?.namespace || [];\n  }\n\n  private validateRecord(record: RecordData) {\n    if (!this.options || !this.options.hasAmbiguousIdentifiers) {\n      return true;\n    }\n    const keys = Object.keys(record);\n\n    // any keys that aren't the apiIdentifier are invalid\n    return keys.every((key) => key === this.apiIdentifier);\n  }\n\n  private getRecordFromData(record: RecordData, functionName: string) {\n    let recordData = record;\n\n    if (!this.validateRecord(record)) {\n      throw new GadgetOperationError(\n        `Invalid arguments found in variables. Did you mean to use ${functionName}({ ${this.apiIdentifier}: { ... } })?`,\n        \"GGT_INVALID_RECORD_DATA\"\n      );\n    }\n\n    if (this.apiIdentifier in record) {\n      recordData = recordData[this.apiIdentifier];\n    }\n\n    return recordData;\n  }\n\n  /**\n   * Find a single record by ID. Throws an error by default if the record with the given ID is not found.\n   *\n   * @example\n   * // returns post with id 10\n   * const post = await api.internal.post.findOne(10);\n   *\n   * @param id The ID of the record to find\n   * @param options Options for the find operation\n   * @param throwOnEmptyData Whether or not to throw an error if the record is not found\n   * @returns The record, if found\n   */\n  async findOne(id: string, options?: InternalFindOneOptions, throwOnEmptyData = true): Promise<GadgetRecord<Shape>> {\n    const plan = internalFindOneQuery(this.apiIdentifier, id, this.namespace, formatInternalSelectVariable(options?.select));\n    const response = await this.connection.currentClient.query(plan.query, plan.variables).toPromise();\n    const assertSuccess = throwOnEmptyData ? assertOperationSuccess : assertNullableOperationSuccess;\n    const result = assertSuccess(response, this.dataPath(this.apiIdentifier));\n    return hydrateRecord<Shape>(response, result);\n  }\n\n  /**\n   * Find a single record by ID. Returns null if the record doesn't exist.\n   *\n   * @example\n   * // returns post with id 10 if it exists, null otherwise\n   * const post = await api.internal.post.maybeFindOne(10);\n   *\n   * @param id The ID of the record to find\n   * @param options Options for the find operation\n   * @returns The record, if found, null otherwise\n   */\n  async maybeFindOne(id: string, options?: InternalFindOneOptions): Promise<GadgetRecord<Shape> | null> {\n    const record = await this.findOne(id, options, false);\n    return record.isEmpty() ? null : record;\n  }\n\n  /**\n   * Find a list of records matching the given options\n   *\n   * @example\n   * // returns the first page of published posts\n   * const posts = await api.internal.post.findMany({ filter: { published: { equals: true }}});\n   *\n   * @param options Options for the find operation, like sorts, filters, and pagination\n   * @returns The record, if found, null otherwise\n   */\n  async findMany(options?: InternalFindManyOptions): Promise<GadgetRecordList<Shape>> {\n    const plan = internalFindManyQuery(this.apiIdentifier, this.namespace, options);\n    const response = await this.connection.currentClient.query(plan.query, plan.variables).toPromise();\n    const connection = assertNullableOperationSuccess(response, this.dataPath(`list${this.capitalizedApiIdentifier}`));\n    const records = hydrateConnection(response, connection);\n\n    return GadgetRecordList.boot(this, records, { options, pageInfo: connection.pageInfo });\n  }\n\n  /**\n   * Find the first record matching the given options. Throws an error by default if no records matching the options are found.\n   *\n   * @example\n   * // returns the first published post or throws if none found\n   * const post = await api.internal.post.findFirst({ filter: { published: { equals: true }}});\n   *\n   * @param options Options for the find operation, like sorts, filters, and pagination\n   * @returns The first record matching the options\n   */\n  async findFirst(options?: InternalFindListOptions, throwOnEmptyData = true): Promise<GadgetRecord<Shape>> {\n    const plan = internalFindFirstQuery(this.apiIdentifier, this.namespace, options);\n    const response = await this.connection.currentClient.query(plan.query, plan.variables).toPromise();\n    const dataPath = this.dataPath(`list${this.capitalizedApiIdentifier}`);\n\n    let connection;\n    if (throwOnEmptyData === false) {\n      // If this is a nullable operation, don't throw errors on empty\n      connection = assertNullableOperationSuccess(response, dataPath);\n    } else {\n      // Otherwise, passthrough the `throwOnEmptyData` flag, to account for\n      // `findMany` (allows empty arrays) vs `findFirst` (no empty result) usage.\n      connection = assertOperationSuccess(response, dataPath, throwOnEmptyData);\n    }\n\n    const records = hydrateConnection(response, connection);\n    const recordList = GadgetRecordList.boot(this, records, { options, pageInfo: connection.pageInfo });\n    return recordList[0];\n  }\n\n  /**\n   * Find the first record matching the given options. Returns null if no records matching the options are found.\n   *\n   * @example\n   * // returns the first published post or null if none are published\n   * const post = await api.internal.post.maybeFindFirst({ filter: { published: { equals: true }}});\n   *\n   * @param options Options for the find operation, like sorts, filters, and pagination\n   * @returns The first record matching the options, null otherwise\n   */\n  async maybeFindFirst(options?: InternalFindListOptions): Promise<GadgetRecord<Shape> | null> {\n    return await this.findFirst(options, false);\n  }\n\n  /**\n   * Creates a new record in the backend datastore for this model using the Internal API\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // creates a new post record in the database\n   * const post = await api.internal.post.create({ title: \"A new post\" });\n   *\n   * @param record The data for the record to create\n   * @returns The created record\n   */\n  async create(record: RecordData): Promise<GadgetRecord<Shape>> {\n    const plan = internalCreateMutation(this.apiIdentifier, this.namespace, this.getRecordFromData(record, \"create\"));\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    const result = assertMutationSuccess(response, this.dataPath(`create${this.capitalizedApiIdentifier}`));\n    return hydrateRecord(response, result[this.apiIdentifier]);\n  }\n\n  /**\n   * Creates a set of new records in the backend datastore for this model using the Internal API. Creates in bulk within the same database transaction for performance.\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // creates 2 new post records in the database\n   * const posts = await api.internal.post.bulkCreate([\n   *   { title: \"A new post\" },\n   *   { title: \"Another new post\" }\n   * ]);\n   *\n   * @param record An array of data for the records to create\n   * @returns The created records\n   */\n  async bulkCreate(records: RecordData[]): Promise<GadgetRecord<Shape>[]> {\n    if (!this.options?.pluralApiIdentifier) {\n      throw new GadgetClientError(\"Cannot perform bulkCreate without a pluralApiIdentifier\");\n    }\n\n    const capitalizedPluralApiIdentifier = capitalizeIdentifier(this.options.pluralApiIdentifier);\n    const plan = internalBulkCreateMutation(this.apiIdentifier, this.options.pluralApiIdentifier, this.namespace, records);\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    const result = assertMutationSuccess(response, this.dataPath(`bulkCreate${capitalizedPluralApiIdentifier}`));\n    return hydrateRecordArray(response, result[this.options.pluralApiIdentifier]);\n  }\n\n  /**\n   * Updates an existing record in the backend datastore for this model using the Internal API\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // updates post with id 10 in the database\n   * const post = await api.internal.post.update(10, { title: \"A new post title\" });\n   *\n   * @param record The data for the record to update\n   * @returns The updated record\n   */\n  async update(id: string, record: RecordData): Promise<GadgetRecord<Shape>> {\n    assert(id, `Can't update a record without an ID passed`);\n    const plan = internalUpdateMutation(this.apiIdentifier, this.namespace, id, this.getRecordFromData(record, \"update\"));\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    const result = assertMutationSuccess(response, this.dataPath(`update${this.capitalizedApiIdentifier}`));\n\n    return hydrateRecord(response, result[this.apiIdentifier]);\n  }\n\n  /**\n   * Upserts a record in the backend datastore for this model using the Internal API.\n   * If a matching record exists, it will be updated. If it doesn't exist, it will be created.\n   * By default records will be matched by the `id` field, but you can specify a different field to match on.\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // upserts post with id 10 in the database\n   * // if a post with id 10 exists, it will be updated\n   * // if a post with id 10 does not exist, it will be created\n   * const post = await api.internal.post.upsert({ id: \"10\", title: \"A new post title\" });\n   *\n   * @example\n   * // upserts post with slug \"new-post\" in the database\n   * // if a post with slug \"new-post\" exists, it will be updated\n   * // if a post with slug \"new-post\" does not exist, it will be created\n   * const post = await api.internal.post.upsert({ post: {slug: \"new-post\", title: \"A new post title\" }, on: [\"slug\"] });\n   *\n   * @param record The data for the record to update\n   * @returns The upserted record\n   */\n  async upsert(record: RecordData & { on?: string[] }): Promise<GadgetRecord<Shape>> {\n    const { on, ...recordData } = record;\n    on && assert(on.length > 0, `Must specify at least one field to upsert on`);\n    const plan = internalUpsertMutation(this.apiIdentifier, this.namespace, on, this.getRecordFromData(recordData, \"upsert\"));\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    const result = assertMutationSuccess(response, this.dataPath(`upsert${this.capitalizedApiIdentifier}`));\n\n    return hydrateRecord(response, result[this.apiIdentifier]);\n  }\n\n  /**\n   * Deletes an existing record in the backend datastore for this model using the Internal API\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // removes the post with id 10 in the database\n   * await api.internal.post.delete(10);\n   *\n   * @param id The id of the record to delete\n   */\n  async delete(id: string): Promise<void> {\n    assert(id, `Can't delete a record without an ID`);\n    const plan = internalDeleteMutation(this.apiIdentifier, this.namespace, id);\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    assertMutationSuccess(response, this.dataPath(`delete${this.capitalizedApiIdentifier}`));\n  }\n\n  /**\n   * Deletes the records in the backend datastore that match the given filter criteria. Uses the Internal API.\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // removes all unpublished posts from the database\n   * await api.internal.post.deleteMany({filter: { published: { equals: false } } });\n   *\n   * @param options Search and filter options for the records to delete\n   */\n  async deleteMany(options: { search?: string; filter: AnyFilter }): Promise<void> {\n    const plan = internalDeleteManyMutation(this.apiIdentifier, this.namespace, options);\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    assertMutationSuccess(response, this.dataPath(`deleteMany${this.capitalizedApiIdentifier}`));\n  }\n\n  private dataPath(dataPath: string): string[] {\n    return [\"internal\", ...namespaceDataPath([dataPath], this.namespace)];\n  }\n}\n\nfunction formatInternalSelectVariable(select: InternalFieldSelection | undefined): undefined | string[] {\n  if (!select) return;\n  if (Array.isArray(select)) return select;\n  const result: string[] = [];\n  for (const [key, value] of Object.entries(select)) {\n    if (value) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"]}
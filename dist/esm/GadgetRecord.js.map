{"version":3,"file":"GadgetRecord.js","sourceRoot":"","sources":["../../src/GadgetRecord.ts"],"names":[],"mappings":"AAOA,MAAM,CAAN,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,iEAAW,CAAA;IACX,+EAAkB,CAAA;AACpB,CAAC,EAHW,cAAc,KAAd,cAAc,QAGzB","sourcesContent":["import type { Jsonify } from \"type-fest\";\nimport { AnyInternalModelManager } from \"./AnyInternalModelManager.js\";\nimport { AnyModelManager } from \"./AnyModelManager.js\";\nimport type { PaginateOptions } from \"./types.js\";\n\nexport type RecordShape = Record<string, any> | null | undefined | void;\n\nexport enum ChangeTracking {\n  SinceLoaded,\n  SinceLastPersisted,\n}\n\ninterface GadgetRecord_<Shape extends RecordShape> {\n  /** Checks if the original constructor data was empty or not */\n  isEmpty(): boolean;\n  /** Returns the value of the field for the given `apiIdentifier`. These properties may also be accessed on this record directly. This method can be used if your model field `apiIdentifier` conflicts with the `GadgetRecord` helper functions. */\n  getField(field: string): any;\n  /** Sets the value of the field for the given `apiIdentifier`. These properties may also be accessed on this record directly. This method can be used if your model field `apiIdentifier` conflicts with the `GadgetRecord` helper functions. */\n  setField<T>(field: string, value: T): T;\n  changes: {\n    /** Returns the `current` and `previous` values for any changed fields, keyed by field `apiIdentifier`.  */\n    (): Record<string, { current: any; previous: any }>;\n    (tracking: ChangeTracking): Record<string, { current: any; previous: any }>;\n    /** Returns the `current` and `previous` values if they have `changed`, otherwise `changed` is `false`. */\n    (prop: string): { changed: true; current: any; previous: any } | { changed: false };\n    (prop: string, tracking: ChangeTracking): { changed: true; current: any; previous: any } | { changed: false };\n  };\n  /** Returns all current values for fields that have changed */\n  toChangedJSON(tracking?: ChangeTracking): Record<string, any>;\n  changed: {\n    /** Returns `true` if any field has changed on this record. */\n    (): boolean;\n    (tracking: ChangeTracking): boolean;\n    /** Returns `true` if the specified field has changed on this record. */\n    (prop: string): boolean;\n    (prop: string, tracking: ChangeTracking): boolean;\n  };\n  /** Flushes all `changes` and starts tracking new changes from the current state of the record. */\n  flushChanges(tracking?: ChangeTracking): void;\n  /** Reverts all `changes` on the record, and returns to either the values this record were instantiated with, or the values at the time of the last `flushChanges` call. */\n  revertChanges(tracking?: ChangeTracking): void;\n  /** Returns a JSON representation of all fields on this record. */\n  toJSON(): Jsonify<Shape>;\n  /** Marks this record as changed so that the next save will save it and adjust any `updatedAt` timestamps */\n  touch(): void;\n}\n\n/** Represents one record returned from a high level Gadget API call */\nexport type GadgetRecord<Shape extends RecordShape> = GadgetRecord_<Shape> & Shape;\n\nexport type PaginationConfig = {\n  pageInfo: { hasNextPage: boolean; hasPreviousPage: boolean; startCursor: string; endCursor: string };\n  options?: PaginateOptions;\n};\n\nexport interface GadgetRecordList<Shape extends RecordShape> extends Array<GadgetRecord<Shape>> {\n  modelManager: AnyModelManager | AnyInternalModelManager<Shape>;\n  pagination: PaginationConfig;\n  firstOrThrow(): GadgetRecord<Shape>;\n  toJSON(): Jsonify<Shape>[];\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n  startCursor: string;\n  endCursor: string;\n  nextPage(): Promise<GadgetRecordList<Shape>>;\n  previousPage(): Promise<GadgetRecordList<Shape>>;\n}\n"]}
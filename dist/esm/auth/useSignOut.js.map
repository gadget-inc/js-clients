{"version":3,"file":"useSignOut.js","sourceRoot":"","sources":["../../../src/auth/useSignOut.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACtF,OAAO,EAAE,0BAA0B,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC1E,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAE5C;;;;GAIG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAA+D,EAAE,EAAE;IAC5F,MAAM,iBAAiB,GAAG,IAAI,EAAE,iBAAiB,IAAI,IAAI,CAAC;IAC1D,MAAM,cAAc,GAAG,IAAI,EAAE,cAAc,CAAC;IAC5C,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC;IACrB,MAAM,IAAI,GAAG,OAAO,EAAE,CAAC;IACvB,MAAM,OAAO,GAAG,UAAU,CAAC,0BAA0B,CAAC,CAAC;IACvD,oEAAoE;IACpE,MAAM,EAAE,0BAA0B,EAAE,UAAU,EAAE,GAAG,OAAQ,CAAC,IAAI,CAAC;IAEjE,4CAA4C;IAC5C,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChD,SAAS,CAAC,GAAG,EAAE;QACb,eAAe,CAAC,GAAG,EAAE;YACnB,WAAW,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAI,CAAC,CAAC,0BAA0B,IAAK,GAAW,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,EAAE,CAAC;QACnF,MAAM,IAAI,KAAK,CAAC,kDAAkD,0BAA0B,sCAAsC,CAAC,CAAC;IACtI,CAAC;IAED,6DAA6D;IAC7D,aAAa;IACb,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,aAAa,CAAC,GAAG,SAAS,CAAE,GAAW,CAAC,IAAI,CAAC,0BAA0B,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IAEtH,IAAI,KAAK;QAAE,MAAM,KAAK,CAAC;IAEvB,2BAA2B;IAC3B,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,iBAAiB,IAAI,IAAI,IAAI,QAAQ,EAAE,CAAC;YAC1C,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,cAAc,IAAI,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAClF,MAAM,QAAQ,GAAG,OAAO,EAAE,QAAQ,IAAI,cAAc,CAAC;YACrD,QAAQ,CAAC,GAAG,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC,EAAE,CAAC,IAAI,EAAE,iBAAiB,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEvF,oEAAoE;IACpE,OAAO,WAAW,CAAC,KAAK,IAAI,EAAE;QAC5B,IAAI,CAAC,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;QACpF,oEAAoE;QACpE,MAAM,aAAa,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC","sourcesContent":["import { startTransition, useCallback, useContext, useEffect, useState } from \"react\";\nimport { GadgetConfigurationContext, useApi } from \"../GadgetProvider.js\";\nimport { useAction } from \"../useAction.js\";\nimport { useUser } from \"./useUser.js\";\nimport { windowNavigate } from \"./utils.js\";\n\n/**\n * Returns a callback that will call the configured `signOutActionApiIdentifier` on the `User` model and optionally redirect (by default). Throws an `error` if one occurs while performing the `signOut` action, or if the `User` is not signed in.\n * @param opts - `redirectOnSuccess` defaults to `true` and will redirect the browser via `window.location.assign` if the sign out action is successful. Setting it to `false` will call the action but will not return. Defaults to `true`.\n * @param opts - `redirectToPath` defaults to the `signInPath` configured in the `GadgetConfigurationContext` and will be used as the redirect path if `redirectOnSuccess` is `true`.\n */\nexport const useSignOut = (opts?: { redirectOnSuccess?: boolean; redirectToPath?: string }) => {\n  const redirectOnSuccess = opts?.redirectOnSuccess ?? true;\n  const redirectToPath = opts?.redirectToPath;\n  const api = useApi();\n  const user = useUser();\n  const context = useContext(GadgetConfigurationContext);\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const { signOutActionApiIdentifier, signInPath } = context!.auth;\n\n  // Use the same hydration pattern as useUser\n  const [hydrated, setHydrated] = useState(false);\n  useEffect(() => {\n    startTransition(() => {\n      setHydrated(true);\n    });\n  }, []);\n\n  if (!(signOutActionApiIdentifier && (api as any).user[signOutActionApiIdentifier])) {\n    throw new Error(`missing configured signOutActionApiIdentifier '${signOutActionApiIdentifier}' on the \\`api.user\\` model manager.`);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const [{ error, data }, signOutAction] = useAction((api as any).user[signOutActionApiIdentifier], { suspense: true });\n\n  if (error) throw error;\n\n  // eslint-disable-next-line\n  useEffect(() => {\n    if (redirectOnSuccess && data && hydrated) {\n      const redirectUrl = new URL(redirectToPath ?? signInPath, window.location.origin);\n      const navigate = context?.navigate ?? windowNavigate;\n      navigate(`${redirectUrl.pathname}${redirectUrl.search}`);\n    }\n  }, [data, redirectOnSuccess, redirectToPath, signInPath, context?.navigate, hydrated]);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return useCallback(async () => {\n    if (!user) throw new Error(\"attempting to sign out when the user is not signed in\");\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    await signOutAction({ id: user.id });\n  }, [user, signOutAction]);\n};\n"]}
{"version":3,"file":"SignedIn.js","sourceRoot":"","sources":["../../../src/auth/SignedIn.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,iBAAiB,EAAE,MAAM,YAAY,CAAC;AAE/C;;GAEG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,KAA8B,EAAE,EAAE;IACzD,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,OAAO,EAAE,CAAC;IAChD,IAAI,IAAI,IAAI,UAAU,IAAI,iBAAiB,CAAC,OAAO,CAAC,EAAE;QACpD,OAAO,0CAAG,KAAK,CAAC,QAAQ,CAAI,CAAC;KAC9B;SAAM;QACL,OAAO,IAAI,CAAC;KACb;AACH,CAAC,CAAC","sourcesContent":["import type { ReactNode } from \"react\";\nimport React from \"react\";\nimport { useAuth } from \"./useAuth.js\";\nimport { isSessionSignedIn } from \"./utils.js\";\n\n/**\n * Renders its `children` if the current `Session` is signed in (has an associated `User`), otherwise renders nothing.\n */\nexport const SignedIn = (props: { children: ReactNode }) => {\n  const { session, user, isSignedIn } = useAuth();\n  if (user && isSignedIn && isSessionSignedIn(session)) {\n    return <>{props.children}</>;\n  } else {\n    return null;\n  }\n};\n"]}
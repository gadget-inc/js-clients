{"version":3,"file":"useSession.js","sourceRoot":"","sources":["../../../src/auth/useSession.ts"],"names":[],"mappings":"AASA,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC9C,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAYtC;;;GAGG;AACH,MAAM,UAAU,UAAU,CASxB,MAAmB,EACnB,OAA0G;IAe1G,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC;IAC7B,MAAM,GAAG,GAAG,MAAM,IAAK,WAA0B,CAAC;IAElD,IAAI,GAAG,IAAI,gBAAgB,IAAI,GAAG,IAAI,SAAS,IAAI,GAAG,EAAE;QACtD,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,WAAW,EAAE,GAAG,OAAO,IAAK,EAAU,CAAC;QACrE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,aAAa,EAAE,GAAG,SAAS,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;QAChF,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,gBAAgB,CAAC;QACzH,MAAM,aAAa,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,gBAAgB,CAAC;QAEpF,MAAM,IAAI,GAAQ;YAChB,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE;gBACN,GAAG,gBAAgB;gBACnB,GAAG,CAAC,aAAa,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;aAC9C;YACD,GAAG,CAAC,WAAW,IAAI,EAAE,CAAC;SACvB,CAAC;QAEF,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAEpE,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QACvB,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;QAChF,4EAA4E;QAC5E,OAAO,OAAO,MAAM,IAAI,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAE,OAAe,CAAC;KAClE;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;KAC7D;AACH,CAAC","sourcesContent":["import type {\n  AnyClient,\n  DefaultSelection,\n  FindManyFunction,\n  GadgetRecord,\n  GetFunction,\n  LimitToKnownKeys,\n  Select,\n} from \"@gadgetinc/api-client-core\";\nimport { useApi } from \"../GadgetProvider.js\";\nimport { useGet } from \"../useGet.js\";\nimport type { OptionsType, ReadOperationOptions } from \"../utils.js\";\n\nexport type GadgetSession = GadgetRecord<Record<string, any>>;\n\nexport type GadgetUser = GadgetRecord<Record<string, any>>;\n\nexport type ClientWithSessionAndUserManagers<SessionGivenOptions, SessionSchemaT, UserGivenOptions, UserSchemaT> = AnyClient & {\n  currentSession: { get: GetFunction<SessionGivenOptions, any, SessionSchemaT, any> };\n  user: { findMany: FindManyFunction<UserGivenOptions, any, UserSchemaT, any> };\n};\n\n/**\n * Used for fetching the current `Session` record from Gadget. Will suspend while the user is being fetched.\n * @returns The current session\n */\nexport function useSession<\n  SessionGivenOptions extends OptionsType,\n  SessionSchemaT,\n  UserGivenOptions extends OptionsType,\n  UserSchemaT,\n  Client extends ClientWithSessionAndUserManagers<SessionGivenOptions, SessionSchemaT, UserGivenOptions, UserSchemaT>,\n  Options extends Client[\"currentSession\"][\"get\"][\"optionsType\"] & ReadOperationOptions,\n  ClientType extends Client | undefined\n>(\n  client?: ClientType,\n  options?: LimitToKnownKeys<Options, Client[\"currentSession\"][\"get\"][\"optionsType\"] & ReadOperationOptions>\n): undefined extends ClientType\n  ? GadgetSession\n  : GadgetRecord<\n      Select<\n        Exclude<Exclude<ClientType, undefined>[\"currentSession\"][\"get\"][\"schemaType\"], null | undefined>,\n        DefaultSelection<\n          Exclude<ClientType, undefined>[\"currentSession\"][\"get\"][\"selectionType\"],\n          Options,\n          Exclude<ClientType, undefined>[\"currentSession\"][\"get\"][\"defaultSelection\"] & {\n            user: Exclude<ClientType, undefined>[\"user\"][\"findMany\"][\"defaultSelection\"];\n          }\n        >\n      >\n    > {\n  const fallbackApi = useApi();\n  const api = client ?? (fallbackApi as ClientType);\n\n  if (api && \"currentSession\" in api && \"session\" in api) {\n    const { select: selection, ...restOptions } = options ?? ({} as any);\n    const { user: userSelect, ...sessionSelect } = selection ?? { user: undefined };\n    const sessionSelection = Object.keys(sessionSelect).length > 0 ? sessionSelect : api.currentSession.get.defaultSelection;\n    const userSelection = userSelect ? userSelect : api.user?.findMany.defaultSelection;\n\n    const opts: any = {\n      suspense: true,\n      select: {\n        ...sessionSelection,\n        ...(userSelection && { user: userSelection }),\n      },\n      ...(restOptions ?? {}),\n    };\n\n    const [{ data: session, error }] = useGet(api.currentSession, opts);\n\n    if (error) throw error;\n    if (!session) throw new Error(\"currentSession not found but should be present\");\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return typeof client == \"undefined\" ? session : (session as any);\n  } else {\n    throw new Error(\"api client does not have a Session model\");\n  }\n}\n"]}
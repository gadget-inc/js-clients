{"version":3,"file":"SignedOutOrRedirect.js","sourceRoot":"","sources":["../../../src/auth/SignedOutOrRedirect.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC/D,OAAO,EAAE,0BAA0B,EAAE,MAAM,sBAAsB,CAAC;AAClE,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAE5C;;GAEG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,KAA6C,EAAE,EAAE;IACnF,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpD,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAEjC,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,OAAO,EAAE,CAAC;IACvC,MAAM,OAAO,GAAG,UAAU,CAAC,0BAA0B,CAAC,CAAC;IACvD,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,IAAI,EAAE,CAAC;IAE/B,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,EAAE;YACvC,aAAa,CAAC,IAAI,CAAC,CAAC;YACpB,MAAM,YAAY,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACjE,MAAM,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,EAAE,8BAA8B,IAAI,GAAG,CAAC;YAC3G,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAElE,MAAM,QAAQ,GAAG,OAAO,EAAE,QAAQ,IAAI,cAAc,CAAC;YACrD,QAAQ,CAAC,GAAG,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;SAC1D;IACH,CAAC,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAE/C,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;QACxB,OAAO,0CAAG,QAAQ,CAAI,CAAC;KACxB;SAAM;QACL,OAAO,IAAI,CAAC;KACb;AACH,CAAC,CAAC","sourcesContent":["import type { ReactNode } from \"react\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { GadgetConfigurationContext } from \"../GadgetProvider.js\";\nimport { useAuth } from \"./useAuth.js\";\nimport { windowNavigate } from \"./utils.js\";\n\n/**\n * Renders its `children` if the current `Session` is signed out, otherwise redirects the browser to the `path` prop. Uses `window.location.assign` to perform the redirect.\n */\nexport const SignedOutOrRedirect = (props: { path?: string; children: ReactNode }) => {\n  const [redirected, setRedirected] = useState(false);\n  const { path, children } = props;\n\n  const { user, isSignedIn } = useAuth();\n  const context = useContext(GadgetConfigurationContext);\n  const { auth } = context ?? {};\n\n  useEffect(() => {\n    if (!redirected && (isSignedIn || user)) {\n      setRedirected(true);\n      const searchParams = new URLSearchParams(window.location.search);\n      const redirectPath = searchParams.get(\"redirectTo\") ?? path ?? auth?.redirectOnSuccessfulSignInPath ?? \"/\";\n      const redirectUrl = new URL(redirectPath, window.location.origin);\n\n      const navigate = context?.navigate ?? windowNavigate;\n      navigate(`${redirectUrl.pathname}${redirectUrl.search}`);\n    }\n  }, [redirected, isSignedIn, path, user, auth]);\n\n  if (!user && !isSignedIn) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n"]}
{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/use-action-form/types.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  ActionFunction,\n  ActionWithIdAndNoVariables,\n  ActionWithIdAndVariables,\n  BulkActionWithIdsAndNoVariables,\n  DefaultSelection,\n  GadgetRecord,\n  GlobalActionFunction,\n  Select,\n} from \"@gadgetinc/api-client-core\";\nimport type { FieldValues, UseFormReturn } from \"react-hook-form\";\nimport type { useAction } from \"../useAction.js\";\nimport type { useGlobalAction } from \"../useGlobalAction.js\";\nimport type { ActionHookState, ErrorWrapper, OptionsType } from \"../utils.js\";\n\n/**\n * The identity of a record to build a form for\n *\n * - Pass the ID of a record as a string to look up a record by id\n * - Pass a {<fieldValue>: <value>} object to look up a record by some other field. __Note__: a `findBy` function must exist for the field you wish to find the record by.\n *\n * @example\n * // find the user record with ID=123\n * const { submit } = useActionForm(api.user.update, { record: \"123\" });\n *\n * @example\n * // find a record by email. `api.user.findByEmail` must exist\n * const { submit } = useActionForm(api.user.update, { record: { email: \"user@gadget.app\" } });\n */\nexport type RecordIdentifier = string | { [key: string]: any };\n\nexport type FormInput<InputT, Depth extends number = 9, CurrentDepth extends number[] = []> = CurrentDepth[\"length\"] extends Depth\n  ? any\n  : IsAny<InputT> extends true\n  ? any\n  : InputT extends (infer Element)[]\n  ? FormInput<Element, Depth, CurrentDepth>[]\n  : InputT extends { create?: unknown; update?: unknown }\n  ? FormInput<InputT[\"create\"], Depth, Increment<CurrentDepth>> | FormInput<InputT[\"update\"], Depth, Increment<CurrentDepth>>\n  : InputT extends object\n  ? { [K in keyof InputT]: FormInput<InputT[K], Depth, Increment<CurrentDepth>> }\n  : InputT | null | undefined;\n\n/**\n * Type helper to convert `null` to undefined recursively within the form values type\n * Many Gadget users use Shopify Polaris as a design system, and many of its input components do not accept `null` values. For maximum compatibility with Polaris, we convert `null` to `undefined` within the form values type, knowing that the Polaris components handle both at runtime just fine.\n */\nexport type StripNulls<T> = T extends null\n  ? undefined\n  : T extends (infer U)[]\n  ? StripNulls<U>[]\n  : T extends object\n  ? { [K in keyof T]: StripNulls<T[K]> }\n  : T;\n\nexport type UseActionFormResult<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>,\n  FormVariables extends FieldValues,\n  FormContext = any\n> = Omit<UseFormReturn<FormVariables & StripNulls<FormInput<ActionFunc[\"variablesType\"]>>, FormContext>, \"handleSubmit\" | \"formState\"> & {\n  formState: UseActionFormState<ActionFunc, FormVariables, FormContext> & { isReady: boolean };\n  /**\n   * Any error that occurred during initial data fetching or action submission\n   */\n  error?: ErrorWrapper | Error | null;\n  /**\n   * Function to call to submit the form\n   */\n  submit: UseActionFormSubmit<ActionFunc>;\n  /**\n   * The data resulting from running the action\n   */\n  actionData?: ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>\n    ? ReturnType<typeof useAction<GivenOptions, SchemaT, ActionFunc, any>>[0][\"data\"]\n    : ReturnType<typeof useGlobalAction<any>>[0][\"data\"];\n\n  originalFormMethods: UseFormReturn<FormVariables, FormContext>;\n};\n\nexport type UseActionFormHookState<F extends ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>> = ActionHookState<\n  UseActionFormHookStateData<F>,\n  Exclude<F[\"variablesType\"], null | undefined>\n>;\n\nexport type UseActionFormHookStateData<F extends ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>> =\n  F extends ActionFunction<any, any, any, any, any>\n    ? F[\"hasReturnType\"] extends true\n      ? any\n      : GadgetRecord<\n          Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], F[\"optionsType\"], F[\"defaultSelection\"]>>\n        >\n    : any;\n\nexport type UseActionFormSubmit<F extends ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>> = (\n  event?: React.BaseSyntheticEvent<object, any, any> | undefined\n) => Promise<UseActionFormHookState<F>>;\n\ntype ExcludeUndefined<T> = T extends undefined ? never : T;\n\ntype ServerSideError<F extends ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>> = F extends ActionFunction<\n  any,\n  any,\n  any,\n  any,\n  any\n>\n  ? {\n      [key in F[\"modelApiIdentifier\"]]?: {\n        [key in\n          | keyof F[\"selectionType\"]\n          | keyof ExcludeUndefined<F[\"variablesType\"]>\n          | ExcludeUndefined<F[\"modelApiIdentifier\"] extends \"user\" ? \"password\" : never>]?: { message: string };\n      };\n    }\n  : { [key in keyof ExcludeUndefined<F[\"variablesType\"]>]: { message: string } };\n\nexport type UseActionFormState<\n  F extends ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>,\n  FormVariables extends FieldValues,\n  FormContext\n> = Omit<UseFormReturn<FormVariables, FormContext>[\"formState\"], \"errors\"> & {\n  errors: UseFormReturn<FormVariables, FormContext>[\"formState\"][\"errors\"] & ServerSideError<F>;\n};\n\ntype Increment<A extends number[]> = [...A, 0];\n\ntype IsAny<T> = 0 extends 1 & T ? true : false;\n\nexport type ContextAwareSelect<T> = T extends boolean | null | undefined ? T | \"ReadOnly\" : { [K in keyof T]: ContextAwareSelect<T[K]> };\n\nexport type AnyActionWithId<OptionsT> =\n  | ActionWithIdAndNoVariables<OptionsT>\n  | ActionWithIdAndVariables<OptionsT, any>\n  | BulkActionWithIdsAndNoVariables<OptionsT>;\n"]}
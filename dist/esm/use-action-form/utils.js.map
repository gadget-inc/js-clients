{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/use-action-form/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AnyClient, AnyModelManager, GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport { $modelRelationships, camelize, isEqual } from \"@gadgetinc/api-client-core\";\nimport { useFindBy } from \"../useFindBy.js\";\nimport { useFindOne } from \"../useFindOne.js\";\nimport { get, set, unset, type ErrorWrapper } from \"../utils.js\";\n\nconst noopUseFindExistingRecordResponse = [\n  { fetching: false },\n  () => undefined, // no-op callback\n] as [{ fetching: boolean }, () => void];\n\n/** Finds a given record from the backend database by either id or a `{[field: string]: value}` slug */\nexport const useFindExistingRecord = (\n  modelManager: AnyModelManager | undefined,\n  findBy: string | { [key: string]: any } | undefined,\n  options: { select?: Record<string, any>; pause?: boolean; throwOnInvalidFindByObject?: boolean }\n): [{ data?: GadgetRecord<any>; fetching: boolean; error?: ErrorWrapper }, () => void] => {\n  if (!modelManager || !findBy) {\n    return noopUseFindExistingRecordResponse;\n  }\n\n  // for simplicity, we conditionally call either the findBy or findOne hook. this violates the rules of hooks, but is a LOT simpler than mounting and pausing both hooks and massaging the results of each together. this means we don't support the same form toggling from being for a record found by id and then later a record found by some other criteria, but that's a very rare use case. you can workaround this by adding a `key` prop to the component calling `useActionForm`, and having the value change when the find method changes, which will give different instance of the component and avoid the hook order changing.\n  if (typeof findBy === \"string\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useFindOne(modelManager as any, findBy, options);\n  }\n\n  const isValidFindByObject = typeof findBy === \"object\" && !Array.isArray(findBy) && Object.keys(findBy).length;\n  if (isValidFindByObject) {\n    const [findByKey, findByValue] = Object.entries(findBy)[0];\n    const findByOperationName = `findBy${camelize(findByKey)}`;\n\n    if (!(findByOperationName in modelManager)) {\n      if (options.throwOnInvalidFindByObject === undefined || options.throwOnInvalidFindByObject) {\n        throw new Error(\n          `Invalid findBy object: ${JSON.stringify(findBy)}. ${findByOperationName} is not a valid findBy operation for this model.`\n        );\n      }\n      return noopUseFindExistingRecordResponse;\n    }\n    const finder = (modelManager as Record<string, any>)[findByOperationName];\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return (useFindBy as any)(finder, findByValue, options);\n  }\n\n  return noopUseFindExistingRecordResponse;\n};\n\nconst OmittedKeys = [\"id\", \"createdAt\", \"updatedAt\", \"__typename\"] as const;\nexport type OmittedKey = (typeof OmittedKeys)[number];\n\nconst omitKeys = (data: any) => {\n  const newData = { ...data };\n  for (const key of OmittedKeys) {\n    delete newData[key];\n  }\n  return newData;\n};\n\nexport const processDefaultValues = (opts: {\n  hasAmbiguousDefaultValues: boolean;\n  modelApiIdentifier: string;\n  data: any;\n  defaultValues?: any;\n}) => {\n  const { modelApiIdentifier, data, defaultValues } = opts;\n\n  convertRoleObjectListIntoStringList(data); // Incoming role objects arrays need to be converted to role key string arrays because the API will only accept role keys\n\n  const modelDefaultValues = toDefaultValues(modelApiIdentifier, data);\n  const result = opts.hasAmbiguousDefaultValues\n    ? { ...defaultValues, [modelApiIdentifier]: modelDefaultValues }\n    : { ...defaultValues, ...modelDefaultValues, [modelApiIdentifier]: modelDefaultValues };\n\n  return result;\n};\n\nconst convertRoleObjectListIntoStringList = (data: any) => {\n  for (const key of Object.keys(data)) {\n    const isArray = Array.isArray(data[key]) && data[key].length;\n    if (isArray) {\n      data[key] = data[key].map((role: any) => {\n        const hasRoleKey = typeof role === \"object\" && \"__typename\" in role && role.__typename === \"Role\" && \"key\" in role;\n        return hasRoleKey ? role.key : role;\n      });\n    }\n  }\n};\n\nexport const toDefaultValues = (modelApiIdentifier: string | undefined, data: any) => {\n  data = omitKeys(data);\n\n  if (modelApiIdentifier && data[modelApiIdentifier] && typeof data[modelApiIdentifier] === \"object\") {\n    data[modelApiIdentifier] = omitKeys(data[modelApiIdentifier]);\n  }\n\n  return unwindEdges(data);\n};\n\nconst unwindEdges = (input: any): any => {\n  if (input !== null || (input !== undefined && typeof input === \"object\")) {\n    if (Array.isArray(input)) {\n      return input.map(unwindEdges);\n    }\n\n    if (isPlainObject(input)) {\n      if (input.edges && Array.isArray(input.edges)) {\n        return input.edges.map((edge: any) => unwindEdges(edge.node));\n      }\n\n      const result: any = {};\n      for (const key of Object.keys(input)) {\n        result[key] = unwindEdges(input[key]);\n      }\n      return result;\n    }\n\n    return input;\n  }\n};\n\nexport const disambiguateDefaultValues = (data: any, initialData: any, action: any) => {\n  const unwindedInitialData = unwindEdges(initialData);\n  const initialKeys = Object.keys(unwindedInitialData).filter((key) => !OmittedKeys.includes(key as OmittedKey));\n\n  const result = Object.fromEntries(\n    Object.entries(data).flatMap(([key, value]) => {\n      if (initialKeys.includes(key)) {\n        return [];\n      }\n\n      return [[key, value]];\n    })\n  );\n\n  const modelData = { ...data[action.modelApiIdentifier] };\n\n  for (const key of Object.keys(modelData)) {\n    const initialValue = unwindedInitialData[key];\n\n    if (\n      !!data[action.modelApiIdentifier] &&\n      typeof data[action.modelApiIdentifier] === \"object\" &&\n      key in data[action.modelApiIdentifier] &&\n      !isEqual(initialValue, data[action.modelApiIdentifier][key])\n    ) {\n      modelData[key] = data[action.modelApiIdentifier][key];\n    } else if (key in data && initialValue !== data[key]) {\n      if (key in data && initialValue !== data[key]) {\n        modelData[key] = data[key];\n      }\n    }\n  }\n\n  result[action.modelApiIdentifier] = modelData;\n  return result;\n};\n\nfunction getRecordIdsAtPath(data: any): Record<string, number[]> {\n  const updateList: Record<string, number[]> = {};\n\n  function traverse(input: any, path: string | undefined = undefined, depth = 0, isInArray?: boolean): any {\n    if (Array.isArray(input)) {\n      return input.flatMap((item: any) => {\n        const indexId = isPlainObject(item) && \"id\" in item ? item.id : undefined;\n        if (!indexId) {\n          return [];\n        }\n\n        const currentPath = path ? `${path}.${indexId}` : indexId.toString();\n        return traverse(item, currentPath, depth + 1, true);\n      });\n    } else if (input !== undefined && input !== null && typeof input === \"object\") {\n      const result: any = {};\n\n      for (const key of Object.keys(input)) {\n        const currentPath = path ? `${path}.${key}` : key;\n        result[key] = traverse(input[key], currentPath, depth + 1);\n      }\n\n      if (depth > 1) {\n        const newPath = isInArray ? path?.substring(0, path.length - 2) : path;\n\n        if (\"id\" in input) {\n          if (!updateList[newPath!]) {\n            updateList[newPath!] = [];\n          }\n\n          updateList[newPath!].push(input[\"id\"]);\n        }\n      }\n\n      return result;\n    }\n\n    return input;\n  }\n\n  traverse(data);\n  return updateList;\n}\n\nclass ReshapeDataContext {\n  constructor(\n    public readonly depth: number,\n    public readonly path?: string,\n    public readonly idPath?: string,\n    public readonly fieldType?: { type: string; model: string } | null,\n    public readonly fieldRelationships?: Record<string, { type: string; model: string }> | null,\n    public readonly parent?: ReshapeDataContext | null\n  ) {}\n}\n\nconst richTextToGraphqlApiInput = (input: any) => {\n  return { markdown: input.markdown };\n};\n\nconst storedFileToGraphqlApiInput = (input: any) => {\n  if (input.base64) {\n    return {\n      fileName: input.fileName,\n      mimeType: input.mimeType,\n      base64: input.base64,\n    };\n  } else if (input.file) {\n    return {\n      fileName: input.fileName,\n      mimeType: input.mimeType,\n      file: input.file,\n    };\n  } else if (input.copyUrl) {\n    return {\n      fileName: input.fileName,\n      mimeType: input.mimeType,\n      copyUrl: input.copyUrl,\n    };\n  } else if (input.directUploadToken) {\n    return {\n      fileName: input.fileName,\n      mimeType: input.mimeType,\n      directUploadToken: input.directUploadToken,\n    };\n  } else {\n    return undefined;\n  }\n};\n\nexport const reshapeDataForGraphqlApi = async (client: AnyClient, defaultValues: any, data: any) => {\n  const referencedTypes = client[$modelRelationships];\n\n  if (!referencedTypes) {\n    throw new Error(\"No Gadget model metadata found -- please ensure you are using the latest version of the API client for your app\");\n  }\n\n  const recordIdsAtPath = getRecordIdsAtPath(defaultValues); // grab the updates from default values to see what needs to be created, updated, or deleted\n\n  function transform(input: any, context: ReshapeDataContext): any {\n    const { depth, path, fieldType, fieldRelationships, idPath } = context;\n\n    if (path && Array.isArray(input)) {\n      // If the input is an array, we need to handle it differently\n      const results: any[] = [];\n      let edge: number[] | undefined = undefined;\n\n      if (fieldType && idPath && (fieldType.type == \"HasMany\" || fieldType.type == \"HasManyThrough\")) {\n        edge = recordIdsAtPath[idPath]; // grab the list of ids from the updates object, based on the path\n      }\n\n      const handled: number[] = [];\n\n      if (edge && idPath) {\n        // if there are ids in the updates object, we need to handle them first\n        results.push(\n          edge.map((nodeId: any, nodeIndex: number) => {\n            // for each id, find the corresponding item in the input array\n            const item = input.find((item: any) => item.id == nodeId); // find the item in the input array that matches the id\n\n            if (!item) {\n              // if the item is not found, we need to delete it from the updates object as well as anything that references it\n              const updateEntries = Object.entries(recordIdsAtPath); // grab all the entries from the updates object\n              const updateEntry = updateEntries.find(([key, _ids]) => key.includes(path + \".\" + nodeId));\n\n              if (updateEntry) {\n                // if we find an entry that matches the path, we need to delete it from the updates object\n                const { 0: updatePath, 1: _ } = updateEntry;\n                delete recordIdsAtPath[updatePath];\n              }\n\n              return { delete: { id: nodeId } };\n            } else {\n              const index = input.findIndex((item: any) => item.id == nodeId);\n              delete recordIdsAtPath[idPath][nodeIndex]; // delete the id from the updates object so it's not handled again\n\n              handled.push(index);\n\n              const currentPath = path ? `${path}.${index}` : index.toString();\n              const currentIdPath = idPath && isPlainObject(item) && item.id ? `${idPath}.${item.id}` : undefined;\n              return transform(item, {\n                depth: depth + 1,\n                path: currentPath,\n                idPath: currentIdPath,\n                fieldType,\n                fieldRelationships,\n                parent: context,\n              }); // transform the item\n            }\n          })\n        );\n      }\n\n      // handle the rest of the array - anything that wasn't in the updates object\n      results.push(\n        input\n          .filter((_item, index) => !handled.includes(index))\n          .map((item: any, index) => {\n            const currentPath = path ? `${path}.${index}` : index.toString();\n            const currentIdPath = idPath && isPlainObject(item) && item.id ? `${idPath}.${item.id}` : undefined;\n            return transform(item, {\n              depth: depth + 1,\n              path: currentPath,\n              idPath: currentIdPath,\n              fieldType,\n              fieldRelationships,\n              parent: context,\n            });\n          })\n      );\n\n      return results.flatMap((result) => result);\n    } else if (isPlainObject(input)) {\n      // if the input is an object, we need to handle it differently\n      const result: any = {};\n\n      for (const key of Object.keys(input)) {\n        const currentPath = path ? `${path}.${key}` : key;\n        const currentIdPath = idPath ? `${idPath}.${key}` : key;\n        const fieldType = fieldRelationships ? fieldRelationships[key] : null;\n        const relationships = fieldType ? referencedTypes?.[fieldType.model] : referencedTypes?.[key];\n\n        result[key] = transform(input[key], {\n          depth: depth + 1,\n          path: currentPath,\n          idPath: currentIdPath,\n          fieldType,\n          fieldRelationships: relationships,\n          parent: context,\n        });\n      }\n\n      const { __typename, ...rest } = result;\n\n      if (__typename == \"RichText\") {\n        return richTextToGraphqlApiInput(rest);\n      } else if (__typename == \"StoredFile\") {\n        return storedFileToGraphqlApiInput(rest);\n      }\n\n      let belongsTo = null;\n      const belongsToRelationships: Record<string, { type: string; model: string }> | null = fieldRelationships // grab the belongsTo relationships from the fieldRelationships object\n        ? Object.entries(fieldRelationships)\n            .filter(([_key, value]) => value.type === \"BelongsTo\")\n            .reduce((obj, [key, value]) => {\n              obj[key] = value;\n              return obj;\n            }, {} as Record<string, { type: string; model: string }>)\n        : null;\n\n      for (const key of Object.keys(belongsToRelationships ?? {})) {\n        // for each belongsTo relationship, check if the input has a key that matches the relationship\n        if (`${key}Id` in input) {\n          if (belongsTo == null) {\n            belongsTo = {};\n          }\n\n          belongsTo = { ...belongsTo, [key]: { _link: input[`${key}Id`] } };\n          delete rest[`${key}Id`]; // delete the key from the rest object so it's not handled again\n        }\n      }\n\n      if (belongsTo) {\n        return depth <= 1 ? { ...rest, ...belongsTo } : { create: { ...rest, ...belongsTo } }; // when we're in the root, we need to return the belongsTo object as part of the result otherwise wrap it in a create\n      }\n\n      if (depth <= 1 || fieldType == null) {\n        return { ...rest };\n      }\n\n      const inputHasId = \"id\" in input;\n      const inputHasMoreFields = Object.keys(input).filter((field) => field !== \"__typename\").length > 1;\n      const inputUpdateId =\n        idPath && recordIdsAtPath[idPath] && recordIdsAtPath[idPath].length > 0 ? recordIdsAtPath[idPath][0] : undefined;\n\n      switch (fieldType.type) {\n        case \"HasMany\":\n        case \"HasOne\":\n        case \"HasManyThrough\":\n          return getParentRelationshipFieldGraphqlApiInput({ input, result });\n        case \"BelongsTo\":\n          return inputHasId\n            ? input[\"id\"] === null\n              ? { _link: null }\n              : inputHasMoreFields\n              ? { update: { id: input[\"id\"], ...rest } }\n              : { _link: input[\"id\"] }\n            : inputUpdateId // input has no id, but this path was found in the updates object, so we need to delete it\n            ? { delete: { id: inputUpdateId } }\n            : { create: { ...rest } };\n        default:\n          throw new Error(\n            `Can't transform input, Unknown field type ${fieldType?.type}. ${JSON.stringify(\n              {\n                input,\n                path,\n                referencedTypes,\n              },\n              null,\n              2\n            )}`\n          );\n      }\n    }\n\n    return input;\n  }\n\n  const result = transform(data, { depth: 0 });\n\n  return result;\n};\n\nconst getParentRelationshipFieldGraphqlApiInput = (props: { input: any; result: any }) => {\n  const { input, result } = props;\n  const { __typename, ...rest } = result;\n\n  if (\"__id\" in rest) {\n    if (\"__unlinkedInverseField\" in rest && rest.__unlinkedInverseField) {\n      const inverseFieldApiId = rest.__unlinkedInverseField;\n      return { update: { id: rest.__id, [inverseFieldApiId]: { _link: null } } };\n    }\n    return { update: { id: rest.__id } }; // Calling this update action automatically links it to the current parent model's record ID\n  } else {\n    const inputHasId = \"id\" in input;\n    return inputHasId ? { update: { ...rest } } : { create: { ...rest } };\n  }\n};\n\nexport const isPlainObject = (obj: any) => {\n  if (typeof obj !== \"object\" || obj === null) return false;\n\n  let proto = obj;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n};\n\nexport function transformContextAwareToSelect<T>(obj?: T) {\n  if (typeof obj !== \"object\" || obj == null) {\n    return obj === \"ReadOnly\" ? true : obj;\n  }\n\n  const result: any = Array.isArray(obj) ? [] : {};\n  for (const key in obj) {\n    const value = obj[key];\n    result[key] = transformContextAwareToSelect(value);\n  }\n  return result;\n}\n\nexport function getReadOnlyPaths(obj?: any, prefix = \"\"): string[] {\n  if (!obj) {\n    return [];\n  }\n\n  let paths: string[] = [];\n  for (const key of Object.keys(obj)) {\n    let currentPath = prefix ? `${prefix}.${key}` : key;\n    if (currentPath.includes(\"edges.node\")) {\n      currentPath = currentPath.replace(\"edges.node\", \"*\");\n    }\n    if (obj[key] === \"ReadOnly\") {\n      paths.push(currentPath);\n    } else if (typeof obj[key] === \"object\" && obj[key] != null) {\n      paths = paths.concat(getReadOnlyPaths(obj[key], currentPath));\n    }\n  }\n  return paths;\n}\n\n/**\n * Uses the `select` object to remove any fields that are marked as `ReadOnly` from the `data` object.\n * Also removes any fields that isn't in the `send` array.\n */\nexport function applyDataMask(opts: {\n  select?: any;\n  send?: string[] | (() => string[]);\n  data: Record<string, any>;\n  modelApiIdentifier?: string;\n}) {\n  const { select, send, data, modelApiIdentifier } = opts;\n\n  const readOnlyPaths = getReadOnlyPaths(select, modelApiIdentifier);\n\n  // Check for relationship fields that are entirely read-only, including nested relationships\n  const checkRelationshipFields = (obj: any, prefix = \"\") => {\n    const relationshipFields = Object.keys(obj || {}).filter((key) => typeof obj[key] === \"object\" && obj[key] !== null);\n    for (const field of relationshipFields) {\n      const currentPrefix = prefix ? `${prefix}.${field}` : field;\n      const allFieldPaths = Object.keys(obj[field]).map((subField) => `${currentPrefix}.${subField}`);\n      const readOnlyFieldPaths = allFieldPaths.filter((subField) => readOnlyPaths.includes(subField));\n\n      if (readOnlyFieldPaths.length > 0 && readOnlyFieldPaths.length === allFieldPaths.length) {\n        readOnlyPaths.push(currentPrefix);\n      } else {\n        // Recursively check nested relationships\n        checkRelationshipFields(obj[field], currentPrefix);\n      }\n    }\n  };\n\n  checkRelationshipFields(select, modelApiIdentifier);\n\n  for (const path of readOnlyPaths) {\n    unset(data, path);\n  }\n\n  if (!send) return data;\n  const dataToSend = {};\n\n  const sendArray = typeof send === \"function\" ? send() : send;\n  for (const key of sendArray) {\n    const candidates = [key];\n    if (modelApiIdentifier) {\n      candidates.push(`${modelApiIdentifier}.${key}`);\n    }\n    for (const key of candidates) {\n      const value = get(data, key);\n      if (typeof value != \"undefined\") {\n        set(dataToSend, key, value);\n        break;\n      }\n    }\n  }\n\n  return dataToSend;\n}\n"]}
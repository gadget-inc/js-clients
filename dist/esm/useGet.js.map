{"version":3,"file":"useGet.js","sourceRoot":"","sources":["../../src/useGet.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,gBAAgB,EAAE,GAAG,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAClF,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAChC,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,iBAAiB,EAAE,MAAM,wBAAwB,CAAC;AAE3D,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAExD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG,CAMpB,OAAmB,EACnB,OAA4E,EAG5E,EAAE;IACF,MAAM,eAAe,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE;QACxB,OAAO,gBAAgB,CACrB,OAAO,CAAC,GAAG,CAAC,aAAa,EACzB,SAAS,EACT,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAC5B,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAC9B,eAAe,CAChB,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;IAE/B,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAEzE,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE;QAC1B,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,MAAM,SAAS,GAAG,SAAS,CAAC,IAAI,IAAI,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;QACrF,IAAI,SAAS,EAAE;YACb,IAAI,GAAG,aAAa,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;SAC5C;QACD,MAAM,KAAK,GAAG,YAAY,CAAC,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAElE,OAAO;YACL,GAAG,SAAS;YACZ,KAAK;YACL,IAAI;SACL,CAAC;IACJ,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IAEzB,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["import type { DefaultSelection, GadgetRecord, GetFunction, LimitToKnownKeys, Select } from \"@gadgetinc/api-client-core\";\nimport { findOneOperation, get, hydrateRecord } from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { useGadgetQuery } from \"./useGadgetQuery.js\";\nimport { useStructuralMemo } from \"./useStructuralMemo.js\";\nimport type { OptionsType, ReadHookResult, ReadOperationOptions } from \"./utils.js\";\nimport { ErrorWrapper, useQueryArgs } from \"./utils.js\";\n\n/**\n * React hook that fetches a singleton record for an `api.currentSomething` style model manager. `useGet` fetches one global record, which is most often the current session. `useGet` doesn't require knowing the record's ID in order to fetch it, and instead returns the one current record for the current context.\n *\n * @param manager Gadget model manager to use, like `api.currentSomething`\n * @param options options for selecting the fields in the result\n *\n * @example\n * ```\n * export function CurrentSession() {\n *   const [{error, data, fetching}, refresh] = useGet(api.currentSession, {\n *     select: {\n *       id: true,\n *       userId: true,\n *     },\n *   });\n *\n *   if (error) return <>Error: {error.toString()}</>;\n *   if (fetching && !data) return <>Fetching...</>;\n *   if (!data) return <>No current session found</>;\n *\n *   return <div>Current session ID={data.id} and userId={data.userId}</div>;\n * }\n * ```\n */\nexport const useGet = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends GetFunction<GivenOptions, any, SchemaT, any>,\n  Options extends F[\"optionsType\"] & ReadOperationOptions\n>(\n  manager: { get: F },\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"] & ReadOperationOptions>\n): ReadHookResult<\n  GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>\n> => {\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return findOneOperation(\n      manager.get.operationName,\n      undefined,\n      manager.get.defaultSelection,\n      manager.get.modelApiIdentifier,\n      memoizedOptions\n    );\n  }, [manager, memoizedOptions]);\n\n  const [rawResult, refresh] = useGadgetQuery(useQueryArgs(plan, options));\n\n  const result = useMemo(() => {\n    let data = null;\n    const rawRecord = rawResult.data && get(rawResult.data, [manager.get.operationName]);\n    if (rawRecord) {\n      data = hydrateRecord(rawResult, rawRecord);\n    }\n    const error = ErrorWrapper.forMaybeCombinedError(rawResult.error);\n\n    return {\n      ...rawResult,\n      error,\n      data,\n    };\n  }, [rawResult, manager]);\n\n  return [result, refresh];\n};\n"]}
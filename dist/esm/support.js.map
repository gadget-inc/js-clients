{"version":3,"file":"support.js","sourceRoot":"","sources":["../../src/support.ts"],"names":[],"mappings":"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","sourcesContent":["import type { OperationResult } from \"@urql/core\";\nimport { CombinedError } from \"@urql/core\";\nimport { pick } from \"lodash-es\";\nimport { Call, type FieldSelection as BuilderFieldSelection } from \"tiny-graphql-query-compiler\";\nimport type { AuthenticationModeOptions, ClientOptions } from \"./ClientOptions.js\";\nimport { DataHydrator } from \"./DataHydrator.js\";\nimport type { GadgetConnectionOptions } from \"./GadgetConnection.js\";\nimport type { ActionFunctionMetadata, AnyActionFunction } from \"./GadgetFunctions.js\";\nimport type { RecordShape } from \"./GadgetRecord.js\";\nimport { GadgetRecord } from \"./GadgetRecord.js\";\nimport type { VariablesOptions } from \"./types.js\";\n\n/**\n * Generic type of the state of any record of a Gadget model\n **/\nexport type AnyState = string | { [key: string]: AnyState };\n\n/**\n * Error caused by a violated internal expectation that isn't the users fault, but the Gadget platform's. Often the best way to handle is to just retry.\n **/\nexport class GadgetInternalError extends Error {\n  code = \"GGT_INTERNAL_ERROR\";\n  name = \"InternalError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * An error representing misuse or a violation of the assumptions of the Gadget Client.\n */\nexport class GadgetClientError extends Error {\n  code = \"GGT_CLIENT_ERROR\";\n  name = \"ClientError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = true;\n}\n\n/**\n * A Gadget API error with an `code` and `message` describing the error. Most often these errors are caused by invalid input data or by misconfigured Gadget models. Consult the documentation for the specific `code` to learn more.\n **/\nexport class GadgetOperationError extends Error {\n  constructor(incomingMessage: string, readonly code: string) {\n    super(incomingMessage.startsWith(\"GGT_\") ? incomingMessage : `${code}: ${incomingMessage}`);\n  }\n}\n\n/**\n * Interface representing one message on one invalid field for a `InvalidRecordError`\n */\nexport interface InvalidFieldError {\n  /** Which field of a record this error is for */\n  apiIdentifier: string;\n  /** Human facing string representing the error */\n  message: string;\n}\n\n/**\n * A client error when the Gadget API closes the connection unexpectedly.\n */\nexport class GadgetUnexpectedCloseError extends Error {\n  code = \"GGT_UNKNOWN\";\n  name = \"UnexpectedCloseError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = false;\n\n  /** The event that caused the unexpected close */\n  readonly event: unknown;\n\n  constructor(event: unknown) {\n    let message: string;\n    if (isCloseEvent(event)) {\n      message = `GraphQL websocket closed unexpectedly by the server with error code ${event.code} and reason \"${event.reason}\"`;\n    } else {\n      message = \"GraphQL websocket closed unexpectedly by the server\";\n    }\n\n    super(message);\n    this.event = event;\n  }\n}\n\n/**\n * A client error when the client times out waiting for the Gadget API to open websocket connection.\n */\nexport class GadgetWebsocketConnectionTimeoutError extends Error {\n  code = \"GGT_WEBSOCKET_CONNECTION_TIMEOUT\";\n  name = \"WebsocketConnectionTimeoutError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * A Gadget API error when there are more requests sent in the alloted time window then permitted\n */\nexport class GadgetTooManyRequestsError extends Error {\n  code = \"GGT_TOO_MANY_REQUESTS\";\n  name = \"TooManyRequestsError\";\n\n  /** @private */\n  statusCode = 429;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * A Gadget API error representing a backend validation error on the input data for an action. Thrown when any of the validations configured on a model fail for the given input data. Has a `validationErrors` property describing which fields failed validation, with messages for each.\n */\nexport class InvalidRecordError extends Error {\n  code = \"GGT_INVALID_RECORD\";\n  name = \"InvalidRecordError\";\n\n  /** @private */\n  statusCode = 422;\n  /** @private */\n  causedByClient = true;\n  /**\n   * A list of validation errors for each field that failed validation.\n   */\n  readonly validationErrors: InvalidFieldError[];\n  /**\n   * The API identifier of the model for this record which failed to validate\n   */\n  readonly modelApiIdentifier?: string;\n  /**\n   * The record that failed to validate, if available\n   */\n  readonly record?: Record<string, any>;\n\n  constructor(message: string | null, validationErrors: InvalidFieldError[], modelApiIdentifier?: string, record?: Record<string, any>) {\n    const firstErrors = validationErrors.slice(0, 3);\n    const extraErrorMessage =\n      validationErrors.length > 3\n        ? `, and ${validationErrors.length - 3} more error${validationErrors.length > 4 ? \"s\" : \"\"} need${\n            validationErrors.length > 4 ? \"\" : \"s\"\n          } to be corrected`\n        : \"\";\n\n    super(\n      message ??\n        `GGT_INVALID_RECORD: ${modelApiIdentifier ?? \"Record\"} is invalid and can't be saved. ${firstErrors\n          .map(({ apiIdentifier, message }) => `${apiIdentifier} ${message}`)\n          .join(\", \")}${extraErrorMessage}.`\n    );\n\n    this.validationErrors = validationErrors;\n    this.modelApiIdentifier = modelApiIdentifier;\n    this.record = record;\n  }\n}\n\n/**\n * @deprecated Use `InvalidRecordError` instead, here for backwards compatability\n */\nexport const GadgetValidationError = InvalidRecordError;\n\n/**\n * A Gadget API error that represents an error from the server. Thrown when the server encounters data that is not unique despite the existence of unique validation on a field. If you receive this error, it is likely that you added a unique validation to a field that has duplicate data.\n */\nexport class GadgetNonUniqueDataError extends Error {\n  code = \"GGT_NON_UNIQUE_DATA\";\n  name = \"NonUniqueDataError\";\n\n  /** @private */\n  statusCode = 417;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * A Gadget API error that represents an error where the client asked the server for data that doesn't exist server side.\n */\nexport class GadgetNotFoundError extends Error {\n  code = \"GGT_RECORD_NOT_FOUND\";\n  name = \"RecordNotFoundError\";\n\n  /** @private */\n  statusCode = 404;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * Represents a group of errors that occurred when running a number of operations at once */\nexport class GadgetErrorGroup<Result> extends Error {\n  constructor(\n    /** The list of inner errors that occurred */\n    public readonly errors: GadgetError[],\n    /* Any objects that were successfully processed during the bulk operation (the ones that didn't throw errors) */\n    public readonly results: Result[] | undefined\n  ) {\n    super(errors.length > 1 ? \"Multiple errors occurred\" : errors[0].message);\n  }\n\n  get code(): string {\n    return `GGT_ERROR_GROUP(${this.errors\n      .slice(0, 10)\n      .map((error) => error.code ?? \"GGT_UNKNOWN\")\n      .join(\",\")})`;\n  }\n\n  name = \"ErrorGroup\";\n\n  /** @private */\n  get statusCode() {\n    return Math.max(...this.errors.map((error) => (error as any).statusCode ?? 500));\n  }\n}\n\n/** All the errors a Gadget operation can throw */\nexport type GadgetError =\n  | GadgetOperationError\n  | GadgetInternalError\n  | InvalidRecordError\n  | GadgetNonUniqueDataError\n  | GadgetNotFoundError\n  | GadgetUnexpectedCloseError\n  | GadgetWebsocketConnectionTimeoutError\n  | GadgetErrorGroup<any>;\n\nexport function assert<T>(value: T | undefined | null, message?: string): T {\n  if (!value) {\n    throw new Error(\"assertion error\" + (message ? `: ${message}` : \"\"));\n  }\n  return value;\n}\n\nexport const get = (object: Record<string, any> | null | undefined, path: string[]): any => {\n  const length = path.length;\n  let index = 0;\n  while (object != null && index < length) {\n    object = object[path[index++]];\n  }\n\n  return index && index == length ? object : undefined;\n};\n\nexport const isCloseEvent = (event: any): event is CloseEvent => event?.type == \"close\";\n\n/**\n * Converts a string to camel case, optionally capitalizing the first character.\n * Defaults to capitalizing the first character.\n * @param str\n * @param capitalizeFirstCharacter\n * @returns Camelize string\n */\nexport const capitalizeIdentifier = (str: string | undefined | null, capitalizeFirstCharacter?: boolean): string => {\n  if (typeof str !== \"string\") return \"\";\n  return camelize(str, capitalizeFirstCharacter);\n};\n\nconst capitalizeFirstCharacter = (str: string) => {\n  const result = str === null || str === undefined ? \"\" : String(str);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n};\n\nexport const camelize = (term: string, uppercaseFirstLetter = true) => {\n  let result = \"\" + term;\n\n  if (uppercaseFirstLetter) {\n    result = result.replace(/^[a-z\\d]*/, (a) => {\n      return capitalizeFirstCharacter(a);\n    });\n  } else {\n    result = result.replace(new RegExp(\"^(?:(?=\\\\b|[A-Z_])|\\\\w)\"), (a) => {\n      return a.toLowerCase();\n    });\n  }\n\n  result = result.replace(/(?:_|(\\/))([a-z\\d]*)/gi, (_match, a, b, _idx, _string) => {\n    a || (a = \"\");\n    return \"\" + a + capitalizeFirstCharacter(b);\n  });\n\n  return result;\n};\n\nexport const namespacedGraphQLTypeName = (modelApiIdentifier: string, givenNamespaces: string | string[] | null | undefined) => {\n  const namespaces: string[] = Array.isArray(givenNamespaces) ? givenNamespaces : givenNamespaces ? [givenNamespaces] : [];\n  const segments = [...namespaces, modelApiIdentifier];\n  return segments.map((segment) => camelize(segment)).join(\"\");\n};\n\nexport const sortTypeName = (modelApiIdentifier: string, namespace: string | string[] | null | undefined) =>\n  `${namespacedGraphQLTypeName(modelApiIdentifier, namespace)}Sort`;\n\nexport const filterTypeName = (modelApiIdentifier: string, namespace: string | string[] | null | undefined) =>\n  `${namespacedGraphQLTypeName(modelApiIdentifier, namespace)}Filter`;\n\nexport const getNonUniqueDataError = (modelApiIdentifier: string, fieldName: string, fieldValue: string) =>\n  new GadgetNonUniqueDataError(\n    `More than one record found for ${modelApiIdentifier}.${fieldName} = ${fieldValue}. Please confirm your unique validation is not reporting an error.`\n  );\n\nexport const getNonNullableError = (response: Result & { fetching: boolean }, dataPath: string[]) => {\n  if (response.fetching) {\n    return;\n  }\n  const result = get(response.data, dataPath);\n  if (result === undefined) {\n    return new GadgetInternalError(\n      `Internal Error: Gadget API didn't return expected data. Nothing found in response at ${dataPath.join(\".\")}`\n    );\n  } else if (result === null) {\n    return new GadgetNotFoundError(`Record Not Found Error: Gadget API returned no data at ${dataPath.join(\".\")}`);\n  }\n};\n\nexport const assertOperationSuccess = (response: OperationResult<any>, dataPath: string[], throwOnEmptyData = false) => {\n  if (response.error) {\n    if (response.error instanceof CombinedError && (response.error.networkError as any as Error[])?.length) {\n      response.error.message = (response.error.networkError as any as Error[]).map((error) => \"[Network] \" + error.message).join(\"\\n\");\n    }\n    throw response.error;\n  }\n\n  const result = get(response.data, dataPath);\n  const edges = get(result, [\"edges\"]);\n  const dataArray = edges ?? result;\n  if (result === undefined) {\n    throw new GadgetInternalError(\n      `Internal Error: Gadget API didn't return expected data. Nothing found in response at ${dataPath.join(\".\")}`\n    );\n  } else if (result === null || (throwOnEmptyData && Array.isArray(dataArray) && dataArray.length === 0)) {\n    throw new GadgetNotFoundError(`Record Not Found Error: Gadget API returned no data at ${dataPath.join(\".\")}`);\n  }\n\n  return result;\n};\n\nexport const assertNullableOperationSuccess = (response: OperationResult<any>, dataPath: string[]) => {\n  if (response.error) {\n    if (response.error instanceof CombinedError && (response.error.networkError as any as Error[])?.length) {\n      response.error.message = (response.error.networkError as any as Error[]).map((error) => \"[Network] \" + error.message).join(\"\\n\");\n    }\n    throw response.error;\n  }\n\n  const result = get(response.data, dataPath);\n  return result ?? null;\n};\n\nexport const gadgetErrorFor = (error: Record<string, any>) => {\n  if (error.code == \"GGT_INVALID_RECORD\") {\n    return new InvalidRecordError(error.message, error.validationErrors, error.model?.apiIdentifier, error.record);\n  } else if (error.code == \"GGT_UNKNOWN\" && error.message.includes(\"duplicate key value violates unique constraint\")) {\n    return new GadgetNonUniqueDataError(error.message);\n  } else {\n    return new GadgetOperationError(error.message, error.code);\n  }\n};\n\nexport const assertMutationSuccess = (response: OperationResult<any>, dataPath: string[]) => {\n  const operationResponse = assertOperationSuccess(response, dataPath);\n\n  return assertResponseSuccess(operationResponse);\n};\n\nexport const assertResponseSuccess = (operationResponse: any) => {\n  if (!operationResponse.success) {\n    const firstErrorBlob = operationResponse.errors && operationResponse.errors[0];\n    if (firstErrorBlob) {\n      throw gadgetErrorFor(firstErrorBlob);\n    } else {\n      throw new GadgetOperationError(`Gadget API operation not successful.`, \"GGT_UNKNOWN\");\n    }\n  }\n\n  return operationResponse;\n};\n\n// All of these functions only need the data bit, so narrow the type to make it easier to use these functions\ntype Result = Pick<OperationResult<any>, \"data\">;\n\nexport const getHydrator = (response: Result) => {\n  if (response.data?.gadgetMeta?.hydrations) {\n    return new DataHydrator(response.data?.gadgetMeta?.hydrations);\n  }\n};\n\nexport const hydrateRecord = <Shape extends RecordShape = RecordShape>(response: Result, record: any): GadgetRecord<Shape> => {\n  const hydrator = getHydrator(response);\n  if (hydrator) {\n    record = hydrator.apply(record);\n  }\n  return new GadgetRecord<Shape>(record);\n};\n\nexport const hydrateRecordArray = <Shape extends RecordShape = any>(response: Result, records: Array<any>) => {\n  const hydrator = getHydrator(response);\n  if (hydrator) {\n    records = hydrator.apply(records) as any;\n  }\n  return records?.map((record) => new GadgetRecord<Shape>(record));\n};\n\nexport const hydrateConnection = <Shape extends RecordShape = any>(response: Result, connection: { edges: { node: Node }[] }) => {\n  const nodes = connection.edges.map((edge) => edge.node);\n  return hydrateRecordArray<Shape>(response, nodes);\n};\n\nconst objObjType = \"[object Object]\";\nconst stringObjType = \"[object String]\";\n\nexport const toPrimitiveObject = (value: any): any => {\n  if (value != null && typeof value.toJSON === \"function\") value = value.toJSON();\n  if (value === undefined) return undefined;\n  if (value === null) return null;\n  if (typeof value === \"boolean\") return value;\n  if (typeof value === \"string\") return value;\n  if (typeof value === \"number\") return Number.isFinite(value) ? value : null;\n  if (typeof value === \"object\") {\n    if (Array.isArray(value)) {\n      const arr = [];\n\n      for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        arr[i] = v === undefined ? null : toPrimitiveObject(v);\n      }\n\n      return arr;\n    }\n    if (Object.prototype.toString.call(value) === \"[object Error]\") return {};\n    if (Object.prototype.toString.call(value) === objObjType) {\n      const obj: any = {};\n      for (const key of Object.keys(value)) {\n        const parsed = toPrimitiveObject(value[key]);\n        // Remove undefined fields\n        if (parsed !== undefined) obj[key] = parsed;\n      }\n      return obj;\n    }\n  }\n};\n\n/**\n * Get a string representing an error that is an `Error` object or anything else that might be `throw`n\n */\nexport const errorMessage = (error: unknown) => {\n  if (typeof error == \"string\") {\n    return error;\n  } else if (error && (error as any)?.message) {\n    return (error as any).message;\n  } else {\n    return String(error);\n  }\n};\n\n// Gadget Storage Test Key that minifies well\nconst key = \"gstk\";\n\n/** Detect if the window object and window.localStorage or window.sessionStorage objects are functional */\nexport const storageAvailable = (type: \"localStorage\" | \"sessionStorage\") => {\n  try {\n    const storage = window[type];\n    storage.setItem(key, key);\n    storage.removeItem(key);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n// smaller implementation of lodash's isEqual from https://github.com/NickGard/tiny-isequal but made a bit more performant and typesafe\nconst toString = Object.prototype.toString,\n  getPrototypeOf = Object.getPrototypeOf,\n  getOwnProperties = Object.getOwnPropertySymbols\n    ? (c: any) => (Object.keys(c) as any[]).concat(Object.getOwnPropertySymbols(c))\n    : Object.keys;\n\nconst checkEquality = (a: any, b: any, refs: any[]): boolean => {\n  // trivial case: primitives and referentially equal objects\n  if (a === b) return true;\n\n  // if both are null/undefined, the above check would have returned true\n  if (a == null || b == null) return false;\n\n  // check to see if we've seen this reference before; if yes, return true\n  // eslint-disable-next-line lodash/prefer-includes\n  if (refs.indexOf(a) > -1 && refs.indexOf(b) > -1) return true;\n\n  const aType = toString.call(a);\n  const bType = toString.call(b);\n\n  let aElements, bElements, element;\n\n  // save results for circular checks\n  refs.push(a, b);\n\n  // gadget-specific check for _link equality -- this is a special case for GadgetRecord\n  if (aType == objObjType && bType == stringObjType && \"_link\" in a && Object.keys(a).length == 1) {\n    return a._link === b;\n  } else if (bType == objObjType && aType == stringObjType && \"_link\" in b && Object.keys(b).length == 1) {\n    return b._link === a;\n  }\n\n  if (aType != bType) return false; // not the same type of objects\n\n  // for non-null objects, check all custom properties\n  aElements = getOwnProperties(a);\n  bElements = getOwnProperties(b);\n  if (\n    aElements.length != bElements.length ||\n    aElements.some(function (key) {\n      return !checkEquality(a[key], b[key], refs);\n    })\n  ) {\n    return false;\n  }\n\n  switch (aType.slice(8, -1)) {\n    case \"Symbol\":\n      return a.valueOf() == b.valueOf();\n    case \"Date\":\n    case \"Number\":\n      return +a == +b || (+a != +a && +b != +b); // convert Dates to ms, check for NaN\n    case \"RegExp\":\n    case \"Function\":\n    case \"String\":\n    case \"Boolean\":\n      return \"\" + a == \"\" + b;\n    case \"Set\":\n    case \"Map\": {\n      aElements = a.entries();\n      bElements = b.entries();\n      do {\n        element = aElements.next();\n        if (!checkEquality(element.value, bElements.next().value, refs)) {\n          return false;\n        }\n      } while (!element.done);\n      return true;\n    }\n    case \"ArrayBuffer\":\n      (a = new Uint8Array(a)), (b = new Uint8Array(b)); // fall through to be handled as an Array\n    case \"DataView\":\n      (a = new Uint8Array(a.buffer)), (b = new Uint8Array(b.buffer)); // fall through to be handled as an Array\n    case \"Float32Array\":\n    case \"Float64Array\":\n    case \"Int8Array\":\n    case \"Int16Array\":\n    case \"Int32Array\":\n    case \"Uint8Array\":\n    case \"Uint16Array\":\n    case \"Uint32Array\":\n    case \"Uint8ClampedArray\":\n    case \"Arguments\":\n    case \"Array\":\n      if (a.length != b.length) return false;\n      for (element = 0; element < a.length; element++) {\n        if (!(element in a) && !(element in b)) continue; // empty slots are equal\n        // either one slot is empty but not both OR the elements are not equal\n        if (element in a != element in b || !checkEquality(a[element], b[element], refs)) return false;\n      }\n      return true;\n    case \"Object\":\n      return checkEquality(getPrototypeOf(a), getPrototypeOf(b), refs);\n    default:\n      return false;\n  }\n};\n\nexport const isEqual = (a: any, b: any) => checkEquality(a, b, []);\n\n/**\n * Processes the flexible, convenient JS-land inputs for an action to the fully qualified GraphQL API inputs\n * @internal\n **/\nexport const disambiguateActionVariables = (action: AnyActionFunction, variables: Record<string, any> | undefined) => {\n  variables ??= {};\n  if (!(\"hasAmbiguousIdentifier\" in action) && !(\"acceptsModelInput\" in action)) return variables;\n\n  if (action.hasAmbiguousIdentifier) {\n    if (\n      Object.keys(variables).some((key) => key !== \"id\" && !action.paramOnlyVariables?.includes(key) && key !== action.modelApiIdentifier)\n    ) {\n      throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${action.modelApiIdentifier}: { ... } })?`);\n    }\n  }\n\n  let newVariables: Record<string, any>;\n\n  // for backwards compatibilty, actions without the operatesWithRecordIdentity metadata should extract the id from the variables\n  const shouldExtractId = action.operatesWithRecordIdentity ?? true;\n\n  if (action.acceptsModelInput ?? action.hasCreateOrUpdateEffect) {\n    if (\n      action.modelApiIdentifier in variables &&\n      typeof variables[action.modelApiIdentifier] === \"object\" &&\n      variables[action.modelApiIdentifier] != null\n    ) {\n      newVariables = variables;\n    } else {\n      newVariables = {\n        [action.modelApiIdentifier]: {},\n      };\n      for (const [key, value] of Object.entries(variables)) {\n        if (action.paramOnlyVariables?.includes(key)) {\n          newVariables[key] = value;\n        } else {\n          if (key == \"id\" && shouldExtractId) {\n            newVariables.id = value;\n          } else {\n            newVariables[action.modelApiIdentifier][key] = value;\n          }\n        }\n      }\n    }\n  } else {\n    newVariables = variables;\n  }\n\n  return newVariables;\n};\n\n/**\n * Normalizes incoming params from JS land into the variable format the GraphQL API is expecting\n * Some bulk actions take GraphQL variables like `{ids: [\"1\",\"2\",\"3\"]}`, and others take `{inputs: [{field: \"value\"}, {field: \"value\"}]}`. In JS land, we accept the fully qualified variables that look like that, as well as the inner array shorthands.\n **/\nexport const disambiguateBulkActionVariables = (\n  action: ActionFunctionMetadata<any, any, any, any, any, true>,\n  inputs: Record<string, any> | Record<string, any>[] = {}\n) => {\n  if (action.variables[\"ids\"]) {\n    // for actions which accept ids only, normalize the array shorthand into the full GraphQL variables\n    return Array.isArray(inputs) ? { ids: inputs } : inputs;\n  } else {\n    // for actions which accept inputs, normalize each element of the array of inputs, and then normalize arrays into the object form\n    const inputsArray: Record<string, any>[] = (Array.isArray(inputs) ? inputs : inputs.inputs) ?? [];\n    return {\n      inputs: inputsArray.map((input) => disambiguateActionVariables(action, input)),\n    };\n  }\n};\n\n/**\n * Given a set of variables defined with their types and requiredness and whatnot, return the same options with the values for each variable filled in, suitable for passing to one invocation\n */\nexport const setVariableOptionValues = (variableOptions: VariablesOptions, values: Record<string, unknown>) => {\n  const result: VariablesOptions = {};\n  for (const [key, variable] of Object.entries(variableOptions)) {\n    result[key] = { ...variable, value: values[key] };\n  }\n  return result;\n};\n\nexport const namespaceDataPath = (dataPath: string[], namespace?: string[] | string | null) => {\n  if (namespace) {\n    dataPath.unshift(...(Array.isArray(namespace) ? namespace : [namespace]));\n  }\n  return dataPath;\n};\n\n/**\n * Build a selection object to retrieve the hydrations for a model from the `gadgetMeta` API\n **/\nexport const hydrationSelection = (modelApiIdentifier: string, namespace?: string | string[] | null): BuilderFieldSelection => {\n  const fullyQualifiedIdentifier = namespace\n    ? [...(Array.isArray(namespace) ? namespace : [namespace]), modelApiIdentifier].join(\".\")\n    : modelApiIdentifier;\n\n  return {\n    gadgetMeta: {\n      hydrations: Call({ modelName: fullyQualifiedIdentifier }),\n    },\n  };\n};\n\n/**\n * Wrap a field selection in a set of namespaces\n **/\nexport function namespacify(namespace: string[] | string | undefined | null, fields: any) {\n  if (!namespace) return fields;\n  if (!Array.isArray(namespace)) {\n    namespace = [namespace];\n  }\n  if (namespace) {\n    for (let i = namespace.length - 1; i >= 0; i--) {\n      fields = {\n        [namespace[i]]: fields,\n      };\n    }\n  }\n  return fields;\n}\n\nexport const ErrorsSelection: BuilderFieldSelection = {\n  errors: {\n    message: true,\n    code: true,\n    \"... on InvalidRecordError\": {\n      model: {\n        apiIdentifier: true,\n      },\n      validationErrors: {\n        message: true,\n        apiIdentifier: true,\n      },\n    },\n  },\n};\n\n/**\n * Formats error messages into a structured object.\n *\n * @param {Error} error - The error object to format.\n * @returns {Record<string, any>} An object containing formatted error messages.\n *   For InvalidRecordError, it structures validation errors by model and field.\n *   For other errors, it returns a single root message.\n *\n * @example\n * // For an InvalidRecordError:\n * // {\n * //   modelName: {\n * //     fieldName: { message: \"Error message\" }\n * //   }\n * // }\n *\n * @example\n * // For other errors:\n * // {\n * //   root: { message: \"Error message\" }\n * // }\n */\nexport const formatErrorMessages = (error: Error) => {\n  const result: Record<string, any> = {};\n\n  if (\"validationErrors\" in error) {\n    const invalidRecordError = error as InvalidRecordError;\n    for (const validationError of invalidRecordError.validationErrors) {\n      if (invalidRecordError.modelApiIdentifier) {\n        result[invalidRecordError.modelApiIdentifier] ??= {};\n        result[invalidRecordError.modelApiIdentifier][validationError.apiIdentifier] = { message: validationError.message };\n      } else {\n        result[validationError.apiIdentifier] = { message: validationError.message };\n      }\n    }\n  } else {\n    const codeToReplace = \"code\" in error ? `${error.code}: ` : \"\";\n    const message = error.message.replace(codeToReplace, \"\");\n\n    result.root = { message };\n  }\n\n  return result;\n};\n\nconst availableAuthenticationModes = [\n  \"apiKey\",\n  \"browserSession\",\n  \"anonymous\",\n  \"internalAuthToken\",\n  \"internal\",\n  \"custom\",\n] as const satisfies readonly (keyof AuthenticationModeOptions)[];\n\n// Type assertion to ensure all `AuthenticationModeOptions` keys are included in the `availableAuthenticationModes` array\ntype MissingKeys = Exclude<keyof AuthenticationModeOptions, (typeof availableAuthenticationModes)[number]>;\ntype _AssertAllKeysIncluded = [MissingKeys] extends [never] ? true : `Missing keys: ${MissingKeys}`;\nconst _assertAllAuthKeysIncluded: _AssertAllKeysIncluded = true as _AssertAllKeysIncluded;\n\nexport const maybeGetAuthenticationModeOptionsFromConnectionOptions = (\n  options: GadgetConnectionOptions | ClientOptions\n): AuthenticationModeOptions | undefined => {\n  if (\"authenticationMode\" in options) {\n    return options.authenticationMode;\n  }\n\n  return pick(options, availableAuthenticationModes) as AuthenticationModeOptions;\n};\n"]}
{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/use-table/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { ErrorWrapper, GadgetRecord, SortOrder } from \"@gadgetinc/api-client-core\";\nimport type { OperationContext } from \"@urql/core\";\nimport type { ReactNode } from \"react\";\nimport type { GadgetFieldType } from \"../internal/gql/graphql.js\";\nimport type { FieldMetadata, ModelMetadata } from \"../metadata.js\";\nimport type { SearchResult } from \"../useDebouncedSearch.js\";\nimport type { PaginationResult } from \"../useList.js\";\nimport type { RecordSelection } from \"../useSelectedRecordsController.js\";\nimport type { ColumnValueType } from \"../utils.js\";\n\nexport type ColumnType = GadgetFieldType | \"CustomRenderer\";\n\nexport type ColumnsOption = Exclude<TableOptions[\"columns\"], undefined>;\n\nexport type TableSpec = {\n  targetColumns: ColumnsOption;\n  /** Use the `getFieldMetadataByColumnPath` function to get the field metadata by column path for type safety. */\n  fieldMetadataTree: Record<string, FieldMetadata | { $field: FieldMetadata }>;\n  defaultSelection: Record<string, any>;\n};\n\nexport type RelationshipType =\n  | GadgetFieldType.HasMany\n  | GadgetFieldType.HasOne\n  | GadgetFieldType.BelongsTo\n  | GadgetFieldType.HasManyThrough;\n\nexport type TableColumn = {\n  /** Identifier for the column */\n  identifier: string;\n  /** Human-readable header value for the column */\n  header: ReactNode;\n  /** parent relationship type if the parent field is a relationship */\n  relationshipType?: RelationshipType;\n  sortable: boolean;\n  /** For controlling if the time is shown on DateTime cell renderers   */\n  includeTime?: boolean;\n  /** Custom style for the cells in the column */\n  style?: React.CSSProperties;\n} & (\n  | {\n      type: GadgetFieldType;\n      /** Dot-separated path to the field in the record */\n      field: string;\n    }\n  | {\n      type: \"CustomRenderer\";\n      /** Custom render function */\n      render: CustomCellRenderer;\n    }\n);\n\nexport type TableRow = Record<string, ColumnValueType | ReactNode>;\n\nexport interface TableOptions {\n  /**\n   * Whether the table should be searchable.\n   */\n  searchable?: boolean;\n  /**\n   * The number of records to show per page.\n   */\n  pageSize?: number;\n  /**\n   * The initial pagination cursor to control the initial page of records to show.\n   * Pagination cursors are returned from the API.\n   */\n  initialCursor?: string;\n  /**\n   * The initial column sort order that the table will be initialized with.\n   * @example\n   * ```tsx\n   * <AutoTable model={api.user} initialSort={{ id: \"Descending\" }} />\n   * ```\n   */\n  initialSort?: { [column: string]: SortOrder };\n  /**\n   * The columns to show in the table represented as (string | CellDetailColumn | CustomCellColumn)[]\n   * - As a string, this represents the API identifier of the field to display.\n   * - As a CellDetailColumn, this a\n   * - As a CustomCellColumn, this represents a custom column to display.\n   */\n  columns?: (string | CellDetailColumn | CustomCellColumn)[];\n  /**\n   * A string array of API identifiers for model actions to be excluded from the table.\n   */\n  excludeColumns?: string[];\n  /**\n   * The actions to be shown in the table for selected records, represented as (string | ActionCallback)[]\n   * - strings in the array represent the API identifies of actions in the model that can be run on the selected records\n   * - ActionCallback is an object with a label and action property. The action property can be a string representing a model action or a function on that will be called with the selected records\n   */\n  actions?: (string | ActionCallback)[];\n\n  /**\n   * A string array of API identifiers for model actions to be excluded from the table.\n   */\n  excludeActions?: string[];\n}\n\nexport type ActionCallback = {\n  /**\n   * Label for the action\n   */\n  label: string;\n\n  /**\n   * Indicates if the action should be promoted in the table\n   */\n  promoted?: boolean;\n\n  /**\n   * The action to be performed when the action is clicked\n   * - as a string, this represents the API identifier of the action in the model\n   * - as a function, this will be called with the selected records\n   */\n  action: string | ((records: GadgetRecord<any>[]) => any);\n};\n\nexport type TableData<Data> =\n  | {\n      columns: TableColumn[];\n      rows: TableRow[];\n      data: Data;\n      metadata: ModelMetadata;\n    }\n  | {\n      columns: null;\n      rows: null;\n      data: null;\n      metadata: null;\n    };\n\nexport type SortState = {\n  column: string;\n  direction: SortOrder;\n  handleColumnSort: (column: string) => void;\n  setSort: (column: string, direction: SortOrder) => void;\n};\n\nexport type TableResult<Data> = [\n  TableData<Data> & {\n    page: PaginationResult;\n    fetching: boolean;\n    error?: ErrorWrapper;\n    search?: SearchResult;\n    selection: RecordSelection;\n    sort: SortState;\n  },\n  refresh: (opts?: Partial<OperationContext>) => void\n];\n\n/**\n * @deprecated\n */\nexport type RelatedFieldColumn = {\n  field: string;\n  relatedField: string;\n};\n\nexport type CustomCellColumn = {\n  header: ReactNode;\n  render: CustomCellRenderer;\n  style?: React.CSSProperties;\n};\n\nexport type CustomCellRenderer = (props: { record: GadgetRecord<any>; index: number }) => ReactNode;\n\nexport type CellDetailColumn = {\n  header?: ReactNode;\n  field: string;\n  sortable?: boolean;\n  style?: React.CSSProperties;\n};\n\nexport type FieldMetadataWithRelationshipConfig = FieldMetadata & {\n  configuration: Extract<\n    FieldMetadata[\"configuration\"],\n    { __typename: \"GadgetHasOneConfig\" | \"GadgetHasManyConfig\" | \"GadgetBelongsToConfig\" }\n  >;\n};\n"]}
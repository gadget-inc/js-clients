{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/use-table/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { GadgetRecord, SortOrder } from \"@gadgetinc/api-client-core\";\nimport type { OperationContext } from \"@urql/core\";\nimport type { ReactNode } from \"react\";\nimport type { GadgetFieldType } from \"../internal/gql/graphql.js\";\nimport type { FieldMetadata, ModelMetadata } from \"../metadata.js\";\nimport type { SearchResult } from \"../useDebouncedSearch.js\";\nimport type { PaginationResult } from \"../useList.js\";\nimport type { RecordSelection } from \"../useSelectedRecordsController.js\";\nimport type { ColumnValueType, ErrorWrapper } from \"../utils.js\";\n\nexport type ColumnType = GadgetFieldType | \"CustomRenderer\";\n\nexport type ColumnsOption = Exclude<TableOptions[\"columns\"], undefined>;\n\nexport type TableSpec = {\n  targetColumns: ColumnsOption;\n  /** Use the `getFieldMetadataByColumnPath` function to get the field metadata by column path for type safety. */\n  fieldMetadataTree: Record<string, FieldMetadata | { $field: FieldMetadata }>;\n  defaultSelection: Record<string, any>;\n};\n\nexport type RelationshipType =\n  | GadgetFieldType.HasMany\n  | GadgetFieldType.HasOne\n  | GadgetFieldType.BelongsTo\n  | GadgetFieldType.HasManyThrough;\n\nexport type TableColumn = {\n  /** Identifier for the column */\n  identifier: string;\n  /** Human-readable header value for the column */\n  header: string;\n  /** Dot-separated path to the field in the record */\n  field: string;\n  type: ColumnType;\n  /** parent relationship type if the parent field is a relationship */\n  relationshipType?: RelationshipType;\n  sortable: boolean;\n  /** For controlling if the time is shown on DateTime cell renderers   */\n  includeTime?: boolean;\n  /** Custom render function */\n  render?: CustomCellRenderer;\n  /** Custom style for the cells in the column */\n  style?: React.CSSProperties;\n};\n\nexport type TableRow = Record<string, ColumnValueType | ReactNode>;\n\nexport interface TableOptions {\n  pageSize?: number;\n  initialCursor?: string;\n  initialDirection?: \"forward\" | \"backward\";\n  initialSort?: { [column: string]: SortOrder };\n  columns?: (string | CellDetailColumn | CustomCellColumn)[];\n  excludeColumns?: string[];\n  actions?: (string | ActionCallback)[];\n  excludeActions?: string[];\n}\n\nexport type ActionCallback = {\n  label: string;\n  promoted?: boolean;\n  action: string | ((records: GadgetRecord<any>[]) => any);\n};\n\nexport type TableData<Data> =\n  | {\n      columns: TableColumn[];\n      rows: TableRow[];\n      data: Data;\n      metadata: ModelMetadata;\n    }\n  | {\n      columns: null;\n      rows: null;\n      data: null;\n      metadata: null;\n    };\n\nexport type SortState = {\n  column: string;\n  direction: SortOrder;\n  handleColumnSort: (column: string) => void;\n  setSort: (column: string, direction: SortOrder) => void;\n};\n\nexport type TableResult<Data> = [\n  TableData<Data> & {\n    page: PaginationResult;\n    fetching: boolean;\n    error?: ErrorWrapper;\n    search: SearchResult;\n    selection: RecordSelection;\n    sort: SortState;\n  },\n  refresh: (opts?: Partial<OperationContext>) => void\n];\n\n/**\n * @deprecated\n */\nexport type RelatedFieldColumn = {\n  field: string;\n  relatedField: string;\n};\n\nexport type CustomCellColumn = {\n  header: string;\n  render: CustomCellRenderer;\n  style?: React.CSSProperties;\n};\n\nexport type CustomCellRenderer = (props: { record: GadgetRecord<any>; index: number }) => ReactNode;\n\nexport type CellDetailColumn = {\n  header?: string;\n  field: string;\n  sortable?: boolean;\n  style?: React.CSSProperties;\n};\n\nexport type FieldMetadataWithRelationshipConfig = FieldMetadata & {\n  configuration: Extract<\n    FieldMetadata[\"configuration\"],\n    { __typename: \"GadgetHasOneConfig\" | \"GadgetHasManyConfig\" | \"GadgetBelongsToConfig\" }\n  >;\n};\n"]}
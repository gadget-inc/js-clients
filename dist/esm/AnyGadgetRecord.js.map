{"version":3,"file":"AnyGadgetRecord.js","sourceRoot":"","sources":["../../src/AnyGadgetRecord.ts"],"names":[],"mappings":"","sourcesContent":["import type { Jsonify } from \"type-fest\";\n\nexport type RecordShape = Record<string, any> | null | undefined | void;\n\ninterface AnyGadgetRecord_<Shape extends RecordShape> {\n  isEmpty(): boolean;\n  getField(field: string): any;\n  setField<T>(field: string, value: T): T;\n  changes: {\n    (): Record<string, { current: any; previous: any }>;\n    (prop: string): { changed: true; current: any; previous: any } | { changed: false };\n  };\n  changed: {\n    (): boolean;\n    (prop: string): boolean;\n  };\n  toJSON(): Jsonify<Shape>;\n  touch(): void;\n}\n\nexport type AnyGadgetRecord<Shape extends RecordShape> = AnyGadgetRecord_<Shape> & Shape;\n\nexport interface AnyGadgetRecordList<Shape extends RecordShape> extends Array<AnyGadgetRecord<Shape>> {\n  firstOrThrow(): AnyGadgetRecord<Shape>;\n  toJSON(): Jsonify<Shape>[];\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n  startCursor: string;\n  endCursor: string;\n  nextPage(): Promise<AnyGadgetRecordList<Shape>>;\n  previousPage(): Promise<AnyGadgetRecordList<Shape>>;\n}\n"]}
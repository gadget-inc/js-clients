{"version":3,"file":"mockUrqlClient.js","sourceRoot":"","sources":["../../../src/testing/mockUrqlClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { jest } from \"@jest/globals\";\nimport type { Client, GraphQLRequest, OperationContext, OperationResult, OperationResultSource } from \"@urql/core\";\nimport { createRequest, makeErrorResult } from \"@urql/core\";\nimport type { DocumentNode, ExecutionResult, OperationDefinitionNode } from \"graphql\";\nimport type { SubscribePayload, Client as SubscriptionClient, Sink as SubscriptionSink } from \"graphql-ws\";\nimport type { FunctionLike } from \"jest-mock\";\nimport pRetry from \"p-retry\";\nimport type { Sink, Source, Subject } from \"wonka\";\nimport { filter, makeSubject, pipe, subscribe, take, toPromise } from \"wonka\";\n\ntype ActFn = <T>(callback: () => T | Promise<T>) => Promise<T>;\nlet act: ActFn = async (fn) => {\n  return await fn();\n};\n\nconst findLast = <T>(array: readonly T[], predicate: (item: T) => boolean): T | undefined => {\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (predicate(array[i])) {\n      return array[i];\n    }\n  }\n};\n\nconst find = <T>(array: readonly T[], predicate: (item: T) => boolean): T | undefined => {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      return array[i];\n    }\n  }\n};\n\nexport const setAct = (actFn: ActFn) => {\n  act = actFn;\n};\n\n/** Patches a `toPromise` method onto the `Source` passed to it.\n * @param source$ - the Wonka {@link Source} to patch.\n * @returns The passed `source$` with a patched `toPromise` method as a {@link PromisifiedSource}.\n * copied from https://github.com/urql-graphql/urql/blob/656495100ea3861075b70b48516b10914efbcfd6/packages/core/src/utils/streamUtils.ts#L10\n */\nexport function withPromise<T extends OperationResult>(_source$: Source<T>): OperationResultSource<T> {\n  const source$ = ((sink: Sink<T>) => _source$(sink)) as OperationResultSource<T>;\n  source$.toPromise = () =>\n    pipe(\n      source$,\n      filter((result) => !result.stale && !result.hasNext),\n      take(1),\n      toPromise\n    );\n  source$.then = (onResolve, onReject) => source$.toPromise().then(onResolve, onReject);\n  source$.subscribe = (onResult) => subscribe(onResult)(source$);\n  return source$;\n}\n\nexport type MockOperationFn<F extends FunctionLike> = jest.Mock<(...args: any[]) => any> & {\n  subjects: Record<string, Subject<OperationResult>>;\n  /**\n   * Push a response to any subscribed listeners from an `executeXYZ` call in an urql client.\n   *\n   * The key word here is \"subscribed\". If no query/mutation/subscription call has been made yet, the pushed response will be \"dropped\".\n   * One should ensure the appropriate `executeXYZ` call has been made by urql, then call this function.\n   */\n  pushResponse: (key: string, response: Omit<OperationResult, \"operation\">) => void;\n  /**\n   *\n   * Waits for a subject to be created for a given key. This is useful for ensuring waiting in a test for a query or mutation to be run\n   */\n  waitForSubject: (key: string) => Promise<void>;\n};\n\nexport type MockFetchFn = jest.Mock & {\n  requests: { args: any[]; resolve: (response: Response) => void; reject: (error: Error) => void }[];\n  pushResponse: (response: Response) => Promise<void>;\n  waitForRequest: (options?: pRetry.Options) => Promise<void>;\n};\n\nconst $gadgetConnection = Symbol.for(\"gadget/connection\");\n\nexport interface MockUrqlClient extends Client {\n  executeQuery: MockOperationFn<Client[\"executeQuery\"]>;\n  executeMutation: MockOperationFn<Client[\"executeMutation\"]>;\n  executeSubscription: MockOperationFn<Client[\"executeSubscription\"]>;\n  [$gadgetConnection]: {\n    fetch: MockFetchFn;\n  };\n  mockFetch: MockFetchFn;\n  _react?: any;\n}\n\nexport const graphqlDocumentName = (doc: DocumentNode) => {\n  const lastDefinition: OperationDefinitionNode | undefined = findLast(doc.definitions, (d) => d.kind === \"OperationDefinition\") as any;\n  if (lastDefinition) {\n    if (lastDefinition.name) {\n      return lastDefinition.name.value;\n    }\n    const firstSelection = find(lastDefinition.selectionSet.selections, (s) => s.kind === \"Field\") as any;\n    return firstSelection.name.value;\n  }\n};\n\n/**\n * Create a new function for reading/writing to a mock graphql backend\n */\nconst newMockOperationFn = (assertions?: (request: GraphQLRequest) => void) => {\n  const subjects: Record<string, Subject<OperationResult>> = {};\n\n  const fn = jest.fn((request: GraphQLRequest, options?: Partial<OperationContext>) => {\n    const { query } = request;\n\n    const fetchOptions = options?.fetchOptions;\n    const key = graphqlDocumentName(query) ?? \"unknown\";\n\n    subjects[key] ??= makeSubject<OperationResult>();\n\n    if (fetchOptions && typeof fetchOptions != \"function\") {\n      const signal = fetchOptions.signal;\n      if (signal) {\n        signal.addEventListener(\"abort\", () => {\n          subjects[key].next(makeErrorResult(null as any, new Error(\"AbortError\")));\n        });\n      }\n    }\n\n    if (assertions) {\n      assertions(request);\n    }\n\n    return withPromise(subjects[key].source);\n  }) as unknown as MockOperationFn<any>;\n\n  fn.subjects = subjects;\n  fn.pushResponse = (key, response) => {\n    if (!subjects[key]) {\n      throw new Error(`No mock client subject started for key ${key}, options are ${Object.keys(subjects).join(\", \")}`);\n    }\n\n    act(() => {\n      subjects[key].next({\n        operation: null as any,\n        ...response,\n      });\n\n      if (!response.hasNext) {\n        subjects[key].complete();\n        delete subjects[key];\n      }\n    });\n  };\n\n  fn.waitForSubject = async (key: string, options?: pRetry.Options) => {\n    await pRetry(\n      () => {\n        if (subjects[key]) {\n          return;\n        }\n        throw new Error(`No mock client subject started for key ${key}, options are ${Object.keys(subjects).join(\", \")}`);\n      },\n      {\n        ...options,\n        retries: options?.retries ?? 20,\n        minTimeout: options?.minTimeout ?? 10,\n        maxTimeout: options?.maxTimeout ?? 250,\n      }\n    );\n  };\n\n  return fn;\n};\n\n/**\n * Create a new function for reading/writing to a mock graphql backend\n */\nconst newMockFetchFn = () => {\n  const requests: any[] = [];\n\n  const fn = jest.fn((...args) => {\n    return new Promise<Response>((resolve, reject) => {\n      const signal = (args[1] as any)?.signal;\n\n      const request = {\n        args,\n        resolve,\n        reject,\n      };\n\n      if (signal) {\n        signal.addEventListener(\"abort\", () => {\n          const idx = requests.findIndex((r) => r === request);\n          if (idx !== -1) {\n            request.reject(new Error(\"AbortError: The user aborted a request.\"));\n            requests.splice(idx, 1);\n          }\n        });\n      }\n\n      requests.push(request);\n    });\n  }) as unknown as MockFetchFn;\n\n  fn.requests = requests;\n  fn.pushResponse = async (response) => {\n    await act(async () => {\n      const request = requests.shift();\n      if (!request) {\n        throw new Error(\"no requests started for response pushing\");\n      }\n      const signal = request.args[1]?.signal;\n      if (signal && signal.aborted) {\n        throw new Error(\"signal on request has been aborted, can't respond to a mock fetch that has been aborted\");\n      }\n\n      await request.resolve(response);\n    });\n  };\n\n  fn.waitForRequest = async (options?: pRetry.Options) => {\n    const requestCount = requests.length;\n    await act(async () => {\n      await pRetry(\n        async () => {\n          if (requests.length > requestCount) {\n            return;\n          }\n          throw new Error(\"request not found\");\n        },\n        {\n          ...options,\n          retries: options?.retries ?? 20,\n          minTimeout: options?.minTimeout ?? 10,\n          maxTimeout: options?.maxTimeout ?? 250,\n        }\n      );\n    });\n  };\n\n  return fn;\n};\n\nexport const createMockUrqlClient = (assertions?: {\n  mutationAssertions?: (request: GraphQLRequest) => void;\n  queryAssertions?: (request: GraphQLRequest) => void;\n}) => {\n  const fetch = newMockFetchFn();\n\n  return {\n    executeQuery: newMockOperationFn(assertions?.queryAssertions),\n    executeMutation: newMockOperationFn(assertions?.mutationAssertions),\n    executeSubscription: newMockOperationFn(),\n    [$gadgetConnection]: {\n      fetch,\n    },\n    mockFetch: fetch,\n    suspense: true,\n    query(query, variables, context) {\n      return this.executeQuery(createRequest(query, variables), context);\n    },\n\n    subscription(query, variables, context) {\n      return this.executeSubscription(createRequest(query, variables), context);\n    },\n    mutation(query, variables, context) {\n      return this.executeMutation(createRequest(query, variables), context);\n    },\n  } as MockUrqlClient;\n};\n\nexport interface MockSubscription {\n  payload: SubscribePayload;\n  sink: SubscriptionSink<ExecutionResult<any, any>>;\n  push: (result: ExecutionResult<any, any>) => void;\n  disposed: boolean;\n}\nexport type MockSubscribeFn = ((payload: SubscribePayload, sink: SubscriptionSink<ExecutionResult<any, any>>) => () => void) & {\n  subscriptions: MockSubscription[];\n};\n\nexport interface MockGraphQLWSClient extends SubscriptionClient {\n  subscribe: MockSubscribeFn;\n}\n\n/**\n * Create a new function for mocking subscriptions passed to graphql-ws\n */\nfunction newMockSubscribeFn(): MockSubscribeFn {\n  const subscriptions: MockSubscription[] = [];\n\n  const fn: SubscriptionClient[\"subscribe\"] = (payload: SubscribePayload, sink: SubscriptionSink<ExecutionResult<any, any>>) => {\n    const subscription: MockSubscription = {\n      payload,\n      sink,\n      disposed: false,\n      push: (result) => {\n        act(() => {\n          sink.next(result);\n        });\n      },\n    };\n\n    subscriptions.push(subscription);\n\n    return () => {\n      subscription.disposed = true;\n    };\n  };\n\n  return Object.assign(fn, { subscriptions });\n}\n\nexport const mockUrqlClient = createMockUrqlClient();\nexport const mockGraphQLWSClient = {} as MockGraphQLWSClient;\n\nbeforeEach(() => {\n  const fetch = newMockFetchFn();\n\n  mockUrqlClient.executeQuery = newMockOperationFn();\n  mockUrqlClient.executeMutation = newMockOperationFn();\n  mockUrqlClient.executeSubscription = newMockOperationFn();\n  mockUrqlClient[$gadgetConnection] = {\n    fetch,\n  };\n  mockUrqlClient.mockFetch = fetch;\n\n  mockGraphQLWSClient.subscribe = newMockSubscribeFn();\n});\n\nafterEach(() => {\n  // force clear _react, which useQuery sets on the client if not present\n  mockUrqlClient._react = undefined;\n  jest.clearAllMocks();\n});\n"]}
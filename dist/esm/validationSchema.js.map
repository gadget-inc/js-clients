{"version":3,"file":"validationSchema.js","sourceRoot":"","sources":["../../src/validationSchema.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { ISchema } from \"yup\";\nimport { MixedSchema, NumberSchema, StringSchema, array, boolean, date, mixed, number, object, string } from \"yup\";\nimport { fileSizeValidationErrorMessage } from \"./auto/hooks/useFileInputController.js\";\nimport type {\n  GadgetEnumConfig,\n  GadgetGenericFieldValidation,\n  GadgetObjectFieldConfig,\n  GadgetOnlyImageFileFieldValidation,\n  GadgetRangeFieldValidation,\n  GadgetRegexFieldValidation,\n} from \"./internal/gql/graphql.js\";\nimport { GadgetFieldType } from \"./internal/gql/graphql.js\";\nimport type { FieldMetadata } from \"./metadata.js\";\n\nconst validatorForField = (field: FieldMetadata, pathsToValidate: string[] = [], currentFieldPath = \"\") => {\n  let validator;\n  const path = currentFieldPath ? `${currentFieldPath}.${field.apiIdentifier}` : field.apiIdentifier;\n\n  switch (field.fieldType) {\n    case GadgetFieldType.Boolean: {\n      validator = boolean();\n      break;\n    }\n    case GadgetFieldType.Code:\n    case GadgetFieldType.Password:\n    case GadgetFieldType.EncryptedString:\n    case GadgetFieldType.Color:\n    case GadgetFieldType.String: {\n      validator = string();\n      break;\n    }\n    case GadgetFieldType.DateTime: {\n      validator = date();\n      break;\n    }\n    case GadgetFieldType.Email: {\n      validator = string().email();\n      break;\n    }\n    case GadgetFieldType.Url: {\n      validator = string().url();\n      break;\n    }\n    case GadgetFieldType.Enum: {\n      const config = field.configuration as GadgetEnumConfig;\n      if (config.allowOther) {\n        validator = config.allowMultiple ? array(string()) : string();\n      } else {\n        const element = string().oneOf(config.options.map((option) => option.name));\n        validator = config.allowMultiple ? array(element) : element;\n      }\n      break;\n    }\n    case GadgetFieldType.File: {\n      validator = mixed().test(\"is-uploading\", function (value) {\n        const { path, createError } = this;\n        if (isAutoFileFieldValue(value) && value.$uploading) {\n          return createError({ path, message: \"file is still uploading\" });\n        }\n        return true;\n      });\n      break;\n    }\n    case GadgetFieldType.Number: {\n      validator = number();\n      break;\n    }\n    case GadgetFieldType.Id: {\n      validator = string();\n      break;\n    }\n    case GadgetFieldType.Json: {\n      validator = mixed().test(\"is-valid-json\", function (value) {\n        if (typeof value == \"undefined\") return true;\n        const { path, createError } = this;\n\n        if (isFailedJSONParse(value)) {\n          return createError({ path, message: value.error.message });\n        }\n        return true;\n      });\n\n      break;\n    }\n    case GadgetFieldType.RecordState:\n    case GadgetFieldType.Any: {\n      validator = mixed();\n      break;\n    }\n    case GadgetFieldType.Money: {\n      validator = string();\n      break;\n    }\n    case GadgetFieldType.Object: {\n      const config = field.configuration as GadgetObjectFieldConfig;\n      validator = validationSchema(config.fields as any, pathsToValidate, path);\n      break;\n    }\n    case GadgetFieldType.RichText: {\n      validator = object({});\n      break;\n    }\n    case GadgetFieldType.RoleAssignments: {\n      validator = array(string());\n      break;\n    }\n    case GadgetFieldType.Vector: {\n      validator = array(number());\n      break;\n    }\n    case GadgetFieldType.BelongsTo:\n    case GadgetFieldType.HasOne: {\n      // TODO: implement relationship validations\n      validator = object();\n      break;\n    }\n    case GadgetFieldType.HasManyThrough:\n    case GadgetFieldType.HasMany: {\n      // TODO: implement relationship validations\n      validator = array();\n      break;\n    }\n\n    case GadgetFieldType.Array: {\n      validator = array();\n      break;\n    }\n\n    default: {\n      throw new Error(`unknown field type ${field.fieldType} for validator generation`);\n    }\n  }\n\n  validator = applyValidationsToInputField(field, validator, pathsToValidate.includes(path));\n\n  return validator;\n};\n\nconst applyValidationsToInputField = (field: FieldMetadata, validator: any, pathRequiresValidation: boolean) => {\n  if (field.requiredArgumentForInput && pathRequiresValidation) {\n    if (field.fieldType === GadgetFieldType.RichText) {\n      validator = object({ markdown: string().required() });\n    }\n    validator = validator.required(`${field.name} is required`);\n  } else {\n    validator = validator.nullable().default(null);\n  }\n\n  if (!pathRequiresValidation) {\n    return validator;\n  }\n\n  for (const validation of field.configuration.validations) {\n    switch (validation?.__typename) {\n      case \"GadgetRangeFieldValidation\": {\n        const { min, max } = validation as GadgetRangeFieldValidation;\n        if (validator instanceof StringSchema || validator instanceof NumberSchema) {\n          if (min) validator = validator.min(min);\n          if (max) validator = validator.max(max);\n        } else if (field.fieldType === GadgetFieldType.File && validator instanceof MixedSchema) {\n          validator = validator.test(\"is-valid-file-size\", function (value) {\n            const { path, createError } = this;\n\n            if (isAutoFileFieldValue(value) && value.$invalidFileSize) {\n              return createError({\n                path,\n                message: fileSizeValidationErrorMessage(validation, value.$invalidFileSize),\n              });\n            }\n\n            return true;\n          });\n        }\n        break;\n      }\n\n      case \"GadgetRegexFieldValidation\": {\n        const regexValidation = validation as GadgetRegexFieldValidation;\n        if (regexValidation.pattern && validator instanceof StringSchema) {\n          validator = validator.matches(new RegExp(regexValidation.pattern));\n        }\n        break;\n      }\n\n      case \"GadgetOnlyImageFileFieldValidation\": {\n        if (validator instanceof MixedSchema) {\n          validator = validator.test(\"is-valid-image-file\", function (value) {\n            const { allowAnimatedImages } = validation as GadgetOnlyImageFileFieldValidation;\n\n            if (typeof value == \"undefined\") return true;\n            const { path, createError } = this;\n\n            if (isAutoFileFieldValue(value)) {\n              if (!value.mimeType.startsWith(\"image/\")) {\n                return createError({ path, message: `must be a valid image file type; file type was detected as \"${value.mimeType}\"` });\n              }\n\n              if (!allowAnimatedImages && value.mimeType === \"image/gif\") {\n                return createError({ path, message: \"must not be an animated image file\" });\n              }\n            }\n\n            return true;\n          });\n        }\n\n        break;\n      }\n\n      case \"GadgetGenericFieldValidation\": {\n        const { specID } = validation as GadgetGenericFieldValidation;\n        validator = addGadgetGenericFieldValidation(validator, specID);\n        break;\n      }\n    }\n  }\n\n  return validator;\n};\n\nconst addGadgetGenericFieldValidation = (validator: any, validationSpecId: string) => {\n  switch (validationSpecId) {\n    case ColorValidationSpecId: {\n      return validator.matches(colorRegex, \"Must be a color\");\n    }\n\n    case EmailValidationSpecId: {\n      return validator.email();\n    }\n\n    case StrongPasswordValidationSpecId: {\n      return validator.matches(strongPasswordRegex, \"Must contain at least 8 characters, 1 number and 1 special character\");\n    }\n\n    case UrlValidationSpecId: {\n      return validator.url();\n    }\n\n    default: {\n      return validator;\n    }\n  }\n};\n\nconst EmailValidationSpecId = \"gadget/validation/email-address\";\nconst ColorValidationSpecId = \"gadget/validation/color\";\nconst StrongPasswordValidationSpecId = \"gadget/validation/password\";\nconst UrlValidationSpecId = \"gadget/validation/url\";\nexport const RequiredValidationSpecId = \"gadget/validation/required\";\n\nconst colorRegex = new RegExp(/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/);\nconst strongPasswordRegex = new RegExp(\"^(?=.*\\\\d)(?=.*[!@#$%^&*\\\\-=_+\\\\[\\\\]{}|;:'\\\",.<>/?])(.{8,})$\");\n\nexport interface FailedJSONParse {\n  $failedParse: true;\n  error: Error;\n  raw: string;\n}\nexport const isFailedJSONParse = (value: any): value is FailedJSONParse => {\n  return value && typeof value == \"object\" && \"$failedParse\" in value;\n};\n\n/**\n * Build a Yup validation schema given some fields metadata for validating that a data object conforms to the schema at runtime\n */\nexport const validationSchema = (fields: FieldMetadata[], pathsToValidate: string[] = [], currentPath = \"\") => {\n  const validators: Record<string, ISchema<any>> = {};\n  for (const field of fields) {\n    validators[field.apiIdentifier] = validatorForField(field, pathsToValidate, currentPath);\n  }\n  return object(validators);\n};\n\nexport interface AutoFileFieldValue {\n  fileName: string;\n  mimeType: string;\n  url?: string;\n  directUploadToken?: string;\n  $uploading?: boolean;\n  $invalidFileSize?: number;\n}\n\nexport const isAutoFileFieldValue = (value: any): value is AutoFileFieldValue => {\n  return typeof value === \"object\" && value !== null && \"mimeType\" in value && \"fileName\" in value;\n};\n"]}
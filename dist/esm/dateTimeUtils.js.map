{"version":3,"file":"dateTimeUtils.js","sourceRoot":"","sources":["../../src/dateTimeUtils.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,IAAU,EAAE,EAAE;IAClD,IAAI,CAAC,IAAI;QAAE,OAAO,EAAE,CAAC;IAErB,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAChC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAC3D,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAEpD,OAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,EAAE,CAAC;AACnC,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,IAAU,EAAE,WAAoB,EAAE,EAAE;IAC3E,IAAI,CAAC,IAAI;QAAE,OAAO,EAAE,CAAC;IAErB,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE;QAClD,IAAI,EAAE,SAAS;QACf,KAAK,EAAE,OAAO;QACd,GAAG,EAAE,SAAS;KACf,CAAC,CAAC;IAEH,IAAI,WAAW,EAAE,CAAC;QAChB,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE;YAClD,IAAI,EAAE,SAAS;YACf,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;QAEH,OAAO,GAAG,UAAU,IAAI,UAAU,EAAE,CAAC;IACvC,CAAC;;QAAM,OAAO,UAAU,CAAC;AAC3B,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAa,EAAE,EAAE;IAC3C,OAAO,IAAI,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,IAAU,EAAE,QAAgB,EAAQ,EAAE;IACnE,MAAM,GAAG,GAAG,UAAU,CACpB,IAAI,CAAC,WAAW,EAAE,EAClB,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,OAAO,EAAE,EACd,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,UAAU,EAAE,EACjB,IAAI,CAAC,UAAU,EAAE,EACjB,IAAI,CAAC,eAAe,EAAE,CACvB,CAAC,OAAO,EAAE,CAAC;IAEZ,MAAM,kBAAkB,GAAG,eAAe,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAEpE,OAAO,IAAI,IAAI,CAAC,GAAG,GAAG,kBAAkB,CAAC,CAAC;AAC5C,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,IAAU,EAAE,QAAgB,EAAQ,EAAE;IACnE,MAAM,kBAAkB,GAAG,eAAe,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAEjE,MAAM,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,kBAAkB,CAAC,CAAC;IAExD,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;IAE/B,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC;IAE5E,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAEnG,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF,sCAAsC;AACtC,MAAM,QAAQ,GAAG;IACf,QAAQ,EAAE,YAAY;IACtB,SAAS,EAAE,OAAO;IAClB,UAAU,EAAE,eAAe;IAC3B,YAAY,EAAE,0BAA0B;CACzC,CAAC;AAEF,MAAM,sBAAsB,GAA4B,EAAE,CAAC;AAE3D,MAAM,oBAAoB,GAAG,OAAO,CAAC;AACrC,MAAM,sBAAsB,GAAG,KAAK,CAAC;AAErC,MAAM,yBAAyB,GAAG,CAAC,cAAsB,EAAE,EAAE;IAC3D,IAAI,sBAAsB,CAAC,cAAc,CAAC;QAAE,OAAO,IAAI,CAAC;IACxD,IAAI,CAAC;QACH,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,cAAc,EAAE,CAAC,CAAC;QACjE,sBAAsB,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;QAC9C,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,cAAkC,EAAE,IAA+B,EAAE,SAAmB,EAAU,EAAE;IAClI,eAAe;IACf,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,OAAO,CAAC,CAAC;IACX,CAAC;IAED,IAAI;IACJ,IAAI,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACpD,IAAI,KAAK,EAAE,CAAC;QACV,OAAO,CAAC,CAAC;IACX,CAAC;IAED,IAAI,KAAa,CAAC;IAClB,IAAI,cAAsB,CAAC;IAE3B,MAAM;IACN,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACjD,IAAI,KAAK,EAAE,CAAC;QACV,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAE/B,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC;YAC7B,OAAO,GAAG,CAAC;QACb,CAAC;QAED,OAAO,CAAC,CAAC,KAAK,GAAG,oBAAoB,CAAC,CAAC;IACzC,CAAC;IAED,kBAAkB;IAClB,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACnD,IAAI,KAAK,EAAE,CAAC;QACV,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/B,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAEvC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC;YACtC,OAAO,GAAG,CAAC;QACb,CAAC;QAED,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,oBAAoB,GAAG,OAAO,GAAG,sBAAsB,CAAC;QAC3F,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC;IAC7D,CAAC;IAED,MAAM,SAAS,GAAG,CAAC,IAAU,EAAE,MAAc,EAAE,cAAsB,EAAE,EAAE;QACvE,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE/B,kEAAkE;QAClE,IAAI,QAAQ,GAAG,OAAO,GAAG,MAAM,CAAC;QAEhC,uDAAuD;QACvD,MAAM,EAAE,GAAG,UAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,CAAC;QAE1D,8CAA8C;QAC9C,IAAI,MAAM,KAAK,EAAE,EAAE,CAAC;YAClB,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,wDAAwD;QACxD,QAAQ,IAAI,EAAE,GAAG,MAAM,CAAC;QAExB,sDAAsD;QACtD,MAAM,EAAE,GAAG,UAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,CAAC;QAC1D,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YACd,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,gGAAgG;QAChG,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC1B,CAAC,CAAC;IAEF,iBAAiB;IACjB,IAAI,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC;QAC9C,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACpC,MAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEnD,MAAM,MAAM,GAAG,UAAU,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QAEnD,MAAM,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;QAEjF,OAAO,CAAC,WAAW,CAAC;IACtB,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CAAC,KAAa,EAAE,OAAuB,EAAE,EAAE;IAClE,OAAO,CAAC,EAAE,IAAI,KAAK,IAAI,KAAK,IAAI,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,OAAO,IAAI,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC;AAC7F,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,IAAU,EAAE,cAAsB,EAAE,EAAE;IACxD,MAAM,MAAM,GAAG,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IAEpD,yDAAyD;IACzD,MAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IAEjH,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;IAC1B,MAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;IACzB,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;IACvC,OAAO,KAAK,GAAG,IAAI,CAAC;AACtB,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,CAAC,IAAU,EAAE,EAAE;IAC/B,OAAO,UAAU,CACf,IAAI,CAAC,WAAW,EAAE,EAClB,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,OAAO,EAAE,EACd,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,UAAU,EAAE,EACjB,IAAI,CAAC,UAAU,EAAE,EACjB,IAAI,CAAC,eAAe,EAAE,CACvB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CACjB,QAAgB,EAChB,KAAa,EACb,GAAW,EACX,IAAY,EACZ,MAAc,EACd,MAAc,EACd,WAAmB,EACb,EAAE;IACR,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5B,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IAC7C,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IACvD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,CAAC,IAAU,EAAE,QAAgB,EAAY,EAAE;IAChE,MAAM,GAAG,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IACxC,OAAO,eAAe,IAAI,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAClF,CAAC,CAAC;AAEF,MAAM,QAAQ,GAAwC,EAAE,CAAC;AAEzD,MAAM,iBAAiB,GAAG,CAAC,QAAgB,EAAE,EAAE;IAC7C,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;QACxB,wFAAwF;QACxF,MAAM,iBAAiB,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;YACzD,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,kBAAkB;YAC5B,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;YAChB,GAAG,EAAE,SAAS;YACd,IAAI,EAAE,SAAS;YACf,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,SAAS;SAClB,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC;QAChD,MAAM,kBAAkB,GAAG,iBAAiB,KAAK,sBAAsB,IAAI,iBAAiB,KAAK,gCAAgC,CAAC;QAElI,QAAQ,CAAC,QAAQ,CAAC,GAAG,kBAAkB;YACrC,CAAC,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;gBAC/B,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,SAAS;gBAChB,GAAG,EAAE,SAAS;gBACd,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,SAAS;gBACjB,MAAM,EAAE,SAAS;aAClB,CAAC;YACJ,CAAC,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;gBAC/B,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,SAAS;gBAChB,GAAG,EAAE,SAAS;gBACd,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,SAAS;gBACjB,MAAM,EAAE,SAAS;aAClB,CAAC,CAAC;IACT,CAAC;IACD,OAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC5B,CAAC,CAAC;AAEF,MAAM,SAAS,GAAsE;IACnF,IAAI,EAAE,CAAC;IACP,KAAK,EAAE,CAAC;IACR,GAAG,EAAE,CAAC;IACN,IAAI,EAAE,CAAC;IACP,MAAM,EAAE,CAAC;IACT,MAAM,EAAE,CAAC;CACV,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,GAAwB,EAAE,IAAU,EAAE,EAAE;IAC3D,IAAI,CAAC;QACH,MAAM,SAAS,GAAG,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1C,MAAM,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAEzC,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;gBACtB,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACjD,CAAC;QACH,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,YAAY,UAAU,EAAE,CAAC;YAChC,OAAO,CAAC,GAAG,CAAC,CAAC;QACf,CAAC;QACD,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,GAAwB,EAAE,IAAU,EAAE,EAAE;IAC3D,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACnC,oEAAoE;IACpE,MAAM,MAAM,GAAG,yCAAyC,CAAC,IAAI,CAAC,SAAS,CAAE,CAAC;IAC1E,kEAAkE;IAClE,wDAAwD;IACxD,OAAO;QACL,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACvB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACvB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACvB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACvB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACvB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;KACxB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["/**\n * Formats a date object in a \"yyyy-MM-dd\" format\n * Ex: 2000-01-30\n * @param date\n * @returns Formatted date string, if date is undefined, formatShortDateString returns an empty string\n */\nexport const formatShortDateString = (date: Date) => {\n  if (!date) return \"\";\n\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n\n  return `${year}-${month}-${day}`;\n};\n\n/**\n * Formats a date object in a \"LLL d, y K:mm a\" format\n * Ex: Jun 30, 2024 8:00 PM\n * @param date\n * @returns Formatted date string, if date is undefined, formatShortDateString returns an empty string\n */\nexport const formatLongDateTimeString = (date: Date, includeTime: boolean) => {\n  if (!date) return \"\";\n\n  const dateString = date.toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n\n  if (includeTime) {\n    const timeString = date.toLocaleTimeString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n\n    return `${dateString} ${timeString}`;\n  } else return dateString;\n};\n\n/**\n *\n * @param date\n * @returns\n */\nexport const isValidDate = (date: unknown) => {\n  return date instanceof Date && !isNaN(date.getTime());\n};\n\n/**\n * @name zonedTimeToUtc\n * (called \"toZonedTime\" in the original date-fns-tz repo)\n * @category Time Zone Helpers\n * @summary Get the UTC date/time from a date representing local time in a given time zone\n * @author https://github.com/marnusw\n * Taken from https://github.com/marnusw/date-fns-tz\n *\n * @description\n * Returns a date instance with the UTC time of the provided date of which the values\n * represented the local time in the time zone specified. In other words, if the input\n * date represented local time in time zone, the timestamp of the output date will\n * give the equivalent UTC of that local time regardless of the current system time zone.\n *\n * @param date the date with values representing the local time\n * @param timeZone the time zone of this local time, can be an offset or IANA time zone\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am in Los Angeles is 5pm UTC\n * const result = fromZonedTime(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\n * //=> 2014-06-25T17:00:00.000Z\n */\nexport const zonedTimeToUtc = (date: Date, timeZone: string): Date => {\n  const utc = newDateUTC(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    date.getMilliseconds()\n  ).getTime();\n\n  const offsetMilliseconds = tzParseTimezone(timeZone, new Date(utc));\n\n  return new Date(utc + offsetMilliseconds);\n};\n\n/**\n * @name utcToZonedTime\n * (called \"toZonedTime\" in the original date-fns-tz repo)\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n * @author https://github.com/marnusw\n * Taken from https://github.com/marnusw/date-fns-tz\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param date the date with the relevant UTC time\n * @param timeZone the time zone to get local time for, can be an offset or IANA time zone\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n *\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = toZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nexport const utcToZonedTime = (date: Date, timeZone: string): Date => {\n  const offsetMilliseconds = tzParseTimezone(timeZone, date, true);\n\n  const d = new Date(date.getTime() - offsetMilliseconds);\n\n  const resultDate = new Date(0);\n\n  resultDate.setFullYear(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n\n  resultDate.setHours(d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n\n  return resultDate;\n};\n\n// Helper functions for utcToZonedTime\nconst patterns = {\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-]\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/,\n};\n\nconst validIANATimezoneCache: Record<string, boolean> = {};\n\nconst MILLISECONDS_IN_HOUR = 3600000;\nconst MILLISECONDS_IN_MINUTE = 60000;\n\nconst isValidTimezoneIANAString = (timeZoneString: string) => {\n  if (validIANATimezoneCache[timeZoneString]) return true;\n  try {\n    new Intl.DateTimeFormat(undefined, { timeZone: timeZoneString });\n    validIANATimezoneCache[timeZoneString] = true;\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const tzParseTimezone = (timezoneString: string | undefined, date: Date | number | undefined, isUtcDate?: boolean): number => {\n  // Empty string\n  if (!timezoneString) {\n    return 0;\n  }\n\n  // Z\n  let token = patterns.timezoneZ.exec(timezoneString);\n  if (token) {\n    return 0;\n  }\n\n  let hours: number;\n  let absoluteOffset: number;\n\n  // ±hh\n  token = patterns.timezoneHH.exec(timezoneString);\n  if (token) {\n    hours = parseInt(token[1], 10);\n\n    if (!validateTimezone(hours)) {\n      return NaN;\n    }\n\n    return -(hours * MILLISECONDS_IN_HOUR);\n  }\n\n  // ±hh:mm or ±hhmm\n  token = patterns.timezoneHHMM.exec(timezoneString);\n  if (token) {\n    hours = parseInt(token[2], 10);\n    const minutes = parseInt(token[3], 10);\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN;\n    }\n\n    absoluteOffset = Math.abs(hours) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    return token[1] === \"+\" ? -absoluteOffset : absoluteOffset;\n  }\n\n  const fixOffset = (date: Date, offset: number, timezoneString: string) => {\n    const localTS = date.getTime();\n\n    // Our UTC time is just a guess because our offset is just a guess\n    let utcGuess = localTS - offset;\n\n    // Test whether the zone matches the offset for this ts\n    const o2 = calcOffset(new Date(utcGuess), timezoneString);\n\n    // If so, offset didn't change, and we're done\n    if (offset === o2) {\n      return offset;\n    }\n\n    // If not, change the ts by the difference in the offset\n    utcGuess -= o2 - offset;\n\n    // If that gives us the local time we want, we're done\n    const o3 = calcOffset(new Date(utcGuess), timezoneString);\n    if (o2 === o3) {\n      return o2;\n    }\n\n    // If it's different, we're in a hole time. The offset has changed, but we don't adjust the time\n    return Math.max(o2, o3);\n  };\n\n  // IANA time zone\n  if (isValidTimezoneIANAString(timezoneString)) {\n    date = new Date(date || Date.now());\n    const utcDate = isUtcDate ? date : toUtcDate(date);\n\n    const offset = calcOffset(utcDate, timezoneString);\n\n    const fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);\n\n    return -fixedOffset;\n  }\n\n  return NaN;\n};\n\nconst validateTimezone = (hours: number, minutes?: number | null) => {\n  return -23 <= hours && hours <= 23 && (minutes == null || (0 <= minutes && minutes <= 59));\n};\n\nconst calcOffset = (date: Date, timezoneString: string) => {\n  const tokens = tzTokenizeDate(date, timezoneString);\n\n  // ms dropped because it's not provided by tzTokenizeDate\n  const asUTC = newDateUTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5], 0).getTime();\n\n  let asTS = date.getTime();\n  const over = asTS % 1000;\n  asTS -= over >= 0 ? over : 1000 + over;\n  return asUTC - asTS;\n};\n\nconst toUtcDate = (date: Date) => {\n  return newDateUTC(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    date.getMilliseconds()\n  );\n};\n\nconst newDateUTC = (\n  fullYear: number,\n  month: number,\n  day: number,\n  hour: number,\n  minute: number,\n  second: number,\n  millisecond: number\n): Date => {\n  const utcDate = new Date(0);\n  utcDate.setUTCFullYear(fullYear, month, day);\n  utcDate.setUTCHours(hour, minute, second, millisecond);\n  return utcDate;\n};\n\nconst tzTokenizeDate = (date: Date, timeZone: string): number[] => {\n  const dtf = getDateTimeFormat(timeZone);\n  return \"formatToParts\" in dtf ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n};\n\nconst dtfCache: Record<string, Intl.DateTimeFormat> = {};\n\nconst getDateTimeFormat = (timeZone: string) => {\n  if (!dtfCache[timeZone]) {\n    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n    const testDateFormatted = new Intl.DateTimeFormat(\"en-US\", {\n      hourCycle: \"h23\",\n      timeZone: \"America/New_York\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n    }).format(new Date(\"2014-06-25T04:00:00.123Z\"));\n    const hourCycleSupported = testDateFormatted === \"06/25/2014, 00:00:00\" || testDateFormatted === \"‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00\";\n\n    dtfCache[timeZone] = hourCycleSupported\n      ? new Intl.DateTimeFormat(\"en-US\", {\n          hourCycle: \"h23\",\n          timeZone: timeZone,\n          year: \"numeric\",\n          month: \"numeric\",\n          day: \"2-digit\",\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n        })\n      : new Intl.DateTimeFormat(\"en-US\", {\n          hour12: false,\n          timeZone: timeZone,\n          year: \"numeric\",\n          month: \"numeric\",\n          day: \"2-digit\",\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n        });\n  }\n  return dtfCache[timeZone];\n};\n\nconst typeToPos: { [type in keyof Intl.DateTimeFormatPartTypesRegistry]?: number } = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5,\n};\n\nconst partsOffset = (dtf: Intl.DateTimeFormat, date: Date) => {\n  try {\n    const formatted = dtf.formatToParts(date);\n    const filled: number[] = [];\n    for (let i = 0; i < formatted.length; i++) {\n      const pos = typeToPos[formatted[i].type];\n\n      if (pos !== undefined) {\n        filled[pos] = parseInt(formatted[i].value, 10);\n      }\n    }\n    return filled;\n  } catch (error) {\n    if (error instanceof RangeError) {\n      return [NaN];\n    }\n    throw error;\n  }\n};\n\nconst hackyOffset = (dtf: Intl.DateTimeFormat, date: Date) => {\n  const formatted = dtf.format(date);\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted)!;\n  // const [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n  return [\n    parseInt(parsed[3], 10),\n    parseInt(parsed[1], 10),\n    parseInt(parsed[2], 10),\n    parseInt(parsed[4], 10),\n    parseInt(parsed[5], 10),\n    parseInt(parsed[6], 10),\n  ];\n};\n"]}
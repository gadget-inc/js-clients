{"version":3,"file":"useBulkAction.js","sourceRoot":"","sources":["../../src/useBulkAction.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  BulkActionFunction,\n  DefaultSelection,\n  GadgetRecord,\n  LimitToKnownKeys,\n  Select,\n  StubbedActionFunction,\n} from \"@gadgetinc/api-client-core\";\nimport {\n  actionOperation,\n  capitalizeIdentifier,\n  disambiguateBulkActionVariables,\n  get,\n  hydrateRecordArray,\n  namespaceDataPath,\n} from \"@gadgetinc/api-client-core\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport type { OperationContext, UseMutationState } from \"urql\";\nimport { useGadgetMutation } from \"./useGadgetMutation.js\";\nimport { useStructuralMemo } from \"./useStructuralMemo.js\";\nimport type { ActionHookResult, OptionsType } from \"./utils.js\";\nimport { ErrorWrapper } from \"./utils.js\";\n\n/**\n * React hook to run a Gadget model bulk action.\n *\n * @param action any bulk action function from a Gadget manager\n * @param options action options, like selecting the fields in the result\n *\n * @example\n * ```\n * export function BulkFinish(props: { ids: string[]; }) {\n *   const [result, bulkFinish] = useBulkAction(Client.todo.bulkFinish, {\n *     select: {\n *       id: true,\n *     },\n *   });\n *\n *   const onClick = () => ;\n *\n *   return (\n *     <>\n *       {result.error && <>Failed to create user: {result.error.toString()}</>}\n *       {result.fetching && <>Creating user...</>}\n *       {result.data && <>Finished TODOs with ids={props.ids}</>}\n *       <button onClick={() => bulkFinish(ids))}>Bulk finish</button>\n *     </>\n *   );\n * }\n */\nexport const useBulkAction = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends BulkActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends F[\"optionsType\"]\n>(\n  action: F,\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"]>\n): ActionHookResult<\n  F[\"hasReturnType\"] extends true\n    ? any[]\n    : GadgetRecord<\n        Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>\n      >[],\n  Exclude<F[\"variablesType\"], null | undefined>\n> => {\n  useEffect(() => {\n    if (action.type === (\"stubbedAction\" as string)) {\n      const stubbedAction = action as unknown as StubbedActionFunction<GivenOptions>;\n      if (!(\"reason\" in stubbedAction) || !(\"dataPath\" in stubbedAction) || !(\"actionApiIdentifier\" in stubbedAction)) {\n        // Don't dispatch an event if the generated client has not yet been updated with the updated parameters\n        return;\n      }\n\n      const event = new CustomEvent(\"gadget:devharness:stubbedActionError\", {\n        detail: {\n          reason: stubbedAction.reason,\n          action: {\n            functionName: stubbedAction.functionName,\n            actionApiIdentifier: stubbedAction.actionApiIdentifier,\n            modelApiIdentifier: stubbedAction.modelApiIdentifier,\n            dataPath: stubbedAction.dataPath,\n          },\n        },\n      });\n      globalThis.dispatchEvent(event);\n    }\n  }, []);\n\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return actionOperation(\n      action.operationName,\n      action.defaultSelection,\n      action.modelApiIdentifier,\n      action.modelSelectionField,\n      action.variables,\n      memoizedOptions,\n      action.namespace,\n      action.isBulk,\n      action.hasReturnType\n    );\n  }, [action, memoizedOptions]);\n\n  const [result, runMutation] = useGadgetMutation<\n    GadgetRecord<\n      Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>\n    >[],\n    F[\"variablesType\"]\n  >(plan.query);\n\n  const transformedResult = useMemo(() => processResult(result, action), [result, action]);\n\n  return [\n    transformedResult,\n    useCallback(\n      async (inputs: F[\"variablesType\"], context?: Partial<OperationContext>) => {\n        const variables = disambiguateBulkActionVariables(action, inputs);\n\n        const result = await runMutation(variables, {\n          ...context,\n          // Adding the model's additional typename ensures document cache will properly refresh, regardless of whether __typename was selected (and sometimes we can't even select it, like delete actions!)\n          additionalTypenames: [...(context?.additionalTypenames ?? []), capitalizeIdentifier(action.modelApiIdentifier)],\n        });\n        return processResult({ fetching: false, ...result }, action);\n      },\n      [action, runMutation]\n    ),\n  ];\n};\n\nconst processResult = (result: UseMutationState<any, any>, action: BulkActionFunction<any, any, any, any, any>) => {\n  let error = ErrorWrapper.forMaybeCombinedError(result.error);\n  let data = undefined;\n\n  if (result.data && !error) {\n    const dataPath = namespaceDataPath([action.operationName], action.namespace);\n    const mutationData = get(result.data, dataPath);\n\n    if (mutationData) {\n      const isDeleteAction = (action as any).isDeleter;\n      if (!isDeleteAction) {\n        const errors = mutationData[\"errors\"];\n        if (errors && errors[0]) {\n          error = ErrorWrapper.forErrorsResponse(errors, (error as any)?.response);\n        } else {\n          data = action.hasReturnType ? mutationData.results : hydrateRecordArray(result, mutationData[action.modelSelectionField]);\n        }\n      } else {\n        // Delete action\n        data = mutationData;\n      }\n    }\n  }\n  return { ...result, error, data };\n};\n"]}
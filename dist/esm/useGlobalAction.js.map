{"version":3,"file":"useGlobalAction.js","sourceRoot":"","sources":["../../src/useGlobalAction.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAGlD,MAAM,CAAC,IAAI,eAAe,GAAoB,cAAc,CAAC,iBAAiB,EAAE,CAAC,OAAuB,EAAE,SAAoB,EAAE,EAAE;IAChI,eAAe,GAAG,CAAC,MAAM,EAAE,EAAE;QAC3B,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,EAAE;YAC/B,IAAI,MAAM,CAAC,IAAI,KAAM,eAA0B,EAAE,CAAC;gBAChD,MAAM,aAAa,GAAG,MAA+C,CAAC;gBACtE,IAAI,CAAC,CAAC,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,UAAU,IAAI,aAAa,CAAC,EAAE,CAAC;oBACnE,uGAAuG;oBACvG,OAAO;gBACT,CAAC;gBAED,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,sCAAsC,EAAE;oBACpE,MAAM,EAAE;wBACN,MAAM,EAAE,aAAa,CAAC,MAAM;wBAC5B,MAAM,EAAE;4BACN,YAAY,EAAE,aAAa,CAAC,YAAY;4BACxC,mBAAmB,EAAE,aAAa,CAAC,mBAAmB;4BACtD,QAAQ,EAAE,aAAa,CAAC,QAAQ;yBACjC;qBACF;iBACF,CAAC,CAAC;gBACH,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;QACH,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC1C,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;QACvB,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAEb,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,GAAG,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEtE,MAAM,iBAAiB,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QAE3G,OAAO;YACL,iBAAiB;YACjB,OAAO,CAAC,SAAS,CAAC,WAAW,CAC3B,KAAK,EAAE,SAA4C,EAAE,OAAmC,EAAE,EAAE;gBAC1F,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,SAAS,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;gBAC3D,OAAO,aAAa,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,EAAE,EAAE,MAAM,CAAC,CAAC;YAC/D,CAAC,EACD,CAAC,MAAM,EAAE,WAAW,CAAC,CACtB;SACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,aAAa,GAAG,CAAC,MAAkC,EAAE,MAAiC,EAAE,EAAE;IAC9F,OAAO,EAAE,GAAG,MAAM,EAAE,GAAG,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC;AACxD,CAAC,CAAC","sourcesContent":["import type { GlobalActionFunction, StubbedActionFunction } from \"@gadgetinc/core\";\nimport type { OperationContext } from \"@urql/core\";\nimport type { RuntimeAdapter, UseMutationState } from \"./adapter.js\";\nimport { createHookStub } from \"./createHooks.js\";\nimport type { CoreHooks, UseGlobalAction } from \"./types.js\";\n\nexport let useGlobalAction: UseGlobalAction = createHookStub(\"useGlobalAction\", (adapter: RuntimeAdapter, coreHooks: CoreHooks) => {\n  useGlobalAction = (action) => {\n    adapter.framework.useEffect(() => {\n      if (action.type === (\"stubbedAction\" as string)) {\n        const stubbedAction = action as unknown as StubbedActionFunction<any>;\n        if (!(\"reason\" in stubbedAction) || !(\"dataPath\" in stubbedAction)) {\n          // Don't dispatch an event if the generated client has not yet been updated with the updated parameters\n          return;\n        }\n\n        const event = new CustomEvent(\"gadget:devharness:stubbedActionError\", {\n          detail: {\n            reason: stubbedAction.reason,\n            action: {\n              functionName: stubbedAction.functionName,\n              actionApiIdentifier: stubbedAction.actionApiIdentifier,\n              dataPath: stubbedAction.dataPath,\n            },\n          },\n        });\n        globalThis.dispatchEvent(event);\n      }\n    }, []);\n\n    const plan = adapter.framework.useMemo(() => {\n      return action.plan();\n    }, [action]);\n\n    const [result, runMutation] = coreHooks.useGadgetMutation(plan.query);\n\n    const transformedResult = adapter.framework.useMemo(() => processResult(result, action), [result, action]);\n\n    return [\n      transformedResult,\n      adapter.framework.useCallback(\n        async (variables?: (typeof action)[\"variablesType\"], context?: Partial<OperationContext>) => {\n          const result = await runMutation(variables ?? {}, context);\n          return processResult({ fetching: false, ...result }, action);\n        },\n        [action, runMutation]\n      ),\n    ];\n  };\n});\n\nconst processResult = (result: UseMutationState<any, any>, action: GlobalActionFunction<any>) => {\n  return { ...result, ...action.processResult(result) };\n};\n"]}
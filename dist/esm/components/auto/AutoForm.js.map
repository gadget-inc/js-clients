{"version":3,"file":"AutoForm.js","sourceRoot":"","sources":["../../../../src/components/auto/AutoForm.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AAEtD,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAGhC,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAGpD,OAAO,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAyB7D;;GAEG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,QAAoC,EAAE,EAAE;IAC5E,OAAO,OAAO,CAAC,GAAG,EAAE;QAClB,IAAI,CAAC,QAAQ;YAAE,OAAO,SAAS,CAAC;QAChC,OAAO,WAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;IACpE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,QAAoC,EACpC,OAA0C,EACJ,EAAE;IACxC,OAAO,OAAO,CAAC,GAAG,EAAE;QAClB,IAAI,CAAC,QAAQ;YAAE,OAAO,EAAE,CAAC;QACzB,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,KAAK,yBAAyB,CAAC,CAAC;QACjI,MAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,KAAK,yBAAyB,CAAC,CAAC;QAEpI,MAAM,uBAAuB,GAAG,eAAe,CAAC,eAAe,EAAE,OAAc,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAU,CAAC,CAAC;QACvI,MAAM,oBAAoB,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE,CAChE,eAAe,CAAE,WAAW,CAAC,aAAoD,CAAC,MAAa,EAAE,OAAc,CAAC,CAAC,GAAG,CAClH,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,GAAG,WAAW,CAAC,aAAa,IAAI,UAAU,CAAC,aAAa,EAAE,EAAE,UAAU,CAAU,CAClG,CACF,CAAC;QACF,OAAO,CAAC,GAAG,oBAAoB,EAAE,GAAG,uBAAuB,CAAC,CAAC;IAC/D,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC","sourcesContent":["import type { ActionFunction } from \"@gadgetinc/api-client-core\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport type { ReactNode } from \"react\";\nimport { useMemo } from \"react\";\nimport type { GadgetObjectFieldConfig } from \"../../internal/gql/graphql.js\";\nimport type { ActionMetadata, FieldMetadata} from \"../../metadata.js\";\nimport { filterFieldList } from \"../../metadata.js\";\nimport type { RecordIdentifier } from \"../../useActionForm.js\";\nimport type { OptionsType } from \"../../utils.js\";\nimport { validationSchema } from \"../../validationSchema.js\";\n\n/** The props that any <AutoForm/> component accepts */\nexport type AutoFormProps<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"]\n> = {\n  /** Which action this fom will run on submit */\n  action: ActionFunc;\n  /** Which record this action will act on */\n  record?: RecordIdentifier;\n  /** An allowlist of fields to render within the form. Only these fields will be rendered as inputs. */\n  include?: (keyof Options[\"select\"])[];\n  /** An allowlist of fields to render within the form. Only these fields will be rendered as inputs. */\n  fields?: (keyof Options[\"select\"])[];\n  /** A denylist of fields to render within the form. Every field except these fields will be rendered as inputs. */\n  exclude?: string[];\n  /** The label to use for the submit button at the bottom of the form */\n  submitLabel?: ReactNode;\n  /** What to show the user once the form has been submitted successfully */\n  successContent?: ReactNode;\n};\n\n/**\n * React hook for getting the validation schema for a list of fields\n */\nexport const useValidationResolver = (metadata: ActionMetadata | undefined) => {\n  return useMemo(() => {\n    if (!metadata) return undefined;\n    return yupResolver(validationSchema(metadata.action.inputFields));\n  }, [metadata]);\n};\n\n/**\n * React hook for getting a list of fields to use in a form (given include/exclude options)\n */\nexport const useFormFields = (\n  metadata: ActionMetadata | undefined,\n  options: AutoFormProps<any, any, any, any>\n): (readonly [string, FieldMetadata])[] => {\n  return useMemo(() => {\n    if (!metadata) return [];\n    const objectFields = metadata.action.inputFields.filter((field) => field.configuration.__typename === \"GadgetObjectFieldConfig\");\n    const nonObjectFields = metadata.action.inputFields.filter((field) => field.configuration.__typename !== \"GadgetObjectFieldConfig\");\n\n    const includedRootLevelFields = filterFieldList(nonObjectFields, options as any).map((field) => [field.apiIdentifier, field] as const);\n    const includedObjectFields = objectFields.flatMap((objectField) =>\n      filterFieldList((objectField.configuration as unknown as GadgetObjectFieldConfig).fields as any, options as any).map(\n        (innerField) => [`${objectField.apiIdentifier}.${innerField.apiIdentifier}`, innerField] as const\n      )\n    );\n    return [...includedObjectFields, ...includedRootLevelFields];\n  }, [metadata, options]);\n};\n"]}
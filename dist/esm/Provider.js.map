{"version":3,"file":"Provider.js","sourceRoot":"","sources":["../../src/Provider.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,IAAI,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAElE,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEnD,8GAA8G;AAC9G,MAAM,CAAC,MAAM,QAAQ,GAAG,KAAK,IAAI,EAAE;IACjC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;IAC1E,MAAM,iBAAiB,GAAG,MAAM,CAAC,iBAAuE,CAAC;IACzG,IAAI,OAAO,IAAI,iBAAiB,EAAE,CAAC;QACjC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IACD,OAAO,iBAAiB,CAAC,KAAK,CAAC;AACjC,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,EAAE,QAAQ,EAAE,GAAG,EAA2C,EAAE,EAAE;IACrF,wCAAwC;IACxC,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAyB,IAAI,CAAC,CAAC;IAE7E,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,YAAY,GAAG,QAAQ,EAAE,CAAC;YAC1B,eAAe,CAAC,YAAY,CAAC,CAAC;QAChC,CAAC;QAED,GAAG,CAAC,UAAU,CAAC,qBAAqB,CAAC;YACnC,MAAM,EAAE;gBACN,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI;oBAC7B,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC;oBACjC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC1C,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC,CAAC;oBACnD,IAAI,CAAC,OAAO,KAAZ,IAAI,CAAC,OAAO,GAAK,EAAE,EAAC;oBACpB,OAAO,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE,GAAG;wBACjC,IAAI,CAAC,OAAkC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;oBACxD,CAAC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC,kCAAkC,CAAC,MAAM;oBAC7C,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC;oBACjC,MAAM,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;gBAC/C,CAAC;aACF;SACF,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC,CAAC;IAExB,OAAO,oBAAC,kBAAkB,IAAC,GAAG,EAAE,GAAG,IAAG,QAAQ,CAAsB,CAAC;AACvE,CAAC,CAAC","sourcesContent":["import type { AnyClient } from \"@gadgetinc/api-client-core\";\nimport { Provider as GadgetUrqlProvider } from \"@gadgetinc/react\";\nimport type { ReactNode } from \"react\";\nimport React, { useEffect, useState } from \"react\";\n\n/** Get the backend auth token for the current widget using the special __getGadgetAuthTokenV1 backend tool */\nexport const getToken = async () => {\n  const result = await window.openai.callTool(\"__getGadgetAuthTokenV1\", {});\n  const structuredContent = result.structuredContent as { token: string } | { token: null; error: string };\n  if (\"error\" in structuredContent) {\n    throw new Error(structuredContent.error);\n  }\n  return structuredContent.token;\n};\n\n/**\n * React Provider that ChatGPT Apps Widgets should be wrapped in to make calls to the Gadget backend.\n */\nexport const Provider = ({ children, api }: { children: ReactNode; api: AnyClient }) => {\n  // eslint-disable-next-line prefer-const\n  let [tokenPromise, setTokenPromise] = useState<Promise<string> | null>(null);\n\n  useEffect(() => {\n    if (!tokenPromise) {\n      tokenPromise = getToken();\n      setTokenPromise(tokenPromise);\n    }\n\n    api.connection.setAuthenticationMode({\n      custom: {\n        async processFetch(_input, init) {\n          const token = await tokenPromise;\n          const headers = new Headers(init.headers);\n          headers.append(\"Authorization\", `Bearer ${token}`);\n          init.headers ??= {};\n          headers.forEach(function (value, key) {\n            (init.headers as Record<string, string>)[key] = value;\n          });\n        },\n        async processTransactionConnectionParams(params) {\n          const token = await tokenPromise;\n          params.auth = { type: \"custom\", jwt: token };\n        },\n      },\n    });\n  }, [api, tokenPromise]);\n\n  return <GadgetUrqlProvider api={api}>{children}</GadgetUrqlProvider>;\n};\n"]}
{"version":3,"file":"Provider.js","sourceRoot":"","sources":["../../src/Provider.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,IAAI,kBAAkB,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAE5E,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAMnD,MAAM,uBAAuB,GAAG;;;;;;;;;;;CAW/B,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,KAAyF,EAAE,EAAE;IAClH,MAAM,EAAE,cAAc,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;IAE/C,MAAM,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,GAAG,QAAQ,CAA0B;QACpE,KAAK,EAAE,uBAAuB;KAC/B,CAAC,CAAC;IAEH,OAAO,CAAC,KAAK,CAAC,gDAAgD,EAAE;QAC9D,cAAc;QACd,YAAY;QACZ,IAAI;QACJ,QAAQ;QACR,KAAK;KACN,CAAC,CAAC;IAEH,OAAO,0CAAG,KAAK,CAAC,QAAQ,CAAI,CAAC;AAC/B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,EAAE,QAAQ,EAAE,GAAG,EAA2C,EAAE,EAAE;IACrF,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAA0B,IAAI,CAAC,CAAC;IACxE,MAAM,cAAc,GAAG,CAAC,CAAC,QAAQ,CAAC;IAClC,MAAM,EAAE,KAAK,EAAE,GAAG,QAAQ,IAAI,EAAE,CAAC;IACjC,MAAM,OAAO,GAAG,KAAK,EAAE,GAAG,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC;IAEnD,SAAS,CAAC,GAAG,EAAE;QACb,WAAW,CAAC;YACV,KAAK,EAAE,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;SACnD,CAAC,CAAC;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACL,oBAAC,kBAAkB,IAAC,GAAG,EAAE,GAAG;QAC1B,oBAAC,aAAa,IAAC,YAAY,EAAE,OAAO,EAAE,cAAc,EAAE,cAAc,IACjE,QAAQ,CACK,CACG,CACtB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { AnyClient } from \"@gadgetinc/api-client-core\";\nimport { Provider as GadgetUrqlProvider, useQuery } from \"@gadgetinc/react\";\nimport type { ReactNode } from \"react\";\nimport React, { useEffect, useState } from \"react\";\n\ntype ProviderLocation = {\n  query?: URLSearchParams;\n};\n\nconst BigCommerceSessionQuery = `\n  query BigCommerceSession($session: String!) {\n    currentSession {\n      id\n      bigCommerceUserId\n      bigCommerceStore {\n        storeHash\n      }\n      roles\n    }\n  }\n`;\n\nconst InnerProvider = (props: { children: ReactNode; locationLoaded: boolean; sessionToken: string | undefined }) => {\n  const { locationLoaded, sessionToken } = props;\n\n  const [{ data, fetching, error }] = useQuery<{ currentSession: any }>({\n    query: BigCommerceSessionQuery,\n  });\n\n  console.debug(\"[gadget-react-big-commerce] provider rendering\", {\n    locationLoaded,\n    sessionToken,\n    data,\n    fetching,\n    error,\n  });\n\n  return <>{props.children}</>;\n};\n\nexport const Provider = ({ children, api }: { children: ReactNode; api: AnyClient }) => {\n  const [location, setLocation] = useState<ProviderLocation | null>(null);\n  const locationLoaded = !!location;\n  const { query } = location ?? {};\n  const session = query?.get(\"session\") ?? undefined;\n\n  useEffect(() => {\n    setLocation({\n      query: new URLSearchParams(window.location.search),\n    });\n  }, []);\n\n  return (\n    <GadgetUrqlProvider api={api}>\n      <InnerProvider sessionToken={session} locationLoaded={locationLoaded}>\n        {children}\n      </InnerProvider>\n    </GadgetUrqlProvider>\n  );\n};\n"]}
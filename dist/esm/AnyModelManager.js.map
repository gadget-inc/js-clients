{"version":3,"file":"AnyModelManager.js","sourceRoot":"","sources":["../../src/AnyModelManager.ts"],"names":[],"mappings":"","sourcesContent":["import type { AnyConnection } from \"./AnyConnection.js\";\nimport type { AnyGadgetRecord, AnyGadgetRecordList } from \"./AnyGadgetRecord.js\";\n\nexport type AnyModelFinderMetadata = {\n  /** The name of the GraphQL API field that should be called for this operation */\n  operationName: string;\n  /** The model's api identifier */\n  modelApiIdentifier: string;\n  /** What fields to select from the GraphQL API if no explicit selection is passed */\n  defaultSelection: Record<string, any>;\n  /** A namespace this operation is nested in. Absent for old clients or root-namespaced operations */\n  namespace?: string | string[] | null;\n  /** Type-time only type member used for strong typing of finders  */\n  selectionType: any;\n  /** Type-time only type member used for strong typing of finders  */\n  optionsType: any;\n  /** Type-time only type member used for strong typing of finders  */\n  schemaType: any | null;\n};\n\n/**\n * Object representing one model's API in a high level way\n * This is a generic interface. Concrete ones are generated by Gadget, */\nexport interface AnyModelManager {\n  connection: AnyConnection;\n  findOne: ((id: string, options: any) => Promise<AnyGadgetRecord<any>>) & AnyModelFinderMetadata;\n  findMany: ((options: any) => Promise<AnyGadgetRecordList<any>>) & AnyModelFinderMetadata;\n  findFirst: ((options: any) => Promise<AnyGadgetRecord<any>>) & AnyModelFinderMetadata;\n  maybeFindFirst(options: any): Promise<AnyGadgetRecord<any> | null>;\n  maybeFindOne(id: string, options: any): Promise<AnyGadgetRecord<any> | null>;\n}\n"]}
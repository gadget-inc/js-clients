{"version":3,"file":"useGet.js","sourceRoot":"","sources":["../../../src/hooks/useGet.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AAClE,OAAO,EAAE,GAAG,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAEnD,OAAO,EAAE,YAAY,EAAqD,YAAY,EAAE,MAAM,YAAY,CAAC;AAE3G,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,OAAuB,EAAE,SAAoB,EAAE,EAAE;IAC5E,MAAM,MAAM,GAAG,CAMb,OAAmB,EACnB,OAA4E,EAG5E,EAAE;QACF,MAAM,eAAe,GAAG,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC1C,OAAO,gBAAgB,CACrB,OAAO,CAAC,GAAG,CAAC,aAAa,EACzB,SAAS,EACT,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAC5B,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAC9B,eAAe,CAChB,CAAC;QACJ,CAAC,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;QAE/B,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;QACnF,MAAM,QAAQ,GAAG,iBAAiB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAEvF,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC5C,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,MAAM,SAAS,GAAG,SAAS,CAAC,IAAI,IAAI,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAClE,IAAI,SAAS,EAAE,CAAC;gBACd,IAAI,GAAG,aAAa,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YAC7C,CAAC;YACD,MAAM,KAAK,GAAG,YAAY,CAAC,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAElE,OAAO;gBACL,GAAG,SAAS;gBACZ,KAAK;gBACL,IAAI;aACL,CAAC;QACJ,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;QAEzB,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO;QACL;;;;;;;;;;;;;;;;;;;;;;;WAuBG;QACH,MAAM;KACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { GetFunction } from \"../GadgetFunctions.js\";\nimport { GadgetRecord } from \"../GadgetRecord.js\";\nimport { RuntimeAdapter } from \"../adaptors/types.js\";\nimport { CoreHooks } from \"../createHooks.js\";\nimport { findOneOperation, namespaceDataPath } from \"../index.js\";\nimport { get, hydrateRecord } from \"../support.js\";\nimport { DefaultSelection, LimitToKnownKeys, Select } from \"../types.js\";\nimport { ErrorWrapper, OptionsType, ReadHookResult, ReadOperationOptions, useQueryArgs } from \"./utils.js\";\n\nexport const createUseGet = (adapter: RuntimeAdapter, coreHooks: CoreHooks) => {\n  const useGet = <\n    GivenOptions extends OptionsType,\n    SchemaT,\n    F extends GetFunction<GivenOptions, any, SchemaT, any>,\n    Options extends F[\"optionsType\"] & ReadOperationOptions\n  >(\n    manager: { get: F },\n    options?: LimitToKnownKeys<Options, F[\"optionsType\"] & ReadOperationOptions>\n  ): ReadHookResult<\n    GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>\n  > => {\n    const memoizedOptions = coreHooks.useStructuralMemo(options);\n    const plan = adapter.framework.useMemo(() => {\n      return findOneOperation(\n        manager.get.operationName,\n        undefined,\n        manager.get.defaultSelection,\n        manager.get.modelApiIdentifier,\n        memoizedOptions\n      );\n    }, [manager, memoizedOptions]);\n\n    const [rawResult, refresh] = coreHooks.useGadgetQuery(useQueryArgs(plan, options));\n    const dataPath = namespaceDataPath([manager.get.operationName], manager.get.namespace);\n\n    const result = adapter.framework.useMemo(() => {\n      let data = null;\n      const rawRecord = rawResult.data && get(rawResult.data, dataPath);\n      if (rawRecord) {\n        data = hydrateRecord(rawResult, rawRecord);\n      }\n      const error = ErrorWrapper.forMaybeCombinedError(rawResult.error);\n\n      return {\n        ...rawResult,\n        error,\n        data,\n      };\n    }, [rawResult, manager]);\n\n    return [result, refresh];\n  };\n\n  return {\n    /**\n     * Hook that fetches a singleton record for an `api.currentSomething` style model manager. `useGet` fetches one global record, which is most often the current session. `useGet` doesn't require knowing the record's ID in order to fetch it, and instead returns the one current record for the current context.\n     *\n     * @param manager Gadget model manager to use, like `api.currentSomething`\n     * @param options options for selecting the fields in the result\n     *\n     * @example\n     * ```\n     * export function CurrentSession() {\n     *   const [{error, data, fetching}, refresh] = useGet(api.currentSession, {\n     *     select: {\n     *       id: true,\n     *       userId: true,\n     *     },\n     *   });\n     *\n     *   if (error) return <>Error: {error.toString()}</>;\n     *   if (fetching && !data) return <>Fetching...</>;\n     *   if (!data) return <>No current session found</>;\n     *\n     *   return <div>Current session ID={data.id} and userId={data.userId}</div>;\n     * }\n     * ```\n     */\n    useGet,\n  };\n};\n"]}
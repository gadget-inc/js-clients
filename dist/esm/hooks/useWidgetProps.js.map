{"version":3,"file":"useWidgetProps.js","sourceRoot":"","sources":["../../../src/hooks/useWidgetProps.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAEvD;;;;;;;;;;;;;;;GAeG;AACH,MAAM,UAAU,cAAc,CAAoC,YAA4B;IAC5F,MAAM,KAAK,GAAG,eAAe,CAAC,YAAY,CAAM,CAAC;IAEjD,MAAM,QAAQ,GAAG,OAAO,YAAY,KAAK,UAAU,CAAC,CAAC,CAAE,YAA+B,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC;IAEhH,OAAO,KAAK,IAAI,QAAQ,CAAC;AAC3B,CAAC","sourcesContent":["import { useOpenAiGlobal } from \"./useOpenAiGlobal.js\";\n\n/**\n * Hook for accessing the tool output props passed to your ChatGPT app.\n *\n * When ChatGPT invokes your app, it may provide initial data or configuration\n * through the `toolOutput` property. This hook retrieves that data and falls\n * back to a default value if no data is provided.\n *\n * @param defaultState - Default value or function returning default value to use if no tool output is available\n * @returns The tool output props, or the default value if not available\n *\n * @example\n * ```tsx\n * const props = useWidgetProps({ userId: \"unknown\", theme: \"light\" });\n * return <div>User ID: {props.userId}</div>;\n * ```\n */\nexport function useWidgetProps<T extends Record<string, unknown>>(defaultState?: T | (() => T)): T {\n  const props = useOpenAiGlobal(\"toolOutput\") as T;\n\n  const fallback = typeof defaultState === \"function\" ? (defaultState as () => T | null)() : defaultState ?? null;\n\n  return props ?? fallback;\n}\n"]}
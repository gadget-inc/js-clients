{"version":3,"file":"useFindFirst.js","sourceRoot":"","sources":["../../../src/hooks/useFindFirst.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAE,GAAG,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAE1E,OAAO,EAAE,YAAY,EAAqD,YAAY,EAAE,MAAM,YAAY,CAAC;AAE3G,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,OAAuB,EAAE,SAAoB,EAAE,EAAE;IAClF,MAAM,YAAY,GAAG,CAMnB,OAAyB,EACzB,OAA4E,EAG5E,EAAE;QACF,MAAM,YAAY,GAAG,EAAE,GAAG,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,GAAG,SAAS,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QAClE,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC1C,OAAO,iBAAiB,CACtB,OAAO,CAAC,SAAS,CAAC,aAAa,EAC/B,OAAO,CAAC,SAAS,CAAC,gBAAgB,EAClC,OAAO,CAAC,SAAS,CAAC,kBAAkB,EACpC,eAAe,EACf,OAAO,CAAC,SAAS,CAAC,SAAS,CAC5B,CAAC;QACJ,CAAC,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;QAExF,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC5C,MAAM,QAAQ,GAAG,iBAAiB,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YACnG,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;YAC1B,IAAI,IAAI,EAAE,CAAC;gBACT,MAAM,UAAU,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBACjD,IAAI,UAAU,EAAE,CAAC;oBACf,IAAI,GAAG,iBAAiB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrD,CAAC;qBAAM,CAAC;oBACN,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjB,CAAC;YACH,CAAC;YAED,MAAM,KAAK,GAAG,YAAY,CAAC,iBAAiB,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,CAAC;YAElF,OAAO,EAAE,GAAG,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;QACvC,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;QAEjE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3B,CAAC,CAAC;IACF,OAAO;QACL;;;;;;;;;;;;;;;;;;;;;;;WAuBG;QACH,YAAY;KACb,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { FindFirstFunction } from \"../GadgetFunctions.js\";\nimport { GadgetRecord } from \"../GadgetRecord.js\";\nimport { RuntimeAdapter } from \"../adaptors/types.js\";\nimport { CoreHooks } from \"../createHooks.js\";\nimport { findManyOperation } from \"../operationBuilders.js\";\nimport { get, hydrateConnection, namespaceDataPath } from \"../support.js\";\nimport { DefaultSelection, LimitToKnownKeys, Select } from \"../types.js\";\nimport { ErrorWrapper, OptionsType, ReadHookResult, ReadOperationOptions, useQueryArgs } from \"./utils.js\";\n\nexport const createUseFindFirst = (adapter: RuntimeAdapter, coreHooks: CoreHooks) => {\n  const useFindFirst = <\n    GivenOptions extends OptionsType,\n    SchemaT,\n    F extends FindFirstFunction<GivenOptions, any, SchemaT, any>,\n    Options extends F[\"optionsType\"] & ReadOperationOptions\n  >(\n    manager: { findFirst: F },\n    options?: LimitToKnownKeys<Options, F[\"optionsType\"] & ReadOperationOptions>\n  ): ReadHookResult<\n    GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>\n  > => {\n    const firstOptions = { ...options, first: 1 };\n    const memoizedOptions = coreHooks.useStructuralMemo(firstOptions);\n    const plan = adapter.framework.useMemo(() => {\n      return findManyOperation(\n        manager.findFirst.operationName,\n        manager.findFirst.defaultSelection,\n        manager.findFirst.modelApiIdentifier,\n        memoizedOptions,\n        manager.findFirst.namespace\n      );\n    }, [manager, memoizedOptions]);\n    const [rawResult, refresh] = coreHooks.useGadgetQuery(useQueryArgs(plan, firstOptions));\n\n    const result = adapter.framework.useMemo(() => {\n      const dataPath = namespaceDataPath([manager.findFirst.operationName], manager.findFirst.namespace);\n      let data = rawResult.data;\n      if (data) {\n        const connection = get(rawResult.data, dataPath);\n        if (connection) {\n          data = hydrateConnection(rawResult, connection)[0];\n        } else {\n          data = data[0];\n        }\n      }\n\n      const error = ErrorWrapper.errorIfDataAbsent(rawResult, dataPath, options?.pause);\n\n      return { ...rawResult, data, error };\n    }, [manager.findFirst.operationName, options?.pause, rawResult]);\n\n    return [result, refresh];\n  };\n  return {\n    /**\n     * Hook to fetch the first backend record matching a given filter and sort. Returns a standard hook result set with a tuple of the result object with `data`, `fetching`, and `error` keys, and a `refetch` function. `data` will be the first record found if there is one, and null otherwise.\n     *\n     * @param manager Gadget model manager to use\n     * @param options options for filtering and searching records, and selecting the fields in each record of the result\n     *\n     * @example\n     *\n     * ```\n     * export function Users() {\n     *   const [result, refresh] = useFindFirst(api.user, {\n     *     select: {\n     *       name: true,\n     *     },\n     *   });\n     *\n     *   if (result.error) return <>Error: {result.error.toString()}</>;\n     *   if (result.fetching && !result.data) return <>Fetching...</>;\n     *   if (!result.data) return <>No user found</>;\n     *\n     *   return <div>{result.data.name}</div>;\n     * }\n     * ```\n     */\n    useFindFirst,\n  };\n};\n"]}
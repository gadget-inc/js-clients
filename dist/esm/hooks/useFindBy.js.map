{"version":3,"file":"useFindBy.js","sourceRoot":"","sources":["../../../src/hooks/useFindBy.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,uBAAuB,EAAE,MAAM,yBAAyB,CAAC;AAClE,OAAO,EAAE,mBAAmB,EAAE,GAAG,EAAE,qBAAqB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAEtH,OAAO,EAAE,YAAY,EAAqD,YAAY,EAAE,MAAM,YAAY,CAAC;AAE3G,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,OAAuB,EAAE,SAAoB,EAAE,EAAE;IAC/E,MAAM,SAAS,GAAG,CAMhB,MAAS,EACT,KAAa,EACb,OAA4E,EAG5E,EAAE;QACF,MAAM,eAAe,GAAG,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC1C,OAAO,uBAAuB,CAC5B,MAAM,CAAC,aAAa,EACpB,MAAM,CAAC,kBAAkB,EACzB,KAAK,EACL,MAAM,CAAC,gBAAgB,EACvB,MAAM,CAAC,kBAAkB,EACzB,eAAe,EACf,MAAM,CAAC,SAAS,CACjB,CAAC;QACJ,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;QAEnF,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC5C,MAAM,QAAQ,GAAG,iBAAiB,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;YAE7E,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;YAC1B,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,IAAI,IAAI,EAAE,CAAC;gBACT,MAAM,UAAU,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBACjD,IAAI,UAAU,EAAE,CAAC;oBACf,OAAO,GAAG,iBAAiB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;oBACnD,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBACpB,CAAC;YACH,CAAC;YAED,IAAI,KAAK,GAAG,YAAY,CAAC,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAChE,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACvB,KAAK,GAAG,YAAY,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,MAAM,CAAC,kBAAkB,EAAE,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC,CAAC;gBAC9H,CAAC;qBAAM,IAAI,SAAS,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;oBACzC,KAAK,GAAG,YAAY,CAAC,kBAAkB,CACrC,IAAI,mBAAmB,CAAC,GAAG,MAAM,CAAC,kBAAkB,gBAAgB,MAAM,CAAC,kBAAkB,IAAI,KAAK,YAAY,CAAC,CACpH,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,OAAO,EAAE,GAAG,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;QACvC,CAAC,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;QAE/B,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3B,CAAC,CAAC;IACF,OAAO;QACL;;;;;;;;;;;;;;;;;;;;;;WAsBG;QACH,SAAS;KACV,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { FindOneFunction } from \"../GadgetFunctions.js\";\nimport { GadgetRecord } from \"../GadgetRecord.js\";\nimport { RuntimeAdapter } from \"../adaptors/types.js\";\nimport { CoreHooks } from \"../createHooks.js\";\nimport { findOneByFieldOperation } from \"../operationBuilders.js\";\nimport { GadgetNotFoundError, get, getNonUniqueDataError, hydrateConnection, namespaceDataPath } from \"../support.js\";\nimport { DefaultSelection, LimitToKnownKeys, Select } from \"../types.js\";\nimport { ErrorWrapper, OptionsType, ReadHookResult, ReadOperationOptions, useQueryArgs } from \"./utils.js\";\n\nexport const createUseFindBy = (adapter: RuntimeAdapter, coreHooks: CoreHooks) => {\n  const useFindBy = <\n    GivenOptions extends OptionsType,\n    SchemaT,\n    F extends FindOneFunction<GivenOptions, any, SchemaT, any>,\n    Options extends F[\"optionsType\"] & ReadOperationOptions\n  >(\n    finder: F,\n    value: string,\n    options?: LimitToKnownKeys<Options, F[\"optionsType\"] & ReadOperationOptions>\n  ): ReadHookResult<\n    GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>\n  > => {\n    const memoizedOptions = coreHooks.useStructuralMemo(options);\n    const plan = adapter.framework.useMemo(() => {\n      return findOneByFieldOperation(\n        finder.operationName,\n        finder.findByVariableName,\n        value,\n        finder.defaultSelection,\n        finder.modelApiIdentifier,\n        memoizedOptions,\n        finder.namespace\n      );\n    }, [finder, value, memoizedOptions]);\n    const [rawResult, refresh] = coreHooks.useGadgetQuery(useQueryArgs(plan, options));\n\n    const result = adapter.framework.useMemo(() => {\n      const dataPath = namespaceDataPath([finder.operationName], finder.namespace);\n\n      let data = rawResult.data;\n      let records = [];\n      if (data) {\n        const connection = get(rawResult.data, dataPath);\n        if (connection) {\n          records = hydrateConnection(rawResult, connection);\n          data = records[0];\n        }\n      }\n\n      let error = ErrorWrapper.forMaybeCombinedError(rawResult.error);\n      if (!error) {\n        if (records.length > 1) {\n          error = ErrorWrapper.forClientSideError(getNonUniqueDataError(finder.modelApiIdentifier, finder.findByVariableName, value));\n        } else if (rawResult.data && !records[0]) {\n          error = ErrorWrapper.forClientSideError(\n            new GadgetNotFoundError(`${finder.modelApiIdentifier} record with ${finder.findByVariableName}=${value} not found`)\n          );\n        }\n      }\n\n      return { ...rawResult, data, error };\n    }, [rawResult, finder, value]);\n\n    return [result, refresh];\n  };\n  return {\n    /**\n     * Hook to fetch a Gadget record using the `findByXYZ` method of a given model manager. Useful for finding records by key fields which are used for looking up records by. Gadget autogenerates the `findByXYZ` methods on your model managers, and `useFindBy` can only be used with models that have these generated finder functions.\n     *\n     * @param finder `findByXYZ` function from a Gadget manager that will be used\n     * @param value field value of the record to fetch\n     * @param options options for selecting the fields in the result\n     *\n     * @example\n     * ```\n     * export function UserByEmail(props: { email: string }) {\n     *   const [result, refresh] = useFindBy(api.user.findByEmail, props.email, {\n     *     select: {\n     *       name: true,\n     *     },\n     *   });\n     *\n     *   if (result.error) return <>Error: {result.error.toString()}</>;\n     *   if (result.fetching && !result.data) return <>Fetching...</>;\n     *   if (!result.data) return <>No user found with id={props.id}</>;\n     *\n     *   return <div>{result.data.name}</div>;\n     * }\n     */\n    useFindBy,\n  };\n};\n"]}
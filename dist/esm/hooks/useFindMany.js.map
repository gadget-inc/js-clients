{"version":3,"file":"useFindMany.js","sourceRoot":"","sources":["../../../src/hooks/useFindMany.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAI1D,OAAO,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAE,GAAG,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAE1E,OAAO,EAAE,YAAY,EAAkB,YAAY,EAA+C,MAAM,YAAY,CAAC;AAErH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,OAAuB,EAAE,SAAoB,EAAE,EAAE;IACjF,MAAM,WAAW,GAAG,CAMlB,OAAwB,EACxB,OAA4E,EAK5E,EAAE;QACF,MAAM,eAAe,GAAG,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC1C,OAAO,iBAAiB,CACtB,OAAO,CAAC,QAAQ,CAAC,aAAa,EAC9B,OAAO,CAAC,QAAQ,CAAC,gBAAgB,EACjC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,EACnC,eAAe,EACf,OAAO,CAAC,QAAQ,CAAC,SAAS,CAC3B,CAAC;QACJ,CAAC,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;QAE/B,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;QAEnF,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC5C,MAAM,QAAQ,GAAG,iBAAiB,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACjG,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;YAC1B,IAAI,IAAI,EAAE,CAAC;gBACT,MAAM,UAAU,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBACjD,IAAI,UAAU,EAAE,CAAC;oBACf,MAAM,OAAO,GAAG,iBAAiB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;oBACzD,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC,OAAqC,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;gBAC3F,CAAC;YACH,CAAC;YAED,MAAM,KAAK,GAAG,YAAY,CAAC,iBAAiB,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,CAAC;YAElF,OAAO,EAAE,GAAG,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;QACvC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;QAEzC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO;QACL;;;;;;;;;;;;;;;;;;;;;;;WAuBG;QACH,WAAW;KACZ,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { FindManyFunction } from \"../GadgetFunctions.js\";\nimport { GadgetRecordList } from \"../GadgetRecordList.js\";\nimport { AnyModelManager } from \"../ModelManager.js\";\nimport { RuntimeAdapter } from \"../adaptors/types.js\";\nimport { CoreHooks } from \"../createHooks.js\";\nimport { findManyOperation } from \"../operationBuilders.js\";\nimport { get, hydrateConnection, namespaceDataPath } from \"../support.js\";\nimport { DefaultSelection, LimitToKnownKeys, Select } from \"../types.js\";\nimport { ErrorWrapper, ReadHookResult, useQueryArgs, type OptionsType, type ReadOperationOptions } from \"./utils.js\";\n\nexport const createUseFindMany = (adapter: RuntimeAdapter, coreHooks: CoreHooks) => {\n  const useFindMany = <\n    GivenOptions extends OptionsType,\n    SchemaT,\n    F extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n    Options extends F[\"optionsType\"] & ReadOperationOptions\n  >(\n    manager: { findMany: F },\n    options?: LimitToKnownKeys<Options, F[\"optionsType\"] & ReadOperationOptions>\n  ): ReadHookResult<\n    GadgetRecordList<\n      Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>\n    >\n  > => {\n    const memoizedOptions = coreHooks.useStructuralMemo(options);\n    const plan = adapter.framework.useMemo(() => {\n      return findManyOperation(\n        manager.findMany.operationName,\n        manager.findMany.defaultSelection,\n        manager.findMany.modelApiIdentifier,\n        memoizedOptions,\n        manager.findMany.namespace\n      );\n    }, [manager, memoizedOptions]);\n\n    const [rawResult, refresh] = coreHooks.useGadgetQuery(useQueryArgs(plan, options));\n\n    const result = adapter.framework.useMemo(() => {\n      const dataPath = namespaceDataPath([manager.findMany.operationName], manager.findMany.namespace);\n      let data = rawResult.data;\n      if (data) {\n        const connection = get(rawResult.data, dataPath);\n        if (connection) {\n          const records = hydrateConnection(rawResult, connection);\n          data = GadgetRecordList.boot(manager as unknown as AnyModelManager, records, connection);\n        }\n      }\n\n      const error = ErrorWrapper.errorIfDataAbsent(rawResult, dataPath, options?.pause);\n\n      return { ...rawResult, data, error };\n    }, [manager, options?.pause, rawResult]);\n\n    return [result, refresh];\n  };\n\n  return {\n    /**\n     * Hook to fetch a page of Gadget records from the backend, optionally sorted, filtered, searched, and selected from. Returns a standard hook result set with a tuple of the result object with `data`, `fetching`, and `error` keys, and a `refetch` function. `data` will be a `GadgetRecordList` object holding the list of returned records and pagination info.\n     *\n     * @param manager Gadget model manager to use\n     * @param options options for filtering and searching records, and selecting the fields in each record of the result\n     *\n     * @example\n     *\n     * ```\n     * export function Users() {\n     *   const [result, refresh] = useFindMany(api.user, {\n     *     select: {\n     *       name: true,\n     *     },\n     *   });\n     *\n     *   if (result.error) return <>Error: {result.error.toString()}</>;\n     *   if (result.fetching && !result.data) return <>Fetching...</>;\n     *   if (!result.data) return <>No users found</>;\n     *\n     *   return <>{result.data.map((user) => <div>{user.name}</div>)}</>;\n     * }\n     * ```\n     */\n    useFindMany,\n  };\n};\n"]}
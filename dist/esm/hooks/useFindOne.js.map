{"version":3,"file":"useFindOne.js","sourceRoot":"","sources":["../../../src/hooks/useFindOne.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAC;AAC3D,OAAO,EAAE,GAAG,EAAE,aAAa,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAEtE,OAAO,EAAE,YAAY,EAAqD,YAAY,EAAE,MAAM,YAAY,CAAC;AAE3G,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,OAAuB,EAAE,SAAoB,EAAE,EAAE;IAChF,MAAM,UAAU,GAAG,CAMjB,OAAuB,EACvB,EAAU,EACV,OAA4E,EAG5E,EAAE;QACF,MAAM,eAAe,GAAG,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC1C,OAAO,gBAAgB,CACrB,OAAO,CAAC,OAAO,CAAC,aAAa,EAC7B,EAAE,EACF,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAChC,OAAO,CAAC,OAAO,CAAC,kBAAkB,EAClC,eAAe,EACf,OAAO,CAAC,OAAO,CAAC,SAAS,CAC1B,CAAC;QACJ,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,EAAE,eAAe,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;QAEnF,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC5C,MAAM,QAAQ,GAAG,iBAAiB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAE/F,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,IAAI,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAC3D,IAAI,IAAI,EAAE,CAAC;gBACT,IAAI,GAAG,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACxC,CAAC;YACD,MAAM,KAAK,GAAG,YAAY,CAAC,iBAAiB,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,CAAC;YAElF,OAAO,EAAE,GAAG,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;QACvC,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,CAAC,CAAC;QAE/D,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO;QACL;;;;;;;;;;;;;;;;;;;;;;;WAuBG;QACH,UAAU;KACX,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { FindOneFunction } from \"../GadgetFunctions.js\";\nimport { GadgetRecord } from \"../GadgetRecord.js\";\nimport type { RuntimeAdapter } from \"../adaptors/types.js\";\nimport type { CoreHooks } from \"../createHooks.js\";\nimport { findOneOperation } from \"../operationBuilders.js\";\nimport { get, hydrateRecord, namespaceDataPath } from \"../support.js\";\nimport { DefaultSelection, LimitToKnownKeys, Select } from \"../types.js\";\nimport { ErrorWrapper, OptionsType, ReadHookResult, ReadOperationOptions, useQueryArgs } from \"./utils.js\";\n\nexport const createUseFindOne = (adapter: RuntimeAdapter, coreHooks: CoreHooks) => {\n  const useFindOne = <\n    GivenOptions extends OptionsType,\n    SchemaT,\n    F extends FindOneFunction<GivenOptions, any, SchemaT, any>,\n    Options extends F[\"optionsType\"] & ReadOperationOptions\n  >(\n    manager: { findOne: F },\n    id: string,\n    options?: LimitToKnownKeys<Options, F[\"optionsType\"] & ReadOperationOptions>\n  ): ReadHookResult<\n    GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>\n  > => {\n    const memoizedOptions = coreHooks.useStructuralMemo(options);\n    const plan = adapter.framework.useMemo(() => {\n      return findOneOperation(\n        manager.findOne.operationName,\n        id,\n        manager.findOne.defaultSelection,\n        manager.findOne.modelApiIdentifier,\n        memoizedOptions,\n        manager.findOne.namespace\n      );\n    }, [manager, id, memoizedOptions]);\n    const [rawResult, refresh] = coreHooks.useGadgetQuery(useQueryArgs(plan, options));\n\n    const result = adapter.framework.useMemo(() => {\n      const dataPath = namespaceDataPath([manager.findOne.operationName], manager.findOne.namespace);\n\n      let data = rawResult.data && get(rawResult.data, dataPath);\n      if (data) {\n        data = hydrateRecord(rawResult, data);\n      }\n      const error = ErrorWrapper.errorIfDataAbsent(rawResult, dataPath, options?.pause);\n\n      return { ...rawResult, data, error };\n    }, [manager.findOne.operationName, rawResult, options?.pause]);\n\n    return [result, refresh];\n  };\n\n  return {\n    /**\n     * Hook to fetch one Gadget record by `id` from the backend. Returns a standard hook result set with a tuple of the result object with `data`, `fetching`, and `error` keys, and a `refetch` function. `data` will be the record if it was found, and `null` otherwise.\n     *\n     * @param manager Gadget model manager to use\n     * @param id id of the record to fetch\n     * @param options options for selecting the fields in the result\n     *\n     * @example\n     * ```\n     * export function User(props: { id: string }) {\n     *   const [result, refresh] = useFindOne(api.user, props.id, {\n     *     select: {\n     *       name: true,\n     *     },\n     *   });\n     *\n     *   if (result.error) return <>Error: {result.error.toString()}</>;\n     *   if (result.fetching && !result.data) return <>Fetching...</>;\n     *   if (!result.data) return <>No user found with id={props.id}</>;\n     *\n     *   return <div>{result.data.name}</div>;\n     * }\n     * ```\n     */\n    useFindOne,\n  };\n};\n"]}
{"version":3,"file":"AnyConnection.js","sourceRoot":"","sources":["../../src/AnyConnection.ts"],"names":[],"mappings":"","sourcesContent":["import type { Client, CombinedError } from \"@urql/core\";\nimport { AnyErrorWrapper } from \"./AnyErrorWrapper.js\";\nimport { AnyGadgetTransaction, TransactionRun } from \"./AnyGadgetTransaction.js\";\nimport { AnyActionFunction } from \"./GadgetFunctions.js\";\nimport { AnyBackgroundActionHandle, BuildOperationResult, EnqueueBackgroundActionOptions } from \"./types.js\";\n\nexport type AnyConnectionOptions<SubscriptionClientOptionsT extends Record<string, any> = Record<string, any>> = Record<string, any> & {\n  endpoint: string;\n  subscriptionClientOptions?: SubscriptionClientOptionsT;\n};\n\nexport type AnyConnection<OptionsT extends AnyConnectionOptions = AnyConnectionOptions> = {\n  endpoint: string;\n  options: OptionsT;\n  get currentClient(): Client;\n  close(): void;\n  fetch: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>;\n  transaction: {\n    <T extends AnyGadgetTransaction>(options: NonNullable<OptionsT[\"subscriptionClientOptions\"]>, run: TransactionRun<T>): Promise<T>;\n    <T extends AnyGadgetTransaction>(run: TransactionRun<T>): Promise<T>;\n  };\n  enqueue: {\n    plan: (action: AnyActionFunction, options?: EnqueueBackgroundActionOptions<any> | null) => BuildOperationResult;\n    processOptions: (options: EnqueueBackgroundActionOptions<any>) => Record<string, any> | null;\n    processResult: <SchemaT, Action extends AnyActionFunction>(\n      action: Action,\n      data: any,\n      error: CombinedError | undefined\n    ) => { error: AnyErrorWrapper | undefined } & Action[\"isBulk\"] extends true\n      ? { handles: AnyBackgroundActionHandle<SchemaT, Action>[] | null }\n      : { handle: AnyBackgroundActionHandle<SchemaT, Action> | null };\n  };\n};\n"]}
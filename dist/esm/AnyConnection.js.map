{"version":3,"file":"AnyConnection.js","sourceRoot":"","sources":["../../src/AnyConnection.ts"],"names":[],"mappings":"","sourcesContent":["import type { Client } from \"@urql/core\";\nimport type { AnyErrorWrapper } from \"./AnyErrorWrapper.js\";\nimport type { AnyGadgetTransaction, TransactionRun } from \"./AnyGadgetTransaction.js\";\nimport type { AnyActionFunction, AnyBulkActionFunction, FunctionResult } from \"./GadgetFunctions.js\";\nimport type { AnyBackgroundActionHandle, BuildOperationResult, EnqueueBackgroundActionOptions } from \"./types.js\";\n\nexport type AnyConnectionOptions<SubscriptionClientOptionsT extends Record<string, any> = Record<string, any>> = Record<string, any> & {\n  endpoint: string;\n  subscriptionClientOptions?: SubscriptionClientOptionsT;\n};\n\nexport type AnyConnection<OptionsT extends AnyConnectionOptions = AnyConnectionOptions, AuthenticationModeT = any> = {\n  endpoint: string;\n  options: OptionsT;\n  get currentClient(): Client;\n  setAuthenticationMode(authenticationMode?: AuthenticationModeT): void;\n  close(): void;\n  fetch: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>;\n  transaction: {\n    <R, T extends AnyGadgetTransaction = AnyGadgetTransaction>(\n      options: NonNullable<OptionsT[\"subscriptionClientOptions\"]>,\n      run: TransactionRun<R, T>\n    ): Promise<R>;\n    <R, T extends AnyGadgetTransaction = AnyGadgetTransaction>(run: TransactionRun<R, T>): Promise<R>;\n  };\n  enqueue: {\n    plan: (action: AnyActionFunction, options?: EnqueueBackgroundActionOptions<any> | null) => BuildOperationResult;\n    processOptions: (options: EnqueueBackgroundActionOptions<any>) => Record<string, any> | null;\n    processResult: {\n      <SchemaT, Action extends AnyBulkActionFunction>(action: Action, result: FunctionResult): {\n        handles: AnyBackgroundActionHandle<SchemaT, Action>[] | null;\n        error: AnyErrorWrapper | undefined;\n      };\n      <SchemaT, Action extends AnyActionFunction>(action: Action, result: FunctionResult): {\n        handle: AnyBackgroundActionHandle<SchemaT, Action> | null;\n        error: AnyErrorWrapper | undefined;\n      };\n    };\n  };\n};\n"]}
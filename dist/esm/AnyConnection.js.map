{"version":3,"file":"AnyConnection.js","sourceRoot":"","sources":["../../src/AnyConnection.ts"],"names":[],"mappings":"","sourcesContent":["import type { Client } from \"@urql/core\";\nimport { AnyActionFunction } from \"./GadgetFunctions.js\";\nimport { TransactionRun } from \"./GadgetTransaction.js\";\nimport { AnyBackgroundActionHandle, BuildOperationResult, EnqueueBackgroundActionOptions } from \"./types.js\";\n\nexport type AnyConnection<OptionsT extends Record<string, any> = Record<string, any>> = {\n  endpoint: string;\n  options: OptionsT;\n  get currentClient(): Client;\n  close(): void;\n  fetch: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>;\n  transaction: {\n    <T>(options: OptionsT, run: TransactionRun<T>): Promise<T>;\n    <T>(run: TransactionRun<T>): Promise<T>;\n  };\n  enqueue: {\n    plan: (action: AnyActionFunction, options?: EnqueueBackgroundActionOptions<any> | null) => BuildOperationResult;\n    processOptions: (options: EnqueueBackgroundActionOptions<any>) => Record<string, any> | null;\n    createHandle: <SchemaT, Action extends AnyActionFunction>(action: Action, id: string) => AnyBackgroundActionHandle<SchemaT, Action>;\n  };\n};\n"]}
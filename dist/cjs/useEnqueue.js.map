{"version":3,"file":"useEnqueue.js","sourceRoot":"","sources":["../../src/useEnqueue.ts"],"names":[],"mappings":";;;AAEA,qDAAkD;AAGvC,QAAA,UAAU,GAAe,IAAA,+BAAc,EAAC,YAAY,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE;IACtF,kBAAU,GAAG,CAAC,MAAM,EAAE,qBAAqB,EAAE,EAAE;QAC7C,MAAM,kBAAkB,GAAG,SAAS,CAAC,qBAAqB,EAAE,CAAC;QAC7D,MAAM,UAAU,GAAG,SAAS,CAAC,aAAa,EAAE,CAAC;QAC7C,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAExF,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAExE,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;QAE/G,OAAO;YACL,KAAK;YACL,OAAO,CAAC,SAAS,CAAC,WAAW,CAC3B,KAAK,EAAE,KAAuC,EAAE,OAAuD,EAAE,EAAE;gBACzG,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM;oBAC7B,CAAC,CAAC,kBAAkB,CAAC,+BAA+B,CAAC,MAAM,EAAE,KAAK,CAAC;oBACnE,CAAC,CAAC,kBAAkB,CAAC,2BAA2B,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBAElE,MAAM,WAAW,GAAG,EAAE,GAAG,qBAAqB,EAAE,GAAG,OAAO,EAAE,CAAC;gBAC7D,SAAS,CAAC,iBAAiB,GAAG,UAAU,CAAC,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;gBAE7E,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;gBAE3D,OAAO,aAAa,CAAC,UAAU,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,QAAQ,EAAE,EAAE,MAAM,CAAC,CAAC;YAC7E,CAAC,EACD,CAAC,MAAM,EAAE,UAAU,EAAE,WAAW,CAAC,CAClC;SACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,8EAA8E;AAC9E,MAAM,aAAa,GAAG,CACpB,UAAyB,EACzB,SAAqC,EACrC,MAAc,EACY,EAAE;IAC5B,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,EAAE,GAAG,SAAS,CAAC;IACtC,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QAClB,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAC/E,OAAO,EAAE,GAAG,MAAM,EAAE,OAAO,EAAE,KAAK,EAA8B,CAAC;IACnE,CAAC;SAAM,CAAC;QACN,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAC9E,OAAO,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,KAAK,EAA8B,CAAC;IAClE,CAAC;AACH,CAAC,CAAC","sourcesContent":["import type { AnyActionFunction, AnyConnection, EnqueueBackgroundActionOptions } from \"@gadgetinc/core\";\nimport type { UseMutationState } from \"./adapter.js\";\nimport { createHookStub } from \"./createHooks.js\";\nimport type { EnqueueHookState, UseEnqueue } from \"./types.js\";\n\nexport let useEnqueue: UseEnqueue = createHookStub(\"useEnqueue\", (adapter, coreHooks) => {\n  useEnqueue = (action, baseBackgroundOptions) => {\n    const coreImplementation = coreHooks.useCoreImplementation();\n    const connection = coreHooks.useConnection();\n    const plan = adapter.framework.useMemo(() => connection.enqueue.plan(action), [action]);\n\n    const [rawState, runMutation] = coreHooks.useGadgetMutation(plan.query);\n\n    const state = adapter.framework.useMemo(() => processResult(connection, rawState, action), [rawState, action]);\n\n    return [\n      state,\n      adapter.framework.useCallback(\n        async (input: (typeof action)[\"variablesType\"], options?: EnqueueBackgroundActionOptions<typeof action>) => {\n          const variables = action.isBulk\n            ? coreImplementation.disambiguateBulkActionVariables(action, input)\n            : coreImplementation.disambiguateActionVariables(action, input);\n\n          const fullContext = { ...baseBackgroundOptions, ...options };\n          variables.backgroundOptions = connection.enqueue.processOptions(fullContext);\n\n          const rawState = await runMutation(variables, fullContext);\n\n          return processResult(connection, { fetching: false, ...rawState }, action);\n        },\n        [action, connection, runMutation]\n      ),\n    ];\n  };\n});\n\n// /** Processes urql's result object into the fancier Gadget result object */\nconst processResult = <Action extends AnyActionFunction>(\n  connection: AnyConnection,\n  rawResult: UseMutationState<any, any>,\n  action: Action\n): EnqueueHookState<Action> => {\n  const { data, ...result } = rawResult;\n  if (action.isBulk) {\n    const { handles, error } = connection.enqueue.processResult(action, rawResult);\n    return { ...result, handles, error } as EnqueueHookState<Action>;\n  } else {\n    const { handle, error } = connection.enqueue.processResult(action, rawResult);\n    return { ...result, handle, error } as EnqueueHookState<Action>;\n  }\n};\n"]}
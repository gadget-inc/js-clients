{"version":3,"file":"useFocus.js","sourceRoot":"","sources":["../../src/useFocus.tsx"],"names":[],"mappings":";;;AACA,iCAAyC;AAEzC,kDAAkD;AAClD,SAAgB,QAAQ,CACtB,QAA6B;IAE7B,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAC7C,MAAM,CAAC,cAAc,EAAE,cAAc,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IACzD,MAAM,QAAQ,GAAG,IAAA,cAAM,EAAI,IAAI,CAAC,CAAC;IACjC,MAAM,GAAG,GAAG,QAAQ,IAAI,QAAQ,CAAC;IAEjC,MAAM,OAAO,GAAG,CAAC,CAAc,EAAE,EAAE;QACjC,IAAI,CAAC,CAAC;YAAE,OAAO;QACf,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,OAAO,CAAC;QACvC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACf,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,cAAc,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC;IACH,CAAC,CAAC;IACF,MAAM,MAAM,GAAG,CAAC,CAAc,EAAE,EAAE;QAChC,IAAI,CAAC,CAAC;YAAE,OAAO;QACf,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,OAAO,CAAC;QACvC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,cAAc,CAAC,KAAK,CAAC,CAAC;QACxB,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,cAAc,CAAC,CAAC;AAC9D,CAAC;AA1BD,4BA0BC","sourcesContent":["import type { FocusEvent } from \"react\";\nimport { useRef, useState } from \"react\";\n\n/** Used for tracking focus state on an element */\nexport function useFocus<T extends HTMLElement = any>(\n  outerRef?: React.RefObject<T>\n): [boolean, { onFocus: (event?: FocusEvent<T>) => void; onBlur: (event?: FocusEvent<T>) => void; ref: React.RefObject<T> }, boolean] {\n  const [hasFocus, setFocus] = useState(false);\n  const [hasFocusWithin, setFocusWithin] = useState(false);\n  const innerRef = useRef<T>(null);\n  const ref = outerRef ?? innerRef;\n\n  const onFocus = (e?: FocusEvent) => {\n    if (!e) return;\n    const isRef = e.target === ref.current;\n    setFocus(true);\n    if (!isRef) {\n      setFocusWithin(true);\n    }\n  };\n  const onBlur = (e?: FocusEvent) => {\n    if (!e) return;\n    const isRef = e.target === ref.current;\n    setFocus(false);\n    if (!isRef) {\n      setFocusWithin(false);\n    }\n  };\n\n  return [hasFocus, { onFocus, onBlur, ref }, hasFocusWithin];\n}\n"]}
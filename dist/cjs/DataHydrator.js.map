{"version":3,"file":"DataHydrator.js","sourceRoot":"","sources":["../../src/DataHydrator.ts"],"names":[],"mappings":";;;AAAa,QAAA,SAAS,GAAG;IACvB,QAAQ,CAAC,KAAa;QACpB,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;CACF,CAAC;AAQF;;;;GAIG;AACH,MAAa,YAAY;IACvB,YAAqB,IAAmB;QAA5B;;;;mBAAS,IAAI;WAAe;IAAG,CAAC;IAE5C,KAAK,CAAC,MAAmD;QACvD,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzB,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;SAC3D;aAAM;YACL,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SACnC;IACH,CAAC;IAEO,aAAa,CAAC,MAA2B;QAC/C,MAAM,QAAQ,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;QAC/B,KAAK,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACvD,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,KAAK,IAAI,IAAI,EAAE;gBACjB,QAAQ,CAAC,GAAG,CAAC,GAAG,iBAAS,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;aAC5C;SACF;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AArBD,oCAqBC","sourcesContent":["export const Hydrators = {\n  DateTime(value: string) {\n    return new Date(value);\n  },\n};\n\nexport type Hydration = keyof typeof Hydrators;\n\nexport interface HydrationPlan {\n  [key: string]: Hydration;\n}\n\n/**\n * Utility for declaratively transforming object trees.\n * Useful for turning API date strings into real Date objects, etc.\n * Declarative so that the operations it peforms can be serialized.\n */\nexport class DataHydrator {\n  constructor(readonly plan: HydrationPlan) {}\n\n  apply(source: Record<string, any> | Record<string, any>[]) {\n    if (Array.isArray(source)) {\n      return source.map((object) => this.hydrateObject(object));\n    } else {\n      return this.hydrateObject(source);\n    }\n  }\n\n  private hydrateObject(object: Record<string, any>) {\n    const hydrated = { ...object };\n    for (const [key, hydrator] of Object.entries(this.plan)) {\n      const value = hydrated[key];\n      if (value != null) {\n        hydrated[key] = Hydrators[hydrator](value);\n      }\n    }\n    return hydrated;\n  }\n}\n"]}
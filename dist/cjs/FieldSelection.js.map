{"version":3,"file":"FieldSelection.js","sourceRoot":"","sources":["../../src/FieldSelection.ts"],"names":[],"mappings":";;;AAUA;;;;;;IAMI;AACG,MAAM,gCAAgC,GAAG,CAAC,SAAyB,EAAE,eAAe,GAAG,KAAK,EAAE,EAAE;IACrG,MAAM,MAAM,GAAW,EAAE,CAAC;IAC1B,IAAI,eAAe;QAAE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAE/C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QACpD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EAAE;YAC/C,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,IAAA,wCAAgC,EAAC,KAAK,CAAC,EAAE,CAAC,CAAC;SACjE;aAAM,IAAI,KAAK,EAAE;YAChB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;KACF;IAED,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC;AAbW,QAAA,gCAAgC,oCAa3C","sourcesContent":["import type Fields from \"gql-query-builder/build/Fields\";\n\n/**\n * Represents a list of fields selected from a GraphQL API call. Allows nesting, conditional selection.\n * Example: `{ id: true, name: false, richText: { markdown: true, html: false } }`\n **/\nexport interface FieldSelection {\n  [key: string]: boolean | null | undefined | FieldSelection;\n}\n\n/**\n * Converts our nested object format to the arrays of single-key objects that gql-query-builder expects\n * Input: `{ id: true, text: { html: true, markdown: true}}`\n * Output: `[\"id\", { text: [\"html\", \"markdown\"] } ]`\n *\n * __Note__: It's important that any output objects have only one key -- `gql-query-builder` only looks at the first one. To add multiple fields with subselections, return multiple objects in the array.\n **/\nexport const fieldSelectionToGQLBuilderFields = (selection: FieldSelection, includeTypename = false) => {\n  const fields: Fields = [];\n  if (includeTypename) fields.push(\"__typename\");\n\n  for (const [key, value] of Object.entries(selection)) {\n    if (typeof value === \"object\" && value !== null) {\n      fields.push({ [key]: fieldSelectionToGQLBuilderFields(value) });\n    } else if (value) {\n      fields.push(key);\n    }\n  }\n\n  return [...new Set(fields)];\n};\n"]}
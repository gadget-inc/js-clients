{"version":3,"file":"useActionForm.js","sourceRoot":"","sources":["../../src/useActionForm.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ActionFunction, AnyModelManager, GlobalActionFunction } from \"@gadgetinc/api-client-core\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport type { DeepPartial, FieldErrors, FieldValues, UseFormProps } from \"react-hook-form\";\nimport { useForm } from \"react-hook-form\";\nimport { useApi } from \"./GadgetProvider.js\";\nimport type {\n  RecordIdentifier,\n  UseActionFormHookStateData,\n  UseActionFormResult,\n  UseActionFormState,\n  UseActionFormSubmit,\n} from \"./use-action-form/types.js\";\nimport {\n  disambiguateDefaultValues,\n  reshapeDataForGraphqlApi,\n  toDefaultValues,\n  useFindExistingRecord,\n  type OmittedKey,\n} from \"./use-action-form/utils.js\";\nimport { useAction } from \"./useAction.js\";\nimport { useGlobalAction } from \"./useGlobalAction.js\";\nimport type { ErrorWrapper, OptionsType } from \"./utils.js\";\nimport { get, set } from \"./utils.js\";\n\nexport * from \"react-hook-form\";\n\n/**\n * React hook to manage state for a form that calls a Gadget action. `useActionForm` must be passed an action function from an instance of your generated API client library, like `api.user.create`, `api.blogPost.publish` or `api.someGlobalAction`. `useActionForm` returns a `Form` object from `react-hook-form` which can be used to build great form experiences.\n *\n * `useActionForm` manages the Gadget API calls for the form, and handling validation errors returned by the Gadget backend. If your form is for an existing record, `useActionForm` will also fetch the record from the backend and populate the form with the existing values.\n *\n * `useActionForm` doesn't run the action when called. To actually submit the form, call the `submit` function on the returned `Form` object.\n *\n * @see https://react-hook-form.com/\n *\n * @param action an action function from a model manager in your application's client, like `api.user.create`\n * @param options action options, like selecting the fields in the result\n */\nexport const useActionForm = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  ExtraFormVariables extends FieldValues = {},\n  FormContext = any,\n  ActionResultData = UseActionFormHookStateData<ActionFunc>,\n  DefaultValues = ActionFunc[\"variablesType\"] & ExtraFormVariables\n>(\n  action: ActionFunc,\n  options?: Omit<UseFormProps<ActionFunc[\"variablesType\"] & ExtraFormVariables, FormContext>, \"defaultValues\"> & {\n    defaultValues?: DeepPartial<DefaultValues & { [key in OmittedKey]?: any }>;\n    /**\n     * The record identifier to run this action on, if it already exists.\n     * Should be undefined for create actions, or a record ID (or finder) for update / etc actions\n     **/\n    findBy?: RecordIdentifier;\n    /**\n     * Which fields to select on from the record when retrieving it from the backend.\n     */\n    select?: ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> ? ActionFunc[\"optionsType\"][\"select\"] : never;\n    /**\n     * Which fields to send from the form's values when sending it from the backend.\n     * It can be a list of field API identifiers, or a function that takes the form's values and returns a list of field API identifiers.\n     */\n    send?: string[] | ((data: ActionFunc[\"variablesType\"]) => string[]);\n    /**\n     * Called when the form submits\n     */\n    onSubmit?: () => void;\n    /**\n     * Called when the action completes successfully on the backend\n     */\n    onSuccess?: (actionResult: ActionResultData) => void;\n    /**\n     * Called when the form submission errors before sending, during the API call, or if the API call returns an error.\n     */\n    onError?: (error: Error | FieldErrors<ActionFunc[\"variablesType\"]>) => void;\n  }\n): UseActionFormResult<GivenOptions, SchemaT, ActionFunc, ExtraFormVariables, FormContext> => {\n  const api = useApi();\n  const findExistingRecord = !!options?.findBy;\n  const hasSetInitialValues = useRef<boolean>(!findExistingRecord);\n  const isModelAction = \"modelApiIdentifier\" in action;\n\n  // find the existing record if there is one\n  const modelManager = isModelAction ? ((api as any)[action.modelApiIdentifier] as AnyModelManager) : undefined;\n  const [findResult] = useFindExistingRecord(modelManager, options?.findBy || \"1\", {\n    pause: !findExistingRecord,\n    select: options?.select,\n  });\n\n  const isReady = !findExistingRecord || !!findResult.data;\n\n  let defaultValues = options?.defaultValues;\n  if (isModelAction && findResult.data) {\n    const modelDefaultValues = toDefaultValues(action.modelApiIdentifier, findResult.data);\n    defaultValues = action.hasAmbiguousIdentifier\n      ? { ...options?.defaultValues, [action.modelApiIdentifier]: modelDefaultValues }\n      : { ...options?.defaultValues, ...modelDefaultValues, [action.modelApiIdentifier]: modelDefaultValues };\n  }\n\n  let existingRecordId: string | undefined = undefined;\n\n  if (findResult.data?.id) {\n    existingRecordId = findResult.data.id;\n  } else if (defaultValues?.id) {\n    existingRecordId = defaultValues.id;\n  } else if (isModelAction && (defaultValues as any)?.[action.modelApiIdentifier]?.id) {\n    existingRecordId = (defaultValues as any)?.[action.modelApiIdentifier]?.id;\n  }\n\n  // setup the react-hook-form object, passing any options from the props\n\n  const originalFormMethods = useForm<ActionFunc[\"variablesType\"], FormContext>({\n    ...options,\n    defaultValues: toDefaultValues(isModelAction ? action.modelApiIdentifier : undefined, defaultValues),\n  });\n  const { handleSubmit, formState, ...formHook } = originalFormMethods;\n\n  // when the default values arrive from the record find later, reset them into the form. react-hook-form doesn't watch the default values after the first render\n  useEffect(() => {\n    if (isReady && !hasSetInitialValues.current && defaultValues) {\n      hasSetInitialValues.current = true;\n      formHook.reset(defaultValues);\n    }\n  }, [isReady, defaultValues, formHook]);\n\n  // get the action runner to run on submit\n  const [actionResult, runAction] =\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    isModelAction ? useAction(action, { select: options?.select }) : useGlobalAction(action);\n\n  const handleSubmissionError = useCallback(\n    (error: Error | FieldErrors<ActionFunc[\"variablesType\"]>) => {\n      if (\"executionErrors\" in error) {\n        const errorWrapper = error as unknown as ErrorWrapper;\n        const executionErrors = errorWrapper.executionErrors;\n\n        if (executionErrors.length > 0) {\n          for (const executionError of executionErrors) {\n            if (\"validationErrors\" in executionError) {\n              for (const validationError of executionError.validationErrors) {\n                const errorKey = isModelAction\n                  ? `${action.modelApiIdentifier}.${validationError.apiIdentifier}`\n                  : validationError.apiIdentifier;\n                formHook.setError(errorKey as any, {\n                  message: validationError.message,\n                });\n              }\n            } else {\n              const codeToReplace = \"code\" in executionError ? `${executionError.code}: ` : \"\";\n              const message = executionError.message.replace(codeToReplace, \"\");\n\n              formHook.setError(\"root\", { message });\n            }\n          }\n        } else if (errorWrapper.networkError) {\n          formHook.setError(\"root\", { message: errorWrapper.networkError.message });\n        }\n      }\n\n      options?.onError?.(error);\n    },\n    [action, formHook, options, isModelAction]\n  );\n\n  const submit = useCallback(\n    async (event?: React.BaseSyntheticEvent<object, any, any> | undefined) => {\n      let result: any;\n\n      console.log(\"where - form state:\", Array.from((formState.touchedFields as any).values()));\n\n      formHook.clearErrors();\n\n      await handleSubmit(\n        async (data) => {\n          if (isModelAction) {\n            if (!action.hasAmbiguousIdentifier && findResult.data) {\n              data = disambiguateDefaultValues(data, findResult.data, action);\n            }\n\n            data = await reshapeDataForGraphqlApi(api, defaultValues, data);\n          }\n\n          let variables: ActionFunc[\"variablesType\"] = {\n            ...data,\n          };\n\n          if (existingRecordId) {\n            variables.id = existingRecordId;\n          }\n\n          if (options?.send) {\n            const unmasked = variables;\n            variables = {};\n            for (const key of typeof options.send === \"function\" ? options.send(data) : options.send) {\n              set(variables, key, get(unmasked, key));\n            }\n          }\n\n          options?.onSubmit?.();\n\n          console.log(\"where - variables before run action:\", data, variables);\n\n          result = await runAction(variables);\n          if (!result.error) {\n            options?.onSuccess?.(result.data);\n          }\n        },\n        (errors) => {\n          handleSubmissionError(errors);\n        }\n      )(event);\n\n      if (result?.error) {\n        handleSubmissionError(result.error);\n      }\n\n      return result;\n    },\n    [\n      formHook,\n      handleSubmit,\n      action,\n      isModelAction,\n      findResult.data,\n      existingRecordId,\n      options,\n      runAction,\n      api,\n      defaultValues,\n      handleSubmissionError,\n    ]\n  );\n\n  const proxiedFormState = new Proxy(formState, {\n    get: (target, prop) => {\n      if (prop === \"isSubmitting\") {\n        return target.isSubmitting || actionResult.fetching;\n      } else if (prop === \"isSubmitSuccessful\") {\n        return target.isSubmitSuccessful && !actionResult.fetching && !actionResult.error;\n      } else if (prop === \"isLoading\") {\n        return target.isLoading || findResult.fetching;\n      } else {\n        return (target as any)[prop];\n      }\n    },\n  }) as unknown as UseActionFormState<ActionFunc, ActionFunc[\"variablesType\"] & ExtraFormVariables, FormContext>;\n\n  return {\n    ...formHook,\n    formState: proxiedFormState,\n    error: findResult.error || actionResult.error,\n    submit: submit as unknown as UseActionFormSubmit<ActionFunc>,\n    actionData: actionResult.data,\n    originalFormMethods,\n  };\n};\n"]}
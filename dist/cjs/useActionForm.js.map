{"version":3,"file":"useActionForm.js","sourceRoot":"","sources":["../../src/useActionForm.ts"],"names":[],"mappings":"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","sourcesContent":["import { disambiguateActionVariables, type ActionFunction, type GlobalActionFunction } from \"@gadgetinc/api-client-core\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport type { DeepPartial, FieldErrors, FieldValues, UseFormProps } from \"react-hook-form\";\nimport { useForm } from \"react-hook-form\";\nimport { useApi } from \"./GadgetProvider.js\";\nimport type {\n  AnyActionWithId,\n  ContextAwareSelect,\n  RecordIdentifier,\n  UseActionFormHookStateData,\n  UseActionFormResult,\n  UseActionFormState,\n  UseActionFormSubmit,\n} from \"./use-action-form/types.js\";\nimport type { OmittedKey } from \"./use-action-form/utils.js\";\nimport {\n  applyDataMask,\n  disambiguateDefaultValues,\n  getReadOnlyPaths,\n  processDefaultValues,\n  reshapeDataForGraphqlApi,\n  toDefaultValues,\n  transformContextAwareToSelect,\n  useFindExistingRecord,\n} from \"./use-action-form/utils.js\";\nimport { useAction } from \"./useAction.js\";\nimport { useGlobalAction } from \"./useGlobalAction.js\";\nimport type { ErrorWrapper, OptionsType } from \"./utils.js\";\nimport { get, getModelManager, set } from \"./utils.js\";\n\nexport * from \"react-hook-form\";\n\ntype ActionFormOptions<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  ExtraFormVariables extends FieldValues = {},\n  DefaultValues = ActionFunc[\"variablesType\"] & ExtraFormVariables,\n  ActionResultData = UseActionFormHookStateData<ActionFunc>\n> = Omit<UseFormProps<ActionFunc[\"variablesType\"] & ExtraFormVariables, any>, \"defaultValues\"> & {\n  defaultValues?: DeepPartial<DefaultValues & { [key in OmittedKey]?: any }>;\n\n  /**\n   * Which fields to select on from the record when retrieving it from the backend.\n   */\n  select?: ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>\n    ? ContextAwareSelect<ActionFunc[\"optionsType\"][\"select\"]>\n    : never;\n  /**\n   * Which fields to send from the form's values when sending it from the backend.\n   */\n  send?: string[] | (() => string[]);\n  /**\n   * Called when the form submits\n   */\n  onSubmit?: () => void;\n  /**\n   * Called when the action completes successfully on the backend\n   */\n  onSuccess?: (actionResult: ActionResultData) => void;\n  /**\n   * Called when the form submission errors before sending, during the API call, or if the API call returns an error.\n   */\n  onError?: (error: Error | FieldErrors<ActionFunc[\"variablesType\"]>) => void;\n  /**\n   * Enable debug logging for this form\n   */\n  debug?: boolean;\n} & (ActionFunc extends AnyActionWithId<GivenOptions>\n    ? {\n        /**\n         * The record identifier to run this action on, if it already exists.\n         * Should be undefined for create actions, or a record ID (or finder) for update / etc actions\n         **/\n        findBy?: RecordIdentifier;\n        /**\n         * If false, don't throw an error if the the given findBy value is an invalid object\n         */\n        throwOnInvalidFindByObject?: boolean;\n      }\n    : // eslint-disable-next-line @typescript-eslint/ban-types\n      {});\n\n/**\n * React hook to manage state for a form that calls a Gadget action. `useActionForm` must be passed an action function from an instance of your generated API client library, like `api.user.create`, `api.blogPost.publish` or `api.someGlobalAction`. `useActionForm` returns a `Form` object from `react-hook-form` which can be used to build great form experiences.\n *\n * `useActionForm` manages the Gadget API calls for the form, and handling validation errors returned by the Gadget backend. If your form is for an existing record, `useActionForm` will also fetch the record from the backend and populate the form with the existing values.\n *\n * `useActionForm` doesn't run the action when called. To actually submit the form, call the `submit` function on the returned `Form` object.\n *\n * @see https://react-hook-form.com/\n *\n * @param action an action function from a model manager in your application's client, like `api.user.create`\n * @param options action options, like selecting the fields in the result\n */\nexport const useActionForm = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  ExtraFormVariables extends FieldValues = {},\n  FormContext = any\n>(\n  action: ActionFunc,\n  options?: ActionFormOptions<GivenOptions, SchemaT, ActionFunc, ExtraFormVariables>\n): UseActionFormResult<GivenOptions, SchemaT, ActionFunc, ExtraFormVariables, FormContext> => {\n  const findById = options && \"findBy\" in options ? options.findBy : undefined;\n  const throwOnInvalidFindByObject = options && \"findBy\" in options ? options?.throwOnInvalidFindByObject ?? true : true;\n  const api = useApi();\n  const findExistingRecord = !!findById;\n  const hasSetInitialValues = useRef<boolean>(!findExistingRecord);\n  const isModelAction = \"modelApiIdentifier\" in action;\n  const actionSelect = options?.select ? transformContextAwareToSelect(options.select) : undefined;\n\n  // find the existing record if there is one\n  const modelManager = isModelAction ? getModelManager(api, action.modelApiIdentifier, action.namespace) : undefined;\n  const [findResult] = useFindExistingRecord(modelManager, findById || \"1\", {\n    pause: !findExistingRecord,\n    select: actionSelect,\n    throwOnInvalidFindByObject,\n  });\n\n  const isReady = !findExistingRecord || !!findResult.data;\n\n  let defaultValues = options?.defaultValues;\n  if (isModelAction && findResult.data) {\n    defaultValues = processDefaultValues({\n      hasAmbiguousDefaultValues: action.hasAmbiguousIdentifier ?? false,\n      modelApiIdentifier: action.modelApiIdentifier,\n      defaultValues: options?.defaultValues,\n      data: findResult.data,\n    });\n  }\n\n  let existingRecordId: string | undefined = undefined;\n\n  if (findResult.data?.id) {\n    existingRecordId = findResult.data.id;\n  } else if (defaultValues?.id) {\n    existingRecordId = defaultValues.id;\n  } else if (isModelAction && (defaultValues as any)?.[action.modelApiIdentifier]?.id) {\n    existingRecordId = (defaultValues as any)?.[action.modelApiIdentifier]?.id;\n  }\n\n  // setup the react-hook-form object, passing any options from the props\n\n  const originalFormMethods = useForm<ActionFunc[\"variablesType\"], FormContext>({\n    ...options,\n    defaultValues: toDefaultValues(isModelAction ? action.modelApiIdentifier : undefined, defaultValues),\n  });\n  const { handleSubmit, formState, ...formHook } = originalFormMethods;\n\n  // when the default values arrive from the record find later, reset them into the form. react-hook-form doesn't watch the default values after the first render\n  useEffect(() => {\n    if (isReady && !hasSetInitialValues.current && defaultValues) {\n      hasSetInitialValues.current = true;\n      formHook.reset(defaultValues);\n    }\n  }, [isReady, defaultValues, formHook]);\n\n  // get the action runner to run on submit\n  const [actionResult, runAction] =\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    isModelAction ? useAction(action, { select: actionSelect }) : useGlobalAction(action);\n\n  const handleSubmissionError = useCallback(\n    (error: Error | FieldErrors<ActionFunc[\"variablesType\"]>) => {\n      if (\"executionErrors\" in error) {\n        const errorWrapper = error as unknown as ErrorWrapper;\n        const executionErrors = errorWrapper.executionErrors;\n\n        if (executionErrors.length > 0) {\n          for (const executionError of executionErrors) {\n            if (\"validationErrors\" in executionError) {\n              for (const validationError of executionError.validationErrors) {\n                const errorKey = isModelAction\n                  ? `${action.modelApiIdentifier}.${validationError.apiIdentifier}`\n                  : validationError.apiIdentifier;\n                formHook.setError(errorKey as any, {\n                  message: validationError.message,\n                });\n              }\n            } else {\n              const codeToReplace = \"code\" in executionError ? `${executionError.code}: ` : \"\";\n              const message = executionError.message.replace(codeToReplace, \"\");\n\n              formHook.setError(\"root\", { message });\n            }\n          }\n        } else if (errorWrapper.networkError) {\n          formHook.setError(\"root\", { message: errorWrapper.networkError.message });\n        }\n      }\n\n      options?.onError?.(error);\n    },\n    [action, formHook, options, isModelAction]\n  );\n\n  const submit = useCallback(\n    async (event?: React.BaseSyntheticEvent<object, any, any> | undefined) => {\n      let result: any;\n\n      formHook.clearErrors();\n\n      await handleSubmit(\n        async (data) => {\n          if (options?.debug) {\n            console.debug(\"[useActionForm] form submitted\", {\n              hasAmbiguousIdentifier: isModelAction && action.hasAmbiguousIdentifier,\n              existingRecordId,\n              defaultValues,\n              data,\n              findResultData: findResult.data,\n            });\n          }\n\n          if (isModelAction) {\n            if (!action.hasAmbiguousIdentifier) {\n              if (findResult.data) {\n                // if we fetched initial data, we can detect which set of data changed, either the shorthand or fully qualified form. disambiguate using the data aware disambiguator\n                data = disambiguateDefaultValues(data, findResult.data, action);\n              } else {\n                // if we didn't fetch initial data, the data won't be in both the shorthand and longhand spots, so use the normal variables disambiguator we use for actions by default\n                data = disambiguateActionVariables(action, data);\n              }\n            }\n\n            if (options?.select || options?.send) {\n              data = applyDataMask({\n                data,\n                modelApiIdentifier: action.modelApiIdentifier,\n                select: options.select,\n                send: options.send,\n              });\n            }\n\n            if (options?.debug) {\n              console.debug(\"[useActionForm] reshaping data for graphql api\", {\n                data,\n                defaultValues,\n              });\n            }\n\n            data = await reshapeDataForGraphqlApi(api, defaultValues, data);\n          }\n\n          let variables: ActionFunc[\"variablesType\"] = {\n            ...data,\n          };\n\n          if (existingRecordId) {\n            variables.id = existingRecordId;\n          }\n\n          if (!isModelAction) {\n            if (options?.send) {\n              const unmasked = variables;\n              variables = {};\n              for (const key of typeof options.send === \"function\" ? options.send() : options.send) {\n                set(variables, key, get(unmasked, key));\n              }\n            }\n          }\n\n          options?.onSubmit?.();\n\n          if (options?.debug) {\n            console.debug(\"[useActionForm] running action\", {\n              variables,\n            });\n          }\n\n          result = await runAction(variables);\n          if (!result.error) {\n            options?.onSuccess?.(result.data);\n            if (isModelAction && result.data) {\n              if (findExistingRecord) {\n                const newDefaultValues = processDefaultValues({\n                  data: result.data,\n                  defaultValues: options?.defaultValues,\n                  modelApiIdentifier: action.modelApiIdentifier,\n                  hasAmbiguousDefaultValues: action.hasAmbiguousIdentifier ?? false,\n                });\n\n                formHook.reset(newDefaultValues, { keepValues: true });\n              }\n\n              if (options?.select) {\n                const readOnlyPaths = getReadOnlyPaths(options.select);\n\n                for (const path of readOnlyPaths) {\n                  const value = get(result.data, path);\n                  formHook.setValue(path as ActionFunc[\"variablesType\"], value);\n                  formHook.setValue(`${action.modelApiIdentifier}.${path}` as ActionFunc[\"variablesType\"], value);\n                }\n              }\n            }\n          }\n        },\n        (errors) => {\n          handleSubmissionError(errors);\n        }\n      )(event);\n\n      if (result?.error) {\n        handleSubmissionError(result.error);\n      }\n\n      return result;\n    },\n    [\n      formHook,\n      handleSubmit,\n      isModelAction,\n      existingRecordId,\n      options,\n      runAction,\n      action,\n      findResult.data,\n      api,\n      defaultValues,\n      findExistingRecord,\n      handleSubmissionError,\n    ]\n  );\n\n  const proxiedFormState = new Proxy(formState, {\n    get: (target, prop) => {\n      if (prop === \"isSubmitting\") {\n        return target.isSubmitting || actionResult.fetching;\n      } else if (prop === \"isSubmitSuccessful\") {\n        return target.isSubmitSuccessful && !actionResult.fetching && !actionResult.error;\n      } else if (prop === \"isLoading\") {\n        return target.isLoading || findResult.fetching;\n      } else if (prop === \"isReady\") {\n        return isReady;\n      } else {\n        return (target as any)[prop];\n      }\n    },\n  }) as unknown as UseActionFormState<ActionFunc, ActionFunc[\"variablesType\"] & ExtraFormVariables, FormContext> & { isReady: boolean };\n\n  if (options?.debug) {\n    console.debug(\"[useActionForm] rendering form hook\", {\n      isReady,\n      hasSetInitialValues: hasSetInitialValues.current,\n      hasAmbiguousIdentifier: isModelAction && action.hasAmbiguousIdentifier,\n      isModelAction,\n      findExistingRecord,\n      findResult,\n      actionResult,\n      defaultValues,\n      existingRecordId,\n      modelApiIdentifier: isModelAction ? action.modelApiIdentifier : undefined,\n    });\n  }\n\n  return {\n    ...formHook,\n    formState: proxiedFormState,\n    error: findResult.error || actionResult.error,\n    submit: submit as unknown as UseActionFormSubmit<ActionFunc>,\n    actionData: actionResult.data,\n    originalFormMethods,\n  };\n};\n"]}
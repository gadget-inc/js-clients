{"version":3,"file":"useActionForm.js","sourceRoot":"","sources":["../../src/useActionForm.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ActionFunction, AnyModelManager, GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport { camelize } from \"@gadgetinc/api-client-core\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport type { FieldErrors, UseFormProps } from \"react-hook-form\";\nimport { useForm } from \"react-hook-form\";\nimport { useApi } from \"./GadgetProvider.js\";\nimport { useAction } from \"./useAction.js\";\nimport { useFindBy } from \"./useFindBy.js\";\nimport { useFindOne } from \"./useFindOne.js\";\nimport type { ErrorWrapper, OptionsType } from \"./utils.js\";\nimport { get, set } from \"./utils.js\";\n\nconst useFindExistingRecord = (\n  modelManager: AnyModelManager,\n  findBy: string | { [key: string]: any },\n  options: { select?: Record<string, any>; pause?: boolean }\n): [{ data?: GadgetRecord<any>; fetching: boolean; error?: ErrorWrapper }, () => void] => {\n  // for simplicity, we conditionally call either the findBy or findOne hook. this violates the rules of hooks, but is a LOT simpler than mounting and pausing both hooks and massaging the results of each together. this means we don't support the same form toggling from being for a record found by id and then later a record found by some other criteria, but that's a very rare use case. you can workaround this by adding a `key` prop to the component calling `useActionForm`, and having the value change when the find method changes, which will give different instance of the component and avoid the hook order changing.\n  if (typeof findBy === \"string\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useFindOne(modelManager as any, findBy, options);\n  } else {\n    const findByKey = Object.keys(findBy)[0];\n    const findByValue = Object.values(findBy)[0];\n    const finder = (modelManager as Record<string, any>)[`findBy${camelize(findByKey)}`];\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return (useFindBy as any)(finder, findByValue, options);\n  }\n};\n\n/**\n * The identity of a record to build a form for\n *\n * - Pass the ID of a record as a string to look up a record by id\n *\n * - Pass a {<fieldValue>: <value>} object to look up a record by some other field. __Note__: a `findBy` function must exist for the field you wish to find the record by.\n *\n *\n * @example\n * // find the user record with ID=123\n * const { isReady, submit } = useActionForm(api.user.update, { record: \"123\" });\n *\n * @example\n * // find a record by email. `api.user.findByEmail` must exist\n * const { isReady, submit } = useActionForm(api.user.update, { record: { email: \"user@gadget.app\" } });\n */\nexport type RecordIdentifier = string | { [key: string]: any };\n\n/**\n * React hook to manage state for a form that calls a Gadget action. `useActionForm` must be passed an action function from an instance of your generated API client library, like `api.user.create`, `api.blogPost.publish` or `api.someGlobalAction`. `useActionForm` returns a `Form` object from `react-hook-form` which can be used to build great form experiences.\n *\n * `useActionForm` manages the Gadget API calls for the form, and handling validation errors returned by the Gadget backend. If your form is for an existing record, `useActionForm` will also fetch the record from the backend and populate the form with the existing values.\n *\n * `useActionForm` doesn't run the action wne called. To actually submit the form, call the `submit` function on the returned `Form` object.\n *\n * @param action an action function from a model manager in your application's client, like `api.user.create`\n * @param options action options, like selecting the fields in the result\n *\n */\nexport const useActionForm = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"],\n  FormContext = any\n>(\n  action: ActionFunc,\n  options?: UseFormProps<ActionFunc[\"variablesType\"], FormContext> & {\n    /**\n     * The record identifier to run this action on, if it already exists.\n     * Should be undefined for create actions, or a record ID (or finder) for update / etc actions\n     **/\n    record?: RecordIdentifier;\n    /**\n     * Which fields to select on from the record when retrieving it from the backend.\n     */\n    select?: ActionFunc[\"optionsType\"][\"select\"];\n    /**\n     * Which fields to send from the form's values when sending it from the backend.\n     */\n    send?: string[];\n    /**\n     * Called when the form submits\n     */\n    onSubmit?: () => void;\n    /**\n     * Called when the action completes successfully on the backend\n     */\n    onSuccess?: (actionResult: any) => void;\n    /**\n     * Called when the form submission errors before sending, during the API call, or if the API call returns an error.\n     */\n    onError?: (error: Error | FieldErrors<ActionFunc[\"variablesType\"]>) => void;\n  }\n) => {\n  const api = useApi();\n  const isForExistingRecord = !!options?.record;\n  const hasSetInitialValues = useRef<boolean>(!isForExistingRecord);\n\n  // find the existing record if there is one\n  const modelManager = (api as any)[action.modelApiIdentifier] as AnyModelManager;\n  const [findResult] = useFindExistingRecord(modelManager, options?.record || \"1\", { pause: !isForExistingRecord });\n\n  const isReady = !isForExistingRecord || findResult.data;\n\n  let defaultValues = options?.defaultValues;\n  if (!defaultValues && findResult.data) {\n    defaultValues = { [action.modelApiIdentifier]: { ...findResult.data } } as any;\n  }\n\n  // setup the react-hook-form object, passing any options from the props\n  const { handleSubmit, ...formHook } = useForm<ActionFunc[\"variablesType\"], FormContext>({\n    defaultValues,\n    ...options,\n  });\n\n  // when the default values arrive from the record find later, reset them into the form. react-hook-form doesn't watch the default values after the first render\n  useEffect(() => {\n    if (isReady && !hasSetInitialValues.current && defaultValues) {\n      hasSetInitialValues.current = true;\n      formHook.reset(defaultValues);\n    }\n  }, [isReady, defaultValues, formHook]);\n\n  // get the action runner to run on submit\n  const [actionResult, runAction] = useAction(action, { select: options?.select } as any);\n\n  const handleSubmissionError = useCallback(\n    (error: Error | FieldErrors<ActionFunc[\"variablesType\"]>) => {\n      // show the user server-side validation errors (GGT_INVALID_INPUT errors) by adding them to the hook form's validation errors\n      if (\"validationErrors\" in error) {\n        const validationErrors = (error as unknown as ErrorWrapper).validationErrors;\n        if (validationErrors) {\n          for (const validationError of validationErrors) {\n            formHook.setError(`${action.modelApiIdentifier}.${validationError.apiIdentifier}` as any, { message: validationError.message });\n          }\n        }\n      }\n\n      options?.onError?.(error);\n    },\n    [action.modelApiIdentifier, formHook, options]\n  );\n\n  const submit = useCallback(\n    handleSubmit(\n      (data) => {\n        let modelInput = data[action.modelApiIdentifier];\n        if (modelInput) {\n          modelInput = { ...modelInput };\n          delete modelInput.__typename;\n          delete modelInput.id;\n          delete modelInput.createdAt;\n          delete modelInput.updatedAt;\n        }\n\n        let variables: Record<string, any> = {\n          id: isForExistingRecord ? findResult.data.id : undefined,\n          ...data,\n          [action.modelApiIdentifier]: modelInput,\n        };\n\n        if (options?.send) {\n          const unmasked = variables;\n          variables = {};\n          for (const key of options.send) {\n            set(variables, key, get(unmasked, key));\n          }\n        }\n\n        runAction(variables as any).then((result) => {\n          if (result.error) {\n            handleSubmissionError(result.error);\n          } else {\n            options?.onSuccess?.(result.data);\n          }\n        }, handleSubmissionError);\n      },\n      (errors) => {\n        console.log(\"[gadget] error submitting form\", errors);\n        handleSubmissionError(errors);\n      }\n    ),\n    [handleSubmit, findResult.data, options?.send]\n  );\n\n  return {\n    ...formHook,\n    modelManager,\n    fetching: findResult.fetching || actionResult.fetching,\n    error: findResult.error || actionResult.error,\n    submit,\n    isReady,\n    submissionCompleted: !!actionResult.data,\n  };\n};\n"]}
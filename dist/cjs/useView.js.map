{"version":3,"file":"useView.js","sourceRoot":"","sources":["../../src/useView.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  GQLBuilderResult,\n  VariablesOptions,\n  ViewFunction,\n  ViewFunctionWithoutVariables,\n  ViewFunctionWithVariables,\n  ViewResult,\n} from \"@gadgetinc/api-client-core\";\nimport { get, namespaceDataPath } from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { useGadgetQuery } from \"./useGadgetQuery.js\";\nimport { useStructuralMemo } from \"./useStructuralMemo.js\";\nimport type { ReadHookResult, ReadOperationOptions } from \"./utils.js\";\nimport { ErrorWrapper, useQueryArgs } from \"./utils.js\";\n\n/**\n * React hook to fetch the result of a computed view from the backend. Returns a standard hook result set with a tuple of the result object with `data`, `fetching`, and `error` keys, and a `refetch` function. `data` will be the shape of the computed view's result.\n *\n * @param view Gadget view function to run, like `api.leaderboard` or `api.todos.summary`\n * @param options options for controlling client side execution\n *\n * @example\n *\n * ```\n * export function Leaderboard() {\n *   const [result, refresh] = useView(api.leaderboard);\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No data found</>;\n *\n *   return <>{result.data.map((leaderboard) => <div>{leaderboard.name}: {leaderboard.score}</div>)}</>;\n * }\n * ```\n */\nexport function useView<F extends ViewFunctionWithoutVariables<any>>(\n  view: F,\n  options?: Omit<ReadOperationOptions, \"live\">\n): ReadHookResult<ViewResult<F>>;\n/**\n * React hook to fetch the result of a computed view with variables from the backend. Returns a standard hook result set with a tuple of the result object with `data`, `fetching`, and `error` keys, and a `refetch` function. `data` will be the shape of the computed view's result.\n *\n * @param manager Gadget view function to run\n * @param variables variables to pass to the backend view\n * @param options options for controlling client side execution\n *\n * @example\n *\n * ```\n * export function Leaderboard() {\n *   const [result, refresh] = useView(api.leaderboard, {\n *     first: 10,\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No data found</>;\n *\n *   return <>{result.data.map((leaderboard) => <div>{leaderboard.name}: {leaderboard.score}</div>)}</>;\n * }\n * ```\n */\nexport function useView<F extends ViewFunctionWithVariables<any, any>>(\n  view: F,\n  variables: F[\"variablesType\"],\n  options?: Omit<ReadOperationOptions, \"live\">\n): ReadHookResult<ViewResult<F>>;\n/**\n * React hook to fetch the result of an inline computed view with variables from the backend. Returns a standard hook result set with a tuple of the result object with `data`, `fetching`, and `error` keys, and a `refetch` function. `data` will be the shape of the computed view's result.\n *\n * Does not know the type of the result from the input string -- for type safety, use a named view defined in a .gelly file in the backend.\n *\n * @param view Gelly query string to run, like `{ count(todos) }`\n * @param variables variables to pass to the backend view\n * @param options options for controlling client side execution\n *\n * @example\n *\n * ```\n * export function Leaderboard() {\n *   const [result, refresh] = useView(\"{ count(todos) }\", {\n *     first: 10,\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No data found</>;\n *\n *   return <>{result.data.map((leaderboard) => <div>{leaderboard.name}: {leaderboard.score}</div>)}</>;\n * }\n * ```\n */\nexport function useView(\n  gellyQuery: string,\n  variables?: Record<string, unknown>,\n  options?: Omit<ReadOperationOptions, \"live\">\n): ReadHookResult<ViewResult<ViewFunction<unknown, unknown>>>;\nexport function useView<VariablesT, F extends ViewFunction<VariablesT, any>>(\n  view: F | string,\n  variablesOrOptions?: VariablesT | Omit<ReadOperationOptions, \"live\">,\n  maybeOptions?: Omit<ReadOperationOptions, \"live\">\n): ReadHookResult<ViewResult<F>> {\n  let variables: VariablesT | undefined;\n  let options: Omit<ReadOperationOptions, \"live\"> | undefined;\n\n  if (typeof view == \"string\" || \"variables\" in view) {\n    variables = variablesOrOptions as VariablesT;\n    options = maybeOptions;\n  } else if (variablesOrOptions) {\n    options = variablesOrOptions as Omit<ReadOperationOptions, \"live\">;\n  }\n\n  const memoizedVariables = useStructuralMemo(variables);\n  const memoizedOptions = useStructuralMemo({\n    ...options,\n    context: {\n      ...options?.context,\n      // if the view exports the typenames it references, add them to the context so urql will refresh the view when mutations are made against these typenames\n      additionalTypenames: [\n        ...(options?.context?.additionalTypenames ?? []),\n        ...(typeof view == \"string\" ? [] : view.referencedTypenames ?? []),\n      ],\n    },\n  });\n\n  const [plan, dataPath] = useMemo((): [plan: GQLBuilderResult, dataPath: string[]] => {\n    if (typeof view == \"string\") {\n      return [{ query: inlineViewQuery, variables: { query: view, variables: memoizedVariables } }, [\"gellyView\"]];\n    } else {\n      const variablesOptions: VariablesOptions = {};\n      if (\"variables\" in view && memoizedVariables) {\n        for (const [name, variable] of Object.entries(view.variables)) {\n          const value = memoizedVariables[name as keyof typeof memoizedVariables] as unknown;\n          if (typeof value != \"undefined\" && value !== null) {\n            variablesOptions[name] = {\n              value,\n              ...variable,\n            };\n          }\n        }\n      }\n\n      return [view.plan(variablesOptions), namespaceDataPath([view.gqlFieldName], view.namespace)];\n    }\n  }, [view, memoizedVariables]);\n\n  const [rawResult, refresh] = useGadgetQuery(useQueryArgs(plan, memoizedOptions));\n\n  const result = useMemo(() => {\n    const data = get(rawResult.data, dataPath);\n    const error = ErrorWrapper.errorIfDataAbsent(rawResult, dataPath, options?.pause);\n\n    return { ...rawResult, data, error };\n  }, [dataPath, options?.pause, rawResult]);\n\n  return [result, refresh];\n}\n\nconst inlineViewQuery = `query InlineView($query: String!, $variables: JSONObject) { \n  gellyView(query: $query, variables: $variables) \n}`;\n"]}
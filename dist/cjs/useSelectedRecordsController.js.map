{"version":3,"file":"useSelectedRecordsController.js","sourceRoot":"","sources":["../../src/useSelectedRecordsController.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { uniq } from \"./utils.js\";\n\nexport enum SelectionType {\n  All = \"all\",\n  Page = \"page\",\n  Multi = \"multi\",\n  Single = \"single\",\n  Range = \"range\",\n}\n\nexport type RecordSelection = {\n  recordIds: string[];\n  clearAll: () => void;\n  selectCurrentPage: () => void;\n  selectIds: (ids: string[]) => void;\n  deselectIds: (ids: string[]) => void;\n  onSelectionChange: (selectionType: SelectionType, toggleType: boolean, selection?: string | [number, number], position?: number) => void;\n};\n\nexport const useSelectedRecordsController = (props: { currentPageIds: string[] }) => {\n  const { currentPageIds } = props;\n  const [selectedRecordsIds, setSelectedRecordsIds] = useState<string[]>([]);\n\n  const selected = {\n    recordIds: selectedRecordsIds,\n    clearAll: () => setSelectedRecordsIds([]),\n    selectCurrentPage: () => setSelectedRecordsIds(currentPageIds),\n    selectIds: (ids: string[]) => setSelectedRecordsIds(uniq([...selectedRecordsIds, ...ids])),\n    deselectIds: (ids: string[]) => setSelectedRecordsIds(selectedRecordsIds.filter((i) => !ids.includes(i))),\n  };\n\n  useEffect(() => {\n    setSelectedRecordsIds(selectedRecordsIds.filter((i) => currentPageIds.includes(i)));\n  }, [currentPageIds.join(\",\")]);\n\n  const onSelectionChange = (\n    selectionType: SelectionType,\n    toggleType: boolean,\n    selection?: string | [number, number],\n    position?: number\n  ) => {\n    switch (selectionType) {\n      case SelectionType.Single: {\n        const selectedId = [`${selection}`];\n        toggleType ? selected.selectIds(selectedId) : selected.deselectIds(selectedId);\n        break;\n      }\n      case SelectionType.Page: {\n        toggleType ? selected.selectCurrentPage() : selected.clearAll();\n        break;\n      }\n      case SelectionType.Multi: {\n        // During a multiselect, the row indexes are returned instead of the record ids\n        if (!Array.isArray(selection)) {\n          throw new Error(\"Expected an array of indexes for multi-select\");\n        }\n        const selectedIds = [];\n        for (let i = selection[0]; i <= selection[1]; i++) {\n          selectedIds.push(currentPageIds[i]);\n        }\n        toggleType ? selected.selectIds(selectedIds) : selected.deselectIds(selectedIds);\n        break;\n      }\n      case SelectionType.All: // Do not allow selection outside of the current page\n      case SelectionType.Range: // Do not allow selection outside of the current page\n      default:\n        break;\n    }\n  };\n\n  return { ...selected, onSelectionChange };\n};\n"]}
{"version":3,"file":"BackgroundActionHandle.js","sourceRoot":"","sources":["../../src/BackgroundActionHandle.ts"],"names":[],"mappings":";;;AAGA,+DAAqE;AA2BrE,yEAAyE;AACzE,MAAa,sBAAsB;IAIjC,YAAqB,UAA4B,EAAW,MAAc,EAAW,EAAU;QAAnF;;;;mBAAS,UAAU;WAAkB;QAAE;;;;mBAAS,MAAM;WAAQ;QAAE;;;;mBAAS,EAAE;WAAQ;IAAG,CAAC;IAEnG,yEAAyE;IACzE,KAAK,CAAC,MAAM,CAA0G,OAAiB;QACrI,OAAO,CAAC,MAAM,IAAA,kDAA4B,EAAuC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;aAC9H,MAAM,CAAC;IACZ,CAAC;CACF;AAXD,wDAWC","sourcesContent":["import type { GadgetConnection } from \"./GadgetConnection.js\";\nimport type { ActionFunction, ActionFunctionMetadata, GlobalActionFunction } from \"./GadgetFunctions.js\";\nimport type { GadgetRecord } from \"./GadgetRecord.js\";\nimport { backgroundActionResultRunner } from \"./operationRunners.js\";\nimport type { ActionFunctionOptions, DefaultSelection, Select } from \"./types.js\";\n\nexport type BackgroundActionResultData<\n  F extends ActionFunctionMetadata<any, any, any, any, any, any> | GlobalActionFunction<any>,\n  Selection\n> = F extends ActionFunction<any, any, any, any, any>\n  ? F[\"hasReturnType\"] extends true\n    ? any\n    : GadgetRecord<\n        Select<\n          Exclude<F[\"schemaType\"], null | undefined>,\n          DefaultSelection<\n            F[\"selectionType\"],\n            Selection extends { select?: F[\"selectionType\"] | null | undefined } ? Selection : never,\n            F[\"defaultSelection\"]\n          >\n        >\n      >\n  : any;\n\nexport type BackgroundActionResult<Data = any> = {\n  id: string;\n  outcome: string | null;\n  result: Data | null;\n};\n\n/** Represents a handle to a background action which has been enqueued */\nexport class BackgroundActionHandle<\n  SchemaT,\n  Action extends ActionFunctionMetadata<any, any, any, SchemaT, any, any> | GlobalActionFunction<any>\n> {\n  constructor(readonly connection: GadgetConnection, readonly action: Action, readonly id: string) {}\n\n  /** Wait for this background action to complete and return the result. */\n  async result<Options extends ActionFunctionOptions<Action>, ResultData = BackgroundActionResultData<Action, Options>>(options?: Options) {\n    return (await backgroundActionResultRunner<SchemaT, Action, Options, ResultData>(this.connection, this.id, this.action, options))\n      .result;\n  }\n}\n"]}
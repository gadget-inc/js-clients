{"version":3,"file":"useAction.js","sourceRoot":"","sources":["../../src/useAction.ts"],"names":[],"mappings":";;;AAGA,qDAAkD;AAGvC,QAAA,SAAS,GAAc,IAAA,+BAAc,EAAC,WAAW,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE;IACnF,iBAAS,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;QAC9B,MAAM,kBAAkB,GAAG,SAAS,CAAC,qBAAqB,EAAE,CAAC;QAE7D,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,EAAE;YAC/B,IAAI,MAAM,CAAC,IAAI,KAAM,eAA0B,EAAE,CAAC;gBAChD,MAAM,aAAa,GAAG,MAA+C,CAAC;gBACtE,IAAI,CAAC,CAAC,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,UAAU,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,qBAAqB,IAAI,aAAa,CAAC,EAAE,CAAC;oBAChH,uGAAuG;oBACvG,OAAO;gBACT,CAAC;gBAED,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,sCAAsC,EAAE;oBACpE,MAAM,EAAE;wBACN,MAAM,EAAE,aAAa,CAAC,MAAM;wBAC5B,MAAM,EAAE;4BACN,YAAY,EAAE,aAAa,CAAC,YAAY;4BACxC,mBAAmB,EAAE,aAAa,CAAC,mBAAmB;4BACtD,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;4BACpD,QAAQ,EAAE,aAAa,CAAC,QAAQ;yBACjC;qBACF;iBACF,CAAC,CAAC;gBACH,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;QACH,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,MAAM,eAAe,GAAG,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE;YAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,UAAU,MAAM,CAAC,aAAa,0DAA0D,CAAC,CAAC;YAC5G,CAAC;YACD,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtC,CAAC,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC;QAE9B,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,GAAG,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEtE,MAAM,iBAAiB,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QAE3G,OAAO;YACL,iBAAiB;YACjB,OAAO,CAAC,SAAS,CAAC,WAAW,CAC3B,KAAK,EAAE,KAAuC,EAAE,OAAmC,EAAE,EAAE;gBACrF,MAAM,SAAS,GAAG,kBAAkB,CAAC,2BAA2B,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBAEhF,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE;oBAC1C,GAAG,OAAO;oBACV,mMAAmM;oBACnM,mBAAmB,EAAE;wBACnB,GAAG,CAAC,OAAO,EAAE,mBAAmB,IAAI,EAAE,CAAC;wBACvC,kBAAkB,CAAC,oBAAoB,CAAC,MAAM,CAAC,kBAAkB,CAAC;qBACnE;iBACF,CAAC,CAAC;gBAEH,OAAO,aAAa,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,EAAE,EAAE,MAAM,CAAC,CAAC;YAC/D,CAAC,EACD,CAAC,MAAM,EAAE,WAAW,CAAC,CACtB;SACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,aAAa,GAAG,CACpB,MAAyC,EACzC,MAA+C,EACpB,EAAE;IAC7B,OAAO,EAAE,GAAG,MAAM,EAAE,GAAG,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC;AACxD,CAAC,CAAC","sourcesContent":["import type { ActionFunction, StubbedActionFunction } from \"@gadgetinc/core\";\nimport type { AnyVariables, OperationContext } from \"@urql/core\";\nimport type { UseMutationState } from \"./adapter.js\";\nimport { createHookStub } from \"./createHooks.js\";\nimport type { ActionHookState, UseAction } from \"./types.js\";\n\nexport let useAction: UseAction = createHookStub(\"useAction\", (adapter, coreHooks) => {\n  useAction = (action, options) => {\n    const coreImplementation = coreHooks.useCoreImplementation();\n\n    adapter.framework.useEffect(() => {\n      if (action.type === (\"stubbedAction\" as string)) {\n        const stubbedAction = action as unknown as StubbedActionFunction<any>;\n        if (!(\"reason\" in stubbedAction) || !(\"dataPath\" in stubbedAction) || !(\"actionApiIdentifier\" in stubbedAction)) {\n          // Don't dispatch an event if the generated client has not yet been updated with the updated parameters\n          return;\n        }\n\n        const event = new CustomEvent(\"gadget:devharness:stubbedActionError\", {\n          detail: {\n            reason: stubbedAction.reason,\n            action: {\n              functionName: stubbedAction.functionName,\n              actionApiIdentifier: stubbedAction.actionApiIdentifier,\n              modelApiIdentifier: stubbedAction.modelApiIdentifier,\n              dataPath: stubbedAction.dataPath,\n            },\n          },\n        });\n        globalThis.dispatchEvent(event);\n      }\n    }, []);\n\n    const memoizedOptions = coreHooks.useStructuralMemo(options);\n    const plan = adapter.framework.useMemo(() => {\n      if (!action.plan) {\n        throw new Error(`Action ${action.operationName} does not have a plan method, is your client up to date?`);\n      }\n      return action.plan(memoizedOptions);\n    }, [action, memoizedOptions]);\n\n    const [result, runMutation] = coreHooks.useGadgetMutation(plan.query);\n\n    const transformedResult = adapter.framework.useMemo(() => processResult(result, action), [result, action]);\n\n    return [\n      transformedResult,\n      adapter.framework.useCallback(\n        async (input: (typeof action)[\"variablesType\"], context?: Partial<OperationContext>) => {\n          const variables = coreImplementation.disambiguateActionVariables(action, input);\n\n          const result = await runMutation(variables, {\n            ...context,\n            // Adding the model's additional typename ensures document cache will properly refresh, regardless of whether __typename was selected (and sometimes we can't even select it, like delete actions!)\n            additionalTypenames: [\n              ...(context?.additionalTypenames ?? []),\n              coreImplementation.capitalizeIdentifier(action.modelApiIdentifier),\n            ],\n          });\n\n          return processResult({ fetching: false, ...result }, action);\n        },\n        [action, runMutation]\n      ),\n    ];\n  };\n});\n\nconst processResult = <Data, Variables extends AnyVariables>(\n  result: UseMutationState<Data, Variables>,\n  action: ActionFunction<any, any, any, any, any>\n): ActionHookState<any, any> => {\n  return { ...result, ...action.processResult(result) };\n};\n"]}
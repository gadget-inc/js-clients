{"version":3,"file":"useAction.js","sourceRoot":"","sources":["../../src/useAction.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ActionFunction, DefaultSelection, GadgetRecord, LimitToKnownKeys, Select } from \"@gadgetinc/api-client-core\";\nimport { actionOperation, capitalizeIdentifier, get, hydrateRecord } from \"@gadgetinc/api-client-core\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport type { AnyVariables, OperationContext, UseMutationState } from \"urql\";\nimport { GadgetUrqlClientContext } from \"./GadgetProvider.js\";\nimport { useGadgetMutation } from \"./useGadgetMutation.js\";\nimport { useStructuralMemo } from \"./useStructuralMemo.js\";\nimport type { ActionHookResult, ActionHookState, OptionsType } from \"./utils.js\";\nimport { ErrorWrapper, disambiguateActionVariables, noProviderErrorMessage } from \"./utils.js\";\n\n/**\n * React hook to run a Gadget model action. `useAction` must be passed an action function from an instance of your generated API client library, like `api.user.create` or `api.blogPost.publish`. `useAction` doesn't actually run the action when invoked, but instead returns an action function as the second result for running the action in response to an event.\n *\n * @param action an action function from a model manager in your application's client, like `api.user.create`\n * @param options action options, like selecting the fields in the result\n *\n * @example\n * ```\n * export function CreateUserButton(props: { name: string; email: string }) {\n *   const [{error, fetching, data}, createUser] = useAction(api.user.create, {\n *     select: {\n *       id: true,\n *     },\n *   });\n *\n *   const onClick = () => createUser({\n *     name: props.name,\n *     email: props.email,\n *   });\n *\n *   return (\n *     <>\n *       {error && <>Failed to create user: {error.toString()}</>}\n *       {fetching && <>Creating user...</>}\n *       {data && <>Created user with id={data.id}</>}\n *       <button onClick={onClick}>Create user</button>\n *     </>\n *   );\n * }\n */\nexport const useAction = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends F[\"optionsType\"]\n>(\n  action: F,\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"]>\n): ActionHookResult<\n  F[\"hasReturnType\"] extends true\n    ? any\n    : GadgetRecord<\n        Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>\n      >,\n  Exclude<F[\"variablesType\"], null | undefined>\n> => {\n  if (!useContext(GadgetUrqlClientContext)) throw new Error(noProviderErrorMessage);\n\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return actionOperation(\n      action.operationName,\n      action.defaultSelection,\n      action.modelApiIdentifier,\n      action.modelSelectionField,\n      action.variables,\n      memoizedOptions,\n      action.namespace,\n      action.isBulk,\n      action.hasReturnType\n    );\n  }, [action, memoizedOptions]);\n\n  const [result, runMutation] = useGadgetMutation<\n    GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>,\n    F[\"variablesType\"]\n  >(plan.query);\n\n  const transformedResult = useMemo(() => processResult(result, action), [result, action]);\n\n  return [\n    transformedResult,\n    useCallback(\n      async (input: F[\"variablesType\"], context?: Partial<OperationContext>) => {\n        const variables = disambiguateActionVariables(action, input);\n\n        const result = await runMutation(variables, {\n          ...context,\n          // Adding the model's additional typename ensures document cache will properly refresh, regardless of whether __typename was selected (and sometimes we can't even select it, like delete actions!)\n          additionalTypenames: [...(context?.additionalTypenames ?? []), capitalizeIdentifier(action.modelApiIdentifier)],\n        });\n\n        return processResult({ fetching: false, ...result }, action);\n      },\n      [action, runMutation]\n    ),\n  ];\n};\n\n/** Processes urql's result object into the fancier Gadget result object */\nconst processResult = <Data, Variables extends AnyVariables>(\n  result: UseMutationState<Data, Variables>,\n  action: ActionFunction<any, any, any, any, any>\n): ActionHookState<any, any> => {\n  let error = ErrorWrapper.forMaybeCombinedError(result.error);\n  let data = null;\n  if (result.data) {\n    const dataPath = [action.operationName];\n    if (action.namespace) {\n      dataPath.unshift(action.namespace);\n    }\n\n    const mutationData = get(result.data, dataPath);\n    if (mutationData) {\n      const errors = mutationData[\"errors\"];\n      if (errors && errors[0]) {\n        error = ErrorWrapper.forErrorsResponse(errors, error?.response);\n      } else {\n        data = action.hasReturnType ? mutationData.result : hydrateRecord(result, mutationData[action.modelSelectionField]);\n      }\n    }\n  }\n\n  return { ...result, error, data };\n};\n"]}
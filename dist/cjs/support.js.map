{"version":3,"file":"support.js","sourceRoot":"","sources":["../../src/support.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SpanOptions } from \"@opentelemetry/api\";\nimport { context, SpanStatusCode, trace } from \"@opentelemetry/api\";\nimport type { OperationResult } from \"@urql/core\";\nimport { CombinedError } from \"@urql/core\";\nimport { DataHydrator } from \"./DataHydrator.js\";\nimport type { RecordShape } from \"./GadgetRecord.js\";\nimport { GadgetRecord } from \"./GadgetRecord.js\";\n\n/**\n * Generic type of the state of any record of a Gadget model\n **/\nexport type AnyState = string | { [key: string]: AnyState };\n\n/**\n * Error caused by a violated internal expectation that isn't the users fault, but the Gadget platform's. Often the best way to handle is to just retry.\n **/\nexport class GadgetInternalError extends Error {\n  code = \"GGT_INTERNAL_ERROR\";\n  name = \"InternalError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * An error representing misuse or a violation of the assumptions of the Gadget Client.\n */\nexport class GadgetClientError extends Error {\n  code = \"GGT_CLIENT_ERROR\";\n  name = \"ClientError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = true;\n}\n\n/**\n * A Gadget API error with an `code` and `message` describing the error. Most often these errors are caused by invalid input data or by misconfigured Gadget models. Consult the documentation for the specific `code` to learn more.\n **/\nexport class GadgetOperationError extends Error {\n  constructor(incomingMessage: string, readonly code: string) {\n    super(incomingMessage.startsWith(\"GGT_\") ? incomingMessage : `${code}: ${incomingMessage}`);\n  }\n}\n\n/**\n * Interface representing one message on one invalid field for a `InvalidRecordError`\n */\nexport interface InvalidFieldError {\n  /** Which field of a record this error is for */\n  apiIdentifier: string;\n  /** Human facing string representing the error */\n  message: string;\n}\n\n/**\n * A client error when the Gadget API closes the connection unexpectedly.\n */\nexport class GadgetUnexpectedCloseError extends Error {\n  code = \"GGT_UNKNOWN\";\n  name = \"UnexpectedCloseError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = false;\n\n  /** The event that caused the unexpected close */\n  readonly event: unknown;\n\n  constructor(event: unknown) {\n    let message: string;\n    if (isCloseEvent(event)) {\n      message = `GraphQL websocket closed unexpectedly by the server with error code ${event.code} and reason \"${event.reason}\"`;\n    } else {\n      message = \"GraphQL websocket closed unexpectedly by the server\";\n    }\n\n    super(message);\n    this.event = event;\n  }\n}\n\n/**\n * A client error when the client times out waiting for the Gadget API to open websocket connection.\n */\nexport class GadgetWebsocketConnectionTimeoutError extends Error {\n  code = \"GGT_WEBSOCKET_CONNECTION_TIMEOUT\";\n  name = \"WebsocketConnectionTimeoutError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * A Gadget API error representing a backend validation error on the input data for an action. Thrown when any of the validations configured on a model fail for the given input data. Has a `validationErrors` property describing which fields failed validation, with messages for each.\n **/\nexport class InvalidRecordError extends Error {\n  code = \"GGT_INVALID_RECORD\";\n  name = \"InvalidRecordError\";\n\n  /** @private */\n  statusCode = 422;\n  /** @private */\n  causedByClient = true;\n  /**\n   * A list of validation errors for each field that failed validation.\n   */\n  readonly validationErrors: InvalidFieldError[];\n  /**\n   * The API identifier of the model for this record which failed to validate\n   */\n  readonly modelApiIdentifier?: string;\n  /**\n   * The record that failed to validate, if available\n   */\n  readonly record?: Record<string, any>;\n\n  constructor(message: string | null, validationErrors: InvalidFieldError[], modelApiIdentifier?: string, record?: Record<string, any>) {\n    const firstErrors = validationErrors.slice(0, 3);\n    const extraErrorMessage =\n      validationErrors.length > 3\n        ? `, and ${validationErrors.length - 3} more error${validationErrors.length > 4 ? \"s\" : \"\"} need${\n            validationErrors.length > 4 ? \"\" : \"s\"\n          } to be corrected`\n        : \"\";\n\n    super(\n      message ??\n        `GGT_INVALID_RECORD: ${modelApiIdentifier ?? \"Record\"} is invalid and can't be saved. ${firstErrors\n          .map(({ apiIdentifier, message }) => `${apiIdentifier} ${message}`)\n          .join(\", \")}${extraErrorMessage}.`\n    );\n\n    this.validationErrors = validationErrors;\n    this.modelApiIdentifier = modelApiIdentifier;\n    this.record = record;\n  }\n}\n\n/**\n * @deprecated Use `InvalidRecordError` instead, here for backwards compatability\n */\nexport const GadgetValidationError = InvalidRecordError;\n\n/**\n * A Gadget API error that represents an error from the server. Thrown when the server encounters data that is not unique despite the existence of unique validation on a field. If you receive this error, it is likely that you added a unique validation to a field that has duplicate data.\n */\nexport class GadgetNonUniqueDataError extends Error {\n  code = \"GGT_NON_UNIQUE_DATA\";\n  name = \"NonUniqueDataError\";\n\n  /** @private */\n  statusCode = 417;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * A Gadget API error that represents an error where the client asked the server for data that doesn't exist server side.\n */\nexport class GadgetNotFoundError extends Error {\n  code = \"GGT_RECORD_NOT_FOUND\";\n  name = \"RecordNotFoundError\";\n\n  /** @private */\n  statusCode = 404;\n  /** @private */\n  causedByClient = false;\n}\n\n/** All the errors a Gadget operation can throw */\nexport type GadgetError =\n  | GadgetOperationError\n  | GadgetInternalError\n  | InvalidRecordError\n  | GadgetNonUniqueDataError\n  | GadgetNotFoundError\n  | GadgetUnexpectedCloseError\n  | GadgetWebsocketConnectionTimeoutError;\n\nexport function assert<T>(value: T | undefined | null, message?: string): T {\n  if (!value) {\n    throw new Error(\"assertion error\" + (message ? `: ${message}` : \"\"));\n  }\n  return value;\n}\n\nexport const get = (object: Record<string, any> | null | undefined, path: string[]): any => {\n  const length = path.length;\n  let index = 0;\n  while (object != null && index < length) {\n    object = object[path[index++]];\n  }\n\n  return index && index == length ? object : undefined;\n};\n\nexport const isCloseEvent = (event: any): event is CloseEvent => event?.type == \"close\";\n\n/**\n * Converts a string to camel case, optionally capitalizing the first character.\n * Defaults to capitalizing the first character.\n * @param str\n * @param capitalizeFirstCharacter\n * @returns Camelize string\n */\nexport const capitalizeIdentifier = (str: string | undefined | null, capitalizeFirstCharacter?: boolean): string => {\n  if (typeof str !== \"string\") return \"\";\n  return camelize(str, capitalizeFirstCharacter);\n};\n\nconst capitalizeFirstCharacter = (str: string) => {\n  const result = str === null || str === undefined ? \"\" : String(str);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n};\n\nexport const camelize = (term: string, uppercaseFirstLetter = true) => {\n  let result = \"\" + term;\n\n  if (uppercaseFirstLetter) {\n    result = result.replace(/^[a-z\\d]*/, (a) => {\n      return capitalizeFirstCharacter(a);\n    });\n  } else {\n    result = result.replace(new RegExp(\"^(?:(?=\\\\b|[A-Z_])|\\\\w)\"), (a) => {\n      return a.toLowerCase();\n    });\n  }\n\n  result = result.replace(/(?:_|(\\/))([a-z\\d]*)/gi, (_match, a, b, _idx, _string) => {\n    a || (a = \"\");\n    return \"\" + a + capitalizeFirstCharacter(b);\n  });\n\n  return result;\n};\n\nexport const sortTypeName = (modelApiIdentifier: string) => `${camelize(modelApiIdentifier)}Sort`;\nexport const filterTypeName = (modelApiIdentifier: string) => `${camelize(modelApiIdentifier)}Filter`;\n\nexport const getNonUniqueDataError = (modelApiIdentifier: string, fieldName: string, fieldValue: string) =>\n  new GadgetNonUniqueDataError(\n    `More than one record found for ${modelApiIdentifier}.${fieldName} = ${fieldValue}. Please confirm your unique validation is not reporting an error.`\n  );\n\nexport const getNonNullableError = (response: Result & { fetching: boolean }, dataPath: string[]) => {\n  if (response.fetching) {\n    return;\n  }\n  const result = get(response.data, dataPath);\n  if (result === undefined) {\n    return new GadgetInternalError(\n      `Internal Error: Gadget API didn't return expected data. Nothing found in response at ${dataPath.join(\".\")}`\n    );\n  } else if (result === null) {\n    return new GadgetNotFoundError(`Record Not Found Error: Gadget API returned no data at ${dataPath.join(\".\")}`);\n  }\n};\n\nexport const assertOperationSuccess = (response: OperationResult<any>, dataPath: string[], throwOnEmptyData = false) => {\n  if (response.error) {\n    if (response.error instanceof CombinedError && (response.error.networkError as any as Error[])?.length) {\n      response.error.message = (response.error.networkError as any as Error[]).map((error) => \"[Network] \" + error.message).join(\"\\n\");\n    }\n    throw response.error;\n  }\n\n  const result = get(response.data, dataPath);\n  const edges = get(result, [\"edges\"]);\n  const dataArray = edges ?? result;\n  if (result === undefined) {\n    throw new GadgetInternalError(\n      `Internal Error: Gadget API didn't return expected data. Nothing found in response at ${dataPath.join(\".\")}`\n    );\n  } else if (result === null || (throwOnEmptyData && Array.isArray(dataArray) && dataArray.length === 0)) {\n    throw new GadgetNotFoundError(`Record Not Found Error: Gadget API returned no data at ${dataPath.join(\".\")}`);\n  }\n\n  return result;\n};\n\nexport const assertNullableOperationSuccess = (response: OperationResult<any>, dataPath: string[]) => {\n  if (response.error) {\n    if (response.error instanceof CombinedError && (response.error.networkError as any as Error[])?.length) {\n      response.error.message = (response.error.networkError as any as Error[]).map((error) => \"[Network] \" + error.message).join(\"\\n\");\n    }\n    throw response.error;\n  }\n\n  const result = get(response.data, dataPath);\n  return result ?? null;\n};\n\nexport const gadgetErrorFor = (error: Record<string, any>) => {\n  if (error.code == \"GGT_INVALID_RECORD\") {\n    return new InvalidRecordError(error.message, error.validationErrors, error.model?.apiIdentifier, error.record);\n  } else if (error.code == \"GGT_UNKNOWN\" && error.message.includes(\"duplicate key value violates unique constraint\")) {\n    return new GadgetNonUniqueDataError(error.message);\n  } else {\n    return new GadgetOperationError(error.message, error.code);\n  }\n};\n\nexport const assertMutationSuccess = (response: OperationResult<any>, dataPath: string[]) => {\n  const operationResponse = assertOperationSuccess(response, dataPath);\n\n  if (!operationResponse.success) {\n    const firstErrorBlob = operationResponse.errors && operationResponse.errors[0];\n    if (firstErrorBlob) {\n      throw gadgetErrorFor(firstErrorBlob);\n    } else {\n      throw new GadgetOperationError(`Gadget API operation not successful.`, \"GGT_UNKNOWN\");\n    }\n  }\n\n  return operationResponse;\n};\n\n// All of these functions only need the data bit, so narrow the type to make it easier to use these functions\ntype Result = Pick<OperationResult<any>, \"data\">;\n\nexport const getHydrator = (response: Result) => {\n  if (response.data?.gadgetMeta?.hydrations) {\n    return new DataHydrator(response.data?.gadgetMeta?.hydrations);\n  }\n};\n\nexport const hydrateRecord = <Shape extends RecordShape = RecordShape>(response: Result, record: any): GadgetRecord<Shape> => {\n  const hydrator = getHydrator(response);\n  if (hydrator) {\n    record = hydrator.apply(record);\n  }\n  return new GadgetRecord<Shape>(record);\n};\n\nexport const hydrateRecordArray = <Shape extends RecordShape = any>(response: Result, records: Array<any>) => {\n  const hydrator = getHydrator(response);\n  if (hydrator) {\n    records = hydrator.apply(records) as any;\n  }\n  return records?.map((record) => new GadgetRecord<Shape>(record));\n};\n\nexport const hydrateConnection = <Shape extends RecordShape = any>(response: Result, connection: { edges: { node: Node }[] }) => {\n  const nodes = connection.edges.map((edge) => edge.node);\n  return hydrateRecordArray<Shape>(response, nodes);\n};\n\nexport const toPrimitiveObject = (value: any): any => {\n  if (value != null && typeof value.toJSON === \"function\") value = value.toJSON();\n  if (value === undefined) return undefined;\n  if (value === null) return null;\n  if (typeof value === \"boolean\") return value;\n  if (typeof value === \"string\") return value;\n  if (typeof value === \"number\") return Number.isFinite(value) ? value : null;\n  if (typeof value === \"object\") {\n    if (Array.isArray(value)) {\n      const arr = [];\n\n      for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        arr[i] = v === undefined ? null : toPrimitiveObject(v);\n      }\n\n      return arr;\n    }\n    if (Object.prototype.toString.call(value) === \"[object Error]\") return {};\n    if (Object.prototype.toString.call(value) === \"[object Object]\") {\n      const obj: any = {};\n      for (const key of Object.keys(value)) {\n        const parsed = toPrimitiveObject(value[key]);\n        // Remove undefined fields\n        if (parsed !== undefined) obj[key] = parsed;\n      }\n      return obj;\n    }\n  }\n};\n\nexport const tracer = trace.getTracer(\"gadget-api-client\");\n\n/**\n * Get a string representing an error that is an `Error` object or anything else that might be `throw`n\n */\nexport const errorMessage = (error: unknown) => {\n  if (typeof error == \"string\") {\n    return error;\n  } else if (error && (error as any)?.message) {\n    return (error as any).message;\n  } else {\n    return String(error);\n  }\n};\n\n/** Wrap a function in tracing, and return it  */\nexport const traceFunction = <T extends (...args: any[]) => any>(name: string, func: T, options?: SpanOptions): T => {\n  return async function (this: any, ...args: Parameters<T>) {\n    const span = tracer.startSpan(name, options, context.active());\n    return await context.with(trace.setSpan(context.active(), span), async () => {\n      try {\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        const result = await func.call(this, ...args);\n        span.end();\n        return result;\n      } catch (err) {\n        span.setStatus({ code: SpanStatusCode.ERROR, message: errorMessage(err) });\n        span.end();\n        throw err;\n      }\n    });\n  } as T;\n};\n\nexport const getCurrentSpan = () => trace.getSpan(context.active());\n\n// Gadget Storage Test Key that minifies well\nconst key = \"gstk\";\n\n/** Detect if the window object and window.localStorage or window.sessionStorage objects are functional */\nexport const storageAvailable = (type: \"localStorage\" | \"sessionStorage\") => {\n  try {\n    const storage = window[type];\n    storage.setItem(key, key);\n    storage.removeItem(key);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n"]}
{"version":3,"file":"createHooks.js","sourceRoot":"","sources":["../../src/createHooks.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnyVariables, DocumentInput, OperationContext, RequestPolicy } from \"@urql/core\";\nimport { AnyClient } from \"./AnyClient.js\";\nimport { $gadgetConnection, GadgetConnection } from \"./GadgetConnection.js\";\nimport { RuntimeAdapter, UseMutationResponse, UseQueryArgs, UseQueryResponse } from \"./adaptors/types.js\";\nimport { createContexts } from \"./createContexts.js\";\nimport { debounce, noProviderErrorMessage } from \"./hooks/utils.js\";\n\nexport type UseGadgetQueryArgs<Variables extends AnyVariables, Data = any> = UseQueryArgs<Variables, Data> & {\n  /**\n   * Marks this query as one that should suspend the react component rendering while executing, instead of returning `{fetching: true}` to the caller.\n   * Useful if you want to allow components higher in the tree to show spinners instead of having every component manage its own loading state.\n   */\n  suspense?: boolean;\n};\n\nexport interface CoreHooks {\n  /**\n   * Get the current `GadgetConnection` object from context.\n   * Must be called within a component wrapped by `<Provider api={...} />`.\n   **/\n  useConnection: () => GadgetConnection;\n  /**\n   * Get the current `api` object from  context\n   * Must be called within a component wrapped by the `<Provider api={...} />` component.\n   **/\n  useApi: () => AnyClient;\n  /**\n   * Memoize and ensure a stable identity on a given value as long as it remains the same, structurally.\n   */\n  useStructuralMemo: <T>(value: T) => T;\n  useGadgetQuery: <Data = any, Variables extends AnyVariables = AnyVariables>(\n    args: UseGadgetQueryArgs<Variables, Data>\n  ) => UseQueryResponse<Data, Variables>;\n  useGadgetMutation: <Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>\n  ) => UseMutationResponse<Data, Variables>;\n}\n\ninterface QueryOptions {\n  context?: Partial<OperationContext>;\n  pause?: boolean;\n  requestPolicy?: RequestPolicy;\n  suspense?: boolean;\n}\n\nexport const createHooks = (adapter: RuntimeAdapter): CoreHooks => {\n  const { GadgetUrqlClientContext, GadgetConfigurationContext } = createContexts(adapter);\n\n  const useConnection = () => {\n    const urqlClient = adapter.framework.useContext(GadgetUrqlClientContext);\n    if (!urqlClient) throw new Error(noProviderErrorMessage);\n\n    const connection = (urqlClient as any)[$gadgetConnection] as unknown as GadgetConnection | undefined;\n\n    if (!connection) {\n      throw new Error(\n        `urql client found in context was not set up by the Gadget API client. Please ensure you are wrapping this hook with the <Provider/> component from either @gadgetinc/react or @gadgetinc/preact.\n  \n        Possible remedies:\n         - ensuring you have the <Provider/> component wrapped around your hook invocation\n         - ensuring you are passing a value to the provider, usually <Provider api={api}>\n         - ensuring your @gadget-client/<your-app> package and your @gadgetinc/react or @gadgetinc/preact package are up to date`\n      );\n    }\n\n    return connection;\n  };\n\n  const useApi = () => {\n    const gadgetContext = adapter.framework.useContext(GadgetConfigurationContext);\n    const urqlClient = adapter.framework.useContext(GadgetUrqlClientContext);\n    if (!gadgetContext || !(gadgetContext as any).api) {\n      if (urqlClient) {\n        throw new Error(\n          `useApi hook called in context with deprecated <Provider/> convention. Please ensure you are wrapping this hook with the <Provider/> component from @gadgetinc/react and passing it an instance of your api client, like <Provider api={api} />.\n  \n          The <Provider /> component is currently being passed a value, like <Provider value={api.connection.currentClient}/>. Please update this to <Provider api={api} />.`\n        );\n      } else {\n        throw new Error(\n          `useApi hook called in context where no Gadget API client is available. Please ensure you are wrapping this hook with the <Provider/> component from @gadgetinc/react.\n  \n        Possible remedies:\n         - ensuring you have the <Provider/> component wrapped around your hook invocation\n         - ensuring you are passing an api client instance to the provider, usually <Provider api={api}>\n         - ensuring your @gadget-client/<your-app> package and your @gadgetinc/react package are up to date`\n        );\n      }\n    }\n    return (gadgetContext as any).api as AnyClient;\n  };\n\n  const useMemoizedQueryOptions = <Options extends QueryOptions>(options?: Options): Options => {\n    const { context: _context, suspense: _suspense, ...rest } = options ?? {};\n\n    // use a memo as urql rerenders on context identity changes\n    const context = adapter.framework.useMemo(() => {\n      return {\n        suspense: !!options?.suspense,\n        ...options?.context,\n      };\n    }, [options?.suspense, options?.context]);\n\n    return {\n      ...rest,\n      context,\n    } as unknown as Options;\n  };\n\n  const useStructuralMemo = <T>(value: T) => {\n    const ref = adapter.framework.useRef<T>(value);\n\n    if (!adapter.framework.deepEqual(value, ref.current)) {\n      ref.current = value;\n    }\n\n    return ref.current;\n  };\n\n  const useDebouncedSearch = (props: { onDebouncedSearchValueChange?: () => void; debounceMilliseconds?: number }) => {\n    const { onDebouncedSearchValueChange, debounceMilliseconds } = props;\n    const [searchValue, setSearchValue] = adapter.framework.useState<string>(\"\");\n    const [debouncedSearchValue, setDebouncedSearchValue] = adapter.framework.useState<string>(\"\");\n\n    const debouncedSetSearchValue = adapter.framework.useCallback(\n      debounce((query: string) => {\n        setDebouncedSearchValue(query);\n        onDebouncedSearchValueChange?.();\n      }, debounceMilliseconds),\n      []\n    );\n\n    const search = {\n      value: searchValue,\n      debouncedValue: debouncedSearchValue,\n      set: (query: string) => {\n        setSearchValue(query);\n        debouncedSetSearchValue(query);\n      },\n      clear: () => {\n        // Instant without debounce\n        setSearchValue(\"\");\n        setDebouncedSearchValue(\"\");\n        onDebouncedSearchValueChange?.();\n      },\n    };\n\n    return search;\n  };\n\n  const useGadgetQuery = <Data = any, Variables extends AnyVariables = AnyVariables>(args: UseGadgetQueryArgs<Variables, Data>) => {\n    if (!adapter.framework.useContext(GadgetUrqlClientContext)) throw new Error(noProviderErrorMessage);\n    const options = useMemoizedQueryOptions(args);\n    return adapter.urql.useQuery<Data, Variables>(options);\n  };\n\n  const useGadgetMutation = <Data = any, Variables extends AnyVariables = AnyVariables>(query: DocumentInput<Data, Variables>) => {\n    if (!adapter.framework.useContext(GadgetUrqlClientContext)) throw new Error(noProviderErrorMessage);\n    return adapter.urql.useMutation<Data, Variables>(query);\n  };\n\n  return {\n    useConnection,\n    useApi,\n    useStructuralMemo,\n    useGadgetQuery,\n    useGadgetMutation,\n  };\n};\n"]}
{"version":3,"file":"AnyClient.js","sourceRoot":"","sources":["../../src/AnyClient.ts"],"names":[],"mappings":";;;AAKa,QAAA,mBAAmB,GAAG,MAAM,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;AAC9D,QAAA,mBAAmB,GAAG,MAAM,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC","sourcesContent":["import type { AnyConnection } from \"./AnyConnection.js\";\nimport type { AnyCoreImplementation } from \"./AnyCoreImplementation.js\";\nimport type { AnyGadgetTransaction } from \"./AnyGadgetTransaction.js\";\nimport type { AnyInternalModelManager } from \"./AnyInternalModelManager.js\";\n\nexport const $modelRelationships = Symbol.for(\"gadget/modelRelationships\");\nexport const $coreImplementation = Symbol.for(\"gadget/coreImplementation\");\n\nexport type InternalModelManagerNamespace = {\n  // internal model managers can be maps of model names to model managers, subnamespaces, or utility functions\n  [key: string]: AnyInternalModelManager | InternalModelManagerNamespace | ((...args: any[]) => any);\n};\n\n/**\n * An instance of any Gadget app's API client object\n */\nexport interface AnyClient {\n  connection: AnyConnection;\n  query(graphQL: string, variables?: Record<string, any>): Promise<any>;\n  mutate(graphQL: string, variables?: Record<string, any>): Promise<any>;\n  transaction<T>(callback: (transaction: AnyGadgetTransaction) => Promise<T>): Promise<T>;\n  internal: InternalModelManagerNamespace;\n  [$modelRelationships]?: { [modelName: string]: { [apiIdentifier: string]: { type: string; model: string } } };\n  [$coreImplementation]?: AnyCoreImplementation;\n}\n"]}
{"version":3,"file":"AnyInternalModelManager.js","sourceRoot":"","sources":["../../src/AnyInternalModelManager.ts"],"names":[],"mappings":"","sourcesContent":["import { AnyConnection } from \"./AnyConnection.js\";\nimport type { AnyGadgetRecord, AnyGadgetRecordList, RecordShape } from \"./AnyGadgetRecord.js\";\nimport type { AnyFilter, InternalFindListOptions, InternalFindManyOptions, InternalFindOneOptions } from \"./types.js\";\n\nexport type RecordData = Record<string, any>;\n\nexport interface AnyInternalModelManager<Shape extends RecordShape = RecordData> {\n  connection: AnyConnection;\n  findOne: (id: string, options?: InternalFindOneOptions, throwOnEmptyData?: boolean) => Promise<AnyGadgetRecord<Shape>>;\n  maybeFindOne: (id: string, options?: InternalFindOneOptions) => Promise<AnyGadgetRecord<Shape> | null>;\n  findMany: (options?: InternalFindManyOptions) => Promise<AnyGadgetRecordList<Shape>>;\n  findFirst: (options?: InternalFindListOptions, throwOnEmptyData?: boolean) => Promise<AnyGadgetRecord<Shape>>;\n  maybeFindFirst: (options?: InternalFindListOptions) => Promise<AnyGadgetRecord<Shape> | null>;\n  create: (record: RecordData) => Promise<AnyGadgetRecord<Shape>>;\n  bulkCreate: (records: RecordData[]) => Promise<AnyGadgetRecord<Shape>[]>;\n  update: (id: string, record: RecordData) => Promise<AnyGadgetRecord<Shape>>;\n  upsert: (record: RecordData & { on?: string[] }) => Promise<AnyGadgetRecord<Shape>>;\n  delete: (id: string) => Promise<void>;\n  deleteMany: (options?: { search?: string; filter?: AnyFilter }) => Promise<void>;\n}\n"]}
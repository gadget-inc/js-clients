{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { FieldSelection } from \"./FieldSelection.js\";\n\n/**\n * Limit the keys in T to only those that also exist in U. AKA Subset or Intersection.\n */\nexport type LimitToKnownKeys<T, U> = {\n  [Key in keyof T]: Key extends keyof U ? T[Key] : never;\n};\n\n/**\n * Given an options object from a find method, default the type of the selection to a default if no selection is passed\n */\nexport type DefaultSelection<\n  SelectionType,\n  Options extends Selectable<SelectionType>,\n  Defaults extends SelectionType\n> = Options[\"select\"] extends SelectionType ? Options[\"select\"] : Defaults;\n\n/**\n * Describes any object that can have a selection specified\n */\nexport interface Selectable<SelectionType> {\n  /** Select fields other than the defaults of the record to return */\n  select?: SelectionType | null;\n}\n\n/**\n * Get any keys of `Selection` that are not mapped to `never`\n */\nexport type NonNeverKeys<Selection> = {\n  [Key in keyof Selection]: Selection[Key] extends never ? never : Key;\n}[keyof Selection];\n\n/**\n * Filter out any keys in `T` that are mapped to `never`.\n */\nexport type FilterNever<T extends Record<string, unknown>> = NonNeverKeys<T> extends never ? never : { [Key in NonNeverKeys<T>]: T[Key] };\n\ntype InnerSelect<Schema, Selection extends FieldSelection | null | undefined> = Selection extends null | undefined\n  ? never\n  : Schema extends (infer T)[]\n  ? InnerSelect<T, Selection>[]\n  : Schema extends null\n  ? InnerSelect<Exclude<Schema, null>, Selection> | null\n  : {\n      [Key in keyof Selection & keyof Schema]: Selection[Key] extends true\n        ? Schema[Key]\n        : Selection[Key] extends FieldSelection\n        ? InnerSelect<Schema[Key], Selection[Key]>\n        : never;\n    };\n\n/**\n * Filter out any keys in `T` that are mapped to `never` recursively. Any nested objects that are empty after having never valued keys removed are also removed.\n *\n * ```typescript\n * type Thing = DeepFilterNever<\n *  { a: { b: never }, c: string }\n * >;  // { c: string; }\n * ```\n */\nexport type DeepFilterNever<T> = T extends Record<string, unknown>\n  ? FilterNever<{\n      [Key in keyof T]: T[Key] extends Record<string, unknown> ? DeepFilterNever<T[Key]> : T[Key];\n    }>\n  : T;\n\n/**\n * Extract a subset of a schema given a selection\n *\n * ```typescript\n * type Selection = Select<\n *  { apple: \"red\", banana: \"yellow\", orange: \"orange\" },\n *  { apple: true, banana: false }\n * >;  // { apple: \"red\" }\n * ```\n */\nexport type Select<Schema, Selection extends FieldSelection | null | undefined> = DeepFilterNever<InnerSelect<Schema, Selection>>;\n"]}
{"version":3,"file":"PolarisAutoTable.js","sourceRoot":"","sources":["../../../../../../src/components/auto/adapters/polaris/PolarisAutoTable.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { FindManyFunction } from \"@gadgetinc/api-client-core\";\nimport type { DataTableProps } from \"@shopify/polaris\";\nimport { DataTable, Pagination, SkeletonBodyText } from \"@shopify/polaris\";\nimport type { ReactNode } from \"react\";\nimport React, { useMemo } from \"react\";\nimport { FieldType } from \"../../../../metadata\";\nimport { useTable } from \"../../../../useTable\";\nimport type { OptionsType } from \"../../../../utils\";\nimport type { AutoTableProps } from \"../../AutoTable\";\nimport { PolarisErrorDisplay } from \"./PolarisErrorDisplay\";\n\nconst PolarisSkeletonTable = (props: { columns: number }) => {\n  const count = Array.from(Array(props.columns));\n  return (\n    <DataTable\n      columnContentTypes={count.map(() => \"text\")}\n      headings={count.map((i) => (\n        <SkeletonBodyText key={i} lines={1} />\n      ))}\n      rows={Array.from(Array(3)).map((_) => count.map((i) => <SkeletonBodyText key={i} lines={1} />))}\n    />\n  );\n};\n\n/**\n * Renders a table of records from the backend automatically for a given model using Polaris\n */\nexport const PolarisAutoTable = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n  Options extends FinderFunction[\"optionsType\"]\n>(\n  props: AutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>\n) => {\n  const [{ rows, columns, metadata, fetching, page, error }, refresh] = useTable<GivenOptions, SchemaT, FinderFunction, Options>(\n    props.manager,\n    {\n      select: props.select,\n    } as any\n  );\n\n  const polarisTableProps = useMemo(() => {\n    const columnContentTypes: DataTableProps[\"columnContentTypes\"] = Array(columns?.length ?? 0);\n    const headings: ReactNode[] = Array(columns?.length ?? 0);\n    const sortable: boolean[] = Array(columns?.length ?? 0);\n\n    if (columns) {\n      for (const column of columns) {\n        columnContentTypes.push(column.fieldType == FieldType.Number ? \"numeric\" : \"text\");\n        headings.push(column.name);\n        sortable.push(column.sortable);\n      }\n    }\n\n    return { columnContentTypes, headings, sortable };\n  }, [metadata]);\n\n  if (fetching && !rows) {\n    return <PolarisSkeletonTable columns={polarisTableProps.headings.length} />;\n  }\n\n  if (error) {\n    return <PolarisErrorDisplay error={error} retry={refresh} />;\n  }\n  const rowsArray = rows && columns ? rows.map((row) => columns.map((column) => row[column.apiIdentifier])) : [];\n\n  return (\n    <DataTable\n      {...polarisTableProps}\n      rows={rowsArray}\n      footerContent={\n        <Pagination\n          hasNext={page.hasNextPage}\n          hasPrevious={page.hasPreviousPage}\n          onNext={page.goToNextPage}\n          onPrevious={page.goToPreviousPage}\n        />\n      }\n    />\n  );\n};\n"]}
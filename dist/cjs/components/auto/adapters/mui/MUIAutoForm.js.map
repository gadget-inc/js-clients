{"version":3,"file":"MUIAutoForm.js","sourceRoot":"","sources":["../../../../../../src/components/auto/adapters/mui/MUIAutoForm.tsx"],"names":[],"mappings":";;;;;;AACA,kCAAyC;AAEzC,4CAAsD;AACtD,kDAA0B;AAC1B,mDAAyD;AACzD,6DAA0D;AAG1D,6CAAsE;AACtE,uDAAoD;AACpD,iDAA8C;AAEvC,MAAM,eAAe,GAAG,GAAG,EAAE,CAAC,CACnC;IACE,8BAAC,mBAAQ,IAAC,SAAS,EAAC,MAAM,GAAG;IAC7B,8BAAC,mBAAQ,IAAC,SAAS,EAAC,MAAM,GAAG,CAC5B,CACJ,CAAC;AALW,QAAA,eAAe,mBAK1B;AASF;;GAEG;AACI,MAAM,WAAW,GAAG,CAMzB,KAAmE,EACnE,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IAEpH,6EAA6E;IAC7E,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,IAAA,4BAAiB,EAAC,MAAM,CAAC,CAAC;IAEjG,6EAA6E;IAC7E,MAAM,MAAM,GAAG,IAAA,wBAAa,EAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAE9C,sCAAsC;IACtC,MAAM,EACJ,MAAM,EACN,OAAO,EACP,KAAK,EAAE,SAAS,EAChB,QAAQ,EAAE,YAAY,EACtB,mBAAmB,GACpB,GAAG,IAAA,6BAAa,EAAC,MAAM,EAAE;QACxB,MAAM,EAAE,KAAK,CAAC,MAAM;QACpB,QAAQ,EAAE,IAAA,gCAAqB,EAAC,QAAQ,CAAC;QACzC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;KACnC,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG,SAAS,IAAI,aAAa,CAAC;IACzC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;QACpC,OAAO,8BAAC,iCAAe,IAAC,KAAK,EAAE,KAAK,GAAI,CAAC;KAC1C;IAED,IAAI,mBAAmB,EAAE;QACvB,OAAO,KAAK,CAAC,cAAc,IAAI,8BAAC,gBAAK,IAAC,QAAQ,EAAC,SAAS,EAAC,KAAK,EAAE,SAAS,QAAQ,EAAE,IAAI,gBAAgB,GAAI,CAAC;KAC7G;IAED,OAAO,CACL,8BAAC,eAAI,IAAC,SAAS,QAAC,SAAS,EAAC,MAAM,EAAC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,KAAK,MAAM,EAAE,KAAM,IAAI;QACjF,gBAAgB,IAAI,8BAAC,uBAAe,OAAG;QAEvC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAC7B,8BAAC,eAAI,IAAC,IAAI,QAAC,GAAG,EAAE,KAAK,CAAC,aAAa,EAAE,EAAE,EAAE,EAAE;YACzC,8BAAC,2BAAY,IAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,GAAI,CACvD,CACR,CAAC;QACF,8BAAC,eAAI,IAAC,IAAI,QAAC,EAAE,EAAE,EAAE;YACf,8BAAC,mBAAa,IAAC,OAAO,EAAE,YAAY,EAAE,IAAI,EAAC,QAAQ,IAC/C,KAAK,CAAC,WAAmB,IAAI,QAAQ,CACzB,CACX,CACF,CACR,CAAC;AACJ,CAAC,CAAC;AAtDW,QAAA,WAAW,eAsDtB","sourcesContent":["import type { ActionFunction } from \"@gadgetinc/api-client-core\";\nimport { LoadingButton } from \"@mui/lab\";\nimport type { GridProps } from \"@mui/material\";\nimport { Alert, Grid, Skeleton } from \"@mui/material\";\nimport React from \"react\";\nimport { useActionMetadata } from \"../../../../metadata\";\nimport { useActionForm } from \"../../../../useActionForm\";\nimport type { OptionsType } from \"../../../../utils\";\nimport type { AutoFormProps } from \"../../AutoForm\";\nimport { useFormFields, useValidationResolver } from \"../../AutoForm\";\nimport { MUIErrorDisplay } from \"./MUIErrorDisplay\";\nimport { MUIFormInput } from \"./MUIFormInput\";\n\nexport const MUIFormSkeleton = () => (\n  <>\n    <Skeleton animation=\"wave\" />\n    <Skeleton animation=\"wave\" />\n  </>\n);\n\nexport type MUIAutoFormProps<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"]\n> = AutoFormProps<GivenOptions, SchemaT, ActionFunc, Options> & GridProps;\n\n/**\n * Renders a form for an action on a model automatically using MUI\n */\nexport const MUIAutoForm = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"]\n>(\n  props: MUIAutoFormProps<GivenOptions, SchemaT, ActionFunc, Options>\n) => {\n  const { action, include: _include, exclude: _exclude, fields: _fields, submitLabel: _submitLabel, ...rest } = props;\n\n  // fetch metadata describing this actions inputs and outputs from the backend\n  const { metadata, fetching: fetchingMetadata, error: metadataError } = useActionMetadata(action);\n\n  // filter down the fields to render only what we want to render for this form\n  const fields = useFormFields(metadata, props);\n\n  // setup the form state for the action\n  const {\n    submit,\n    control,\n    error: formError,\n    fetching: formFetching,\n    submissionCompleted,\n  } = useActionForm(action, {\n    record: props.record,\n    resolver: useValidationResolver(metadata),\n    send: fields.map(([path]) => path),\n  });\n\n  const error = formError ?? metadataError;\n  if (error && !error.validationErrors) {\n    return <MUIErrorDisplay error={error} />;\n  }\n\n  if (submissionCompleted) {\n    return props.successContent ?? <Alert severity=\"success\" title={`Saved ${metadata?.name} successfully.`} />;\n  }\n\n  return (\n    <Grid container component=\"form\" spacing={2} onSubmit={() => void submit()} {...rest}>\n      {fetchingMetadata && <MUIFormSkeleton />}\n\n      {fields.map(([path, field]) => (\n        <Grid item key={field.apiIdentifier} xs={12}>\n          <MUIFormInput path={path} field={field} control={control} />\n        </Grid>\n      ))}\n      <Grid item xs={12}>\n        <LoadingButton loading={formFetching} type=\"submit\">\n          {(props.submitLabel as any) ?? \"Submit\"}\n        </LoadingButton>\n      </Grid>\n    </Grid>\n  );\n};\n"]}
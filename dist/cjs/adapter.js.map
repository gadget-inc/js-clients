{"version":3,"file":"adapter.js","sourceRoot":"","sources":["../../src/adapter.ts"],"names":[],"mappings":"","sourcesContent":["import type { AnyClient, AnyConnection } from \"@gadgetinc/core\";\nimport type {\n  AnyVariables,\n  Client,\n  CombinedError,\n  DocumentInput,\n  GraphQLRequestParams,\n  Operation,\n  OperationContext,\n  OperationResult,\n  RequestPolicy,\n} from \"@urql/core\";\n\ntype Dispose = void | (() => void);\ntype AnyActionArg = [] | [any];\ntype ActionDispatch<ActionArg extends AnyActionArg> = (...args: ActionArg) => void;\n\ntype Context<_T> = {\n  Provider: unknown;\n  Consumer: unknown;\n};\n\ninterface FrameworkBindings {\n  deepEqual: <A, B>(a: A, b: B) => boolean;\n  useEffect: (fn: () => Dispose, deps?: any[]) => void;\n  useMemo: <T>(factory: () => T, deps: any[]) => T;\n  useRef: <T>(initial: T) => { current: T };\n  useState: <T>(initial: T | (() => T)) => [T, (next: T) => void];\n  useContext: <T>(ctx: any) => T;\n  createContext: <T>(defaultValue: T) => Context<T>;\n  useCallback: <T extends (...args: any[]) => any>(fn: T, deps: any[]) => T;\n  useReducer: <S, I, A extends AnyActionArg>(\n    reducer: (prevState: S, ...args: A) => S,\n    initialArg: I,\n    init?: (i: I) => S\n  ) => [S, ActionDispatch<A>];\n  Fragment: unknown;\n}\n\nexport type UseQueryArgs<Variables extends AnyVariables = AnyVariables, Data = any> = {\n  requestPolicy?: RequestPolicy;\n  context?: Partial<OperationContext>;\n  pause?: boolean;\n} & GraphQLRequestParams<Data, Variables>;\n\nexport interface UseQueryState<Data = any, Variables extends AnyVariables = AnyVariables> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\ntype UseQueryExecute = (opts?: Partial<OperationContext>) => void;\n\nexport type UseQueryResponse<Data = any, Variables extends AnyVariables = AnyVariables> = [UseQueryState<Data, Variables>, UseQueryExecute];\n\nexport interface UseMutationState<Data = any, Variables extends AnyVariables = AnyVariables> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\ntype UseMutationExecute<Data = any, Variables extends AnyVariables = AnyVariables> = (\n  variables: Variables,\n  context?: Partial<OperationContext>\n) => Promise<OperationResult<Data, Variables>>;\n\nexport type UseMutationResponse<Data = any, Variables extends AnyVariables = AnyVariables> = [\n  UseMutationState<Data, Variables>,\n  UseMutationExecute<Data, Variables>\n];\n\ninterface UrqlBindings {\n  Provider: (props: { client: Client; children: any }) => any;\n  useQuery: <Data = any, Variables extends AnyVariables = AnyVariables>(\n    args: UseQueryArgs<Variables, Data>\n  ) => UseQueryResponse<Data, Variables>;\n  useMutation: <Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>\n  ) => UseMutationResponse<Data, Variables>;\n}\n\nexport interface GadgetApiContext {\n  api: AnyClient;\n  connection: AnyConnection;\n}\n\nexport interface RuntimeAdapter {\n  GadgetApiContext: Context<GadgetApiContext>;\n  framework: FrameworkBindings;\n  urql: UrqlBindings;\n}\n"]}
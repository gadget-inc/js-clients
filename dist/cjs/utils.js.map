{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;;AAcA;;IAEI;AACG,MAAM,YAAY,GAAG,CAAuD,IAAU,EAAE,OAAiB,EAAO,EAAE,CAAC,CAAC;IACzH,KAAK,EAAE,IAAI,CAAC,KAAK;IACjB,SAAS,EAAE,IAAI,CAAC,SAAS;IACzB,GAAG,OAAO;CACX,CAAC,CAAC;AAJU,QAAA,YAAY,gBAItB;AAEU,QAAA,sBAAsB,GAAG,+GAA+G,CAAC;AAEtJ,SAAgB,MAAM,CAAI,KAA2B,EAAE,OAAgB;IACrE,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvE,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AALD,wBAKC","sourcesContent":["import type { OperationContext, RequestPolicy } from \"@urql/core\";\n\ninterface QueryPlan {\n  variables: any;\n  query: string;\n}\n\ninterface QueryOptions {\n  context?: Partial<OperationContext>;\n  pause?: boolean;\n  requestPolicy?: RequestPolicy;\n  suspense?: boolean;\n}\n\n/**\n * Given a plan from a gadget query plan generator, create the query options object to pass to `urql`'s `useQuery` hook\n **/\nexport const useQueryArgs = <Plan extends QueryPlan, Options extends QueryOptions>(plan: Plan, options?: Options): any => ({\n  query: plan.query,\n  variables: plan.variables,\n  ...options,\n});\n\nexport const noProviderErrorMessage = `Could not find a client in the context of Provider. Please ensure you wrap the root component in a <Provider>`;\n\nexport function assert<T>(value: T | undefined | null, message?: string): T {\n  if (!value) {\n    throw new Error(\"assertion error\" + (message ? `: ${message}` : \"\"));\n  }\n  return value;\n}\n"]}
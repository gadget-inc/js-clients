{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["export interface FieldSelection {\n  [key: string]: boolean | null | undefined | FieldCall | FieldSelection;\n}\n\nexport interface BuilderOperation {\n  type: \"query\" | \"subscription\" | \"mutation\";\n  fields: FieldSelection;\n  name?: string;\n  directives?: string[];\n}\n\nconst compileFieldSelection = (fields: FieldSelection): string[] => {\n  return Object.entries(fields)\n    .flatMap(([field, value]) => {\n      if (typeof value === \"boolean\") {\n        return value ? field : false;\n      } else if (value instanceof FieldCall) {\n        let args = \"\";\n        const signatures = Object.entries(value.args)\n          .filter(([_, value]) => value !== null && value !== undefined)\n          .map(([name, value]) => {\n            return `${name}: ${value instanceof Variable ? `$${value.name ?? name}` : JSON.stringify(value)}`;\n          });\n\n        if (signatures.length > 0) {\n          args = `(${signatures.join(\", \")})`;\n        }\n\n        if (value.subselection) {\n          return [`${field}${args} {`, ...compileFieldSelection(value.subselection), `}`];\n        } else {\n          return `${field}${args}`;\n        }\n      } else {\n        return [`${field} {`, ...compileFieldSelection(value as FieldSelection), `}`];\n      }\n    })\n    .filter((value) => !!value)\n    .map((line) => \"  \" + line);\n};\n\nconst extractVariables = (fields: FieldSelection): Record<string, Variable> => {\n  const variables: Record<string, Variable> = {};\n  const nextName = (name: string) => {\n    let count = 1;\n    if (variables[name]) {\n      while (variables[`${name}${count}`]) {\n        count++;\n      }\n      return `${name}${count}`;\n    }\n    return name;\n  };\n\n  Object.entries(fields).forEach(([_field, value]) => {\n    if (value instanceof FieldCall) {\n      Object.entries(value.args).forEach(([name, value]) => {\n        if (value instanceof Variable) {\n          variables[value.name ?? nextName(name)] = value;\n        }\n      });\n    } else if (typeof value === \"object\" && value !== null) {\n      Object.assign(variables, extractVariables(value));\n    }\n  });\n\n  return variables;\n};\n\nconst compileVariables = (operation: BuilderOperation) => {\n  const variables = extractVariables(operation.fields);\n\n  if (Object.keys(variables).length === 0) return \"\";\n  const signatures = Object.entries(variables).map(([name, variable]) => {\n    return `$${name}: ${variable.type}`;\n  });\n\n  return `(${signatures.join(\", \")})`;\n};\n\nclass FieldCall {\n  constructor(readonly args: Record<string, any>, readonly subselection?: FieldSelection) {}\n}\n\nexport interface VariableOptions {\n  type: string;\n  name?: string;\n  value?: any;\n  required?: boolean;\n}\n\n/** Represents one reference to a variable somewhere in a selection */\nexport class Variable {\n  constructor(readonly type: string, readonly name?: string, readonly value?: any) {}\n  present() {\n    return this.value != null;\n  }\n}\n\n/** Used for calling a field with arguments within the main body of a query */\nexport const Call = (args: Record<string, Variable | any>, subselection?: FieldSelection) => new FieldCall(args, subselection);\n\n/** Used for calling a field with a variable within the args to a field */\nexport const Var = (options: VariableOptions) => new Variable(options.type + (options.required ? \"!\" : \"\"), options.name, options.value);\n\n/** Compiles one JS object describing a query into a GraphQL string */\nexport const compile = (operation: BuilderOperation): string => {\n  const signature = compileVariables(operation);\n  const directives = operation.directives && operation.directives.length > 0 ? ` ${operation.directives.join(\" \")}` : \"\";\n\n  return `${operation.type} ${operation.name ?? \"\"}${signature}${directives} {\n${compileFieldSelection(operation.fields).join(\"\\n\")}\n}`;\n};\n\n/** Compiles one JS object describing a query into a GraphQL string and set of variable values for passing alongside the query */\nexport const compileWithVariableValues = (operation: BuilderOperation): { query: string; variables: Record<string, any> } => {\n  const variables = extractVariables(operation.fields);\n\n  return {\n    query: compile(operation),\n    variables: Object.entries(variables ?? {}).reduce((acc, [name, variable]) => {\n      if (typeof variable.value !== \"undefined\") {\n        acc[name] = variable.value;\n      }\n      return acc;\n    }, {} as Record<string, any>),\n  };\n};\n"]}
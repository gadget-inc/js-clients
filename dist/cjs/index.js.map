{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";;;;AAAA,wDAA8B;AAkF9B,mBAAmB;AACN,QAAA,sBAAsB,GAAG,oBAAoB,CAAC;AAC3D,MAAa,eAAgB,SAAQ,WAEnC;IAFF;;QAGW;;;;mBAAO,8BAAsB;WAAC;IACzC,CAAC;CAAA;AAJD,0CAIC","sourcesContent":["export * from \"./Provider.js\";\n\n// types from https://github.com/openai/openai-apps-sdk-examples/blob/bebecf5cf2205c3ab1949edec54197ae0cc1613e/src/types.ts\nexport type OpenAiGlobals<\n  ToolInput = UnknownObject,\n  ToolOutput = UnknownObject,\n  ToolResponseMetadata = UnknownObject,\n  WidgetState = UnknownObject\n> = {\n  // visuals\n  theme: Theme;\n\n  userAgent: UserAgent;\n  locale: string;\n\n  // layout\n  maxHeight: number;\n  displayMode: DisplayMode;\n  safeArea: SafeArea;\n\n  // state\n  toolInput: ToolInput;\n  toolOutput: ToolOutput | null;\n  toolResponseMetadata: ToolResponseMetadata | null;\n  widgetState: WidgetState | null;\n  setWidgetState: (state: WidgetState) => Promise<void>;\n};\n\n// currently copied from types.ts in chatgpt/web-sandbox.\n// Will eventually use a public package.\ntype API = {\n  callTool: CallTool;\n  sendFollowUpMessage: (args: { prompt: string }) => Promise<void>;\n  openExternal(payload: { href: string }): void;\n\n  // Layout controls\n  requestDisplayMode: RequestDisplayMode;\n};\n\nexport type UnknownObject = Record<string, unknown>;\n\nexport type Theme = \"light\" | \"dark\";\n\nexport type SafeAreaInsets = {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n};\n\nexport type SafeArea = {\n  insets: SafeAreaInsets;\n};\n\nexport type DeviceType = \"mobile\" | \"tablet\" | \"desktop\" | \"unknown\";\n\nexport type UserAgent = {\n  device: { type: DeviceType };\n  capabilities: {\n    hover: boolean;\n    touch: boolean;\n  };\n};\n\n/** Display mode */\nexport type DisplayMode = \"pip\" | \"inline\" | \"fullscreen\";\nexport type RequestDisplayMode = (args: { mode: DisplayMode }) => Promise<{\n  /**\n   * The granted display mode. The host may reject the request.\n   * For mobile, PiP is always coerced to fullscreen.\n   */\n  mode: DisplayMode;\n}>;\n\nexport type CallToolResponse = {\n  result: string;\n  structuredResult: unknown;\n};\n\n/** Calling APIs */\nexport type CallTool = (name: string, args: Record<string, unknown>) => Promise<CallToolResponse>;\n\n/** Extra events */\nexport const SET_GLOBALS_EVENT_TYPE = \"openai:set_globals\";\nexport class SetGlobalsEvent extends CustomEvent<{\n  globals: Partial<OpenAiGlobals>;\n}> {\n  readonly type = SET_GLOBALS_EVENT_TYPE;\n}\n\n/**\n * Global oai object injected by the web sandbox for communicating with chatgpt host page.\n */\ndeclare global {\n  interface Window {\n    openai: API & OpenAiGlobals;\n  }\n\n  interface WindowEventMap {\n    [SET_GLOBALS_EVENT_TYPE]: SetGlobalsEvent;\n  }\n}\n"]}
{"version":3,"file":"useGlobalAction.js","sourceRoot":"","sources":["../../../src/hooks/useGlobalAction.ts"],"names":[],"mappings":"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","sourcesContent":["import { OperationContext } from \"@urql/core\";\nimport { GlobalActionFunction, StubbedActionFunction } from \"../GadgetFunctions.js\";\nimport { RuntimeAdapter, UseMutationState } from \"../adaptors/types.js\";\nimport { CoreHooks } from \"../createHooks.js\";\nimport { globalActionOperation } from \"../operationBuilders.js\";\nimport { get, namespaceDataPath } from \"../support.js\";\nimport { ActionHookResultWithOptionalCallbackVariables, ErrorWrapper } from \"./utils.js\";\n\nexport const createUseGlobalAction = (adapter: RuntimeAdapter, coreHooks: CoreHooks) => {\n  const useGlobalAction = <F extends GlobalActionFunction<any>>(\n    action: F\n  ): ActionHookResultWithOptionalCallbackVariables<any, Exclude<F[\"variablesType\"], null | undefined>> => {\n    adapter.framework.useEffect(() => {\n      if (action.type === (\"stubbedAction\" as string)) {\n        const stubbedAction = action as unknown as StubbedActionFunction<any>;\n        if (!(\"reason\" in stubbedAction) || !(\"dataPath\" in stubbedAction)) {\n          // Don't dispatch an event if the generated client has not yet been updated with the updated parameters\n          return;\n        }\n\n        const event = new CustomEvent(\"gadget:devharness:stubbedActionError\", {\n          detail: {\n            reason: stubbedAction.reason,\n            action: {\n              functionName: stubbedAction.functionName,\n              actionApiIdentifier: stubbedAction.actionApiIdentifier,\n              dataPath: stubbedAction.dataPath,\n            },\n          },\n        });\n        globalThis.dispatchEvent(event);\n      }\n    }, []);\n\n    const plan = adapter.framework.useMemo(() => {\n      return globalActionOperation(action.operationName, action.variables, action.namespace);\n    }, [action]);\n\n    const [result, runMutation] = coreHooks.useGadgetMutation<any, F[\"variablesType\"]>(plan.query);\n\n    const transformedResult = adapter.framework.useMemo(() => processResult(result, action), [result, action]);\n\n    return [\n      transformedResult,\n      adapter.framework.useCallback(\n        async (variables?: F[\"variablesType\"], context?: Partial<OperationContext>) => {\n          const result = await runMutation(variables ?? {}, context);\n          return processResult({ fetching: false, ...result }, action);\n        },\n        [action, runMutation]\n      ),\n    ];\n  };\n\n  return {\n    /**\n     * Hook to run a Gadget model action.\n     *\n     * @param action any action function from a Gadget manager\n     *\n     * @example\n     * ```\n     * export function FlipAllWidgets(props: { name: string; email: string }) {\n     *   const [result, flipAllWidgets] = useGlobalAction(Client.flipAllWidgets);\n     *\n     *   return (\n     *     <>\n     *       {result.error && <>Failed to flip all widgets: {result.error.toString()}</>}\n     *       {result.fetching && <>Flipping all widgets...</>}\n     *       {result.data && <>Flipped all widgets</>}\n     *       <button onClick={() => flipAllWidgets()}>Flip all widgets</button>\n     *     </>\n     *   );\n     * }\n     */\n    useGlobalAction,\n  };\n};\n\nconst processResult = (result: UseMutationState<any, any>, action: GlobalActionFunction<any>) => {\n  let error = ErrorWrapper.forMaybeCombinedError(result.error);\n  let data = undefined;\n  if (result.data) {\n    const dataPath = namespaceDataPath([action.operationName], action.namespace);\n    data = get(result.data, dataPath);\n    if (data) {\n      const errors = data.errors;\n      data = data.result;\n      if (errors && errors[0]) {\n        error = ErrorWrapper.forErrorsResponse(errors);\n      }\n    }\n  }\n  return { ...result, error, data };\n};\n"]}
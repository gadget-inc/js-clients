{"version":3,"file":"useOpenAiGlobal.js","sourceRoot":"","sources":["../../../src/hooks/useOpenAiGlobal.ts"],"names":[],"mappings":";;;AAAA,iCAA6C;AAC7C,0CAA2E;AAG3E;;;;;;;;;;;;;;;;;;GAkBG;AACH,SAAgB,eAAe,CAAgC,GAAM;IACnE,OAAO,IAAA,4BAAoB,EACzB,CAAC,QAAQ,EAAE,EAAE;QACX,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;YAClC,OAAO,GAAG,EAAE;gBACV,QAAQ;YACV,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,eAAe,GAAG,CAAC,KAAsB,EAAE,EAAE;YACjD,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACxC,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;gBACxB,OAAO;YACT,CAAC;YAED,QAAQ,EAAE,CAAC;QACb,CAAC,CAAC;QAEF,MAAM,CAAC,gBAAgB,CAAC,iCAAsB,EAAE,eAAe,EAAE;YAC/D,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;QAEH,OAAO,GAAG,EAAE;YACV,MAAM,CAAC,mBAAmB,CAAC,iCAAsB,EAAE,eAAe,CAAC,CAAC;QACtE,CAAC,CAAC;IACJ,CAAC,EACD,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,IAAI,EAClC,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,IAAI,CACnC,CAAC;AACJ,CAAC;AA7BD,0CA6BC","sourcesContent":["import { useSyncExternalStore } from \"react\";\nimport { SET_GLOBALS_EVENT_TYPE, type SetGlobalsEvent } from \"../index.js\";\nimport type { OpenAiGlobals } from \"../types.js\";\n\n/**\n * Low-level hook for accessing OpenAI global values by key.\n *\n * This hook subscribes to changes in the OpenAI global context and returns the\n * current value for the specified key. It automatically re-renders the component\n * when the value changes.\n *\n * Most apps should use the more specific hooks like `useDisplayMode`, `useMaxHeight`,\n * `useWidgetProps`, etc. instead of using this hook directly.\n *\n * @param key - The key of the OpenAI global value to access\n * @returns The current value for the specified key, or null if not available\n *\n * @example\n * ```tsx\n * const theme = useOpenAiGlobal(\"theme\");\n * const locale = useOpenAiGlobal(\"locale\");\n * ```\n */\nexport function useOpenAiGlobal<K extends keyof OpenAiGlobals>(key: K): OpenAiGlobals[K] | null {\n  return useSyncExternalStore(\n    (onChange) => {\n      if (typeof window === \"undefined\") {\n        return () => {\n          // no op\n        };\n      }\n\n      const handleSetGlobal = (event: SetGlobalsEvent) => {\n        const value = event.detail.globals[key];\n        if (value === undefined) {\n          return;\n        }\n\n        onChange();\n      };\n\n      window.addEventListener(SET_GLOBALS_EVENT_TYPE, handleSetGlobal, {\n        passive: true,\n      });\n\n      return () => {\n        window.removeEventListener(SET_GLOBALS_EVENT_TYPE, handleSetGlobal);\n      };\n    },\n    () => window.openai?.[key] ?? null,\n    () => window.openai?.[key] ?? null\n  );\n}\n"]}
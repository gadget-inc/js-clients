{"version":3,"file":"useAction.js","sourceRoot":"","sources":["../../../src/hooks/useAction.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnyVariables, OperationContext } from \"@urql/core\";\nimport { ActionFunction, StubbedActionFunction } from \"../GadgetFunctions.js\";\nimport { GadgetRecord } from \"../GadgetRecord.js\";\nimport type { RuntimeAdapter, UseMutationState } from \"../adaptors/types.js\";\nimport type { CoreHooks } from \"../createHooks.js\";\nimport { actionOperation } from \"../operationBuilders.js\";\nimport { processActionResponse } from \"../operationRunners.js\";\nimport { capitalizeIdentifier, disambiguateActionVariables, get, namespaceDataPath } from \"../support.js\";\nimport type { DefaultSelection, LimitToKnownKeys, Select } from \"../types.js\";\nimport { ActionHookState, ErrorWrapper, type ActionHookResult, type OptionsType } from \"./utils.js\";\n\nexport const createUseAction = (adapter: RuntimeAdapter, coreHooks: CoreHooks) => {\n  const useAction = <\n    GivenOptions extends OptionsType,\n    SchemaT,\n    F extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n    Options extends F[\"optionsType\"]\n  >(\n    action: F,\n    options?: LimitToKnownKeys<Options, F[\"optionsType\"]>\n  ): ActionHookResult<\n    F[\"hasReturnType\"] extends true\n      ? any\n      : GadgetRecord<\n          Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>\n        >,\n    Exclude<F[\"variablesType\"], null | undefined>\n  > => {\n    adapter.framework.useEffect(() => {\n      if (action.type === (\"stubbedAction\" as string)) {\n        const stubbedAction = action as unknown as StubbedActionFunction<GivenOptions>;\n        if (!(\"reason\" in stubbedAction) || !(\"dataPath\" in stubbedAction) || !(\"actionApiIdentifier\" in stubbedAction)) {\n          // Don't dispatch an event if the generated client has not yet been updated with the updated parameters\n          return;\n        }\n\n        const event = new CustomEvent(\"gadget:devharness:stubbedActionError\", {\n          detail: {\n            reason: stubbedAction.reason,\n            action: {\n              functionName: stubbedAction.functionName,\n              actionApiIdentifier: stubbedAction.actionApiIdentifier,\n              modelApiIdentifier: stubbedAction.modelApiIdentifier,\n              dataPath: stubbedAction.dataPath,\n            },\n          },\n        });\n        globalThis.dispatchEvent(event);\n      }\n    }, []);\n\n    const memoizedOptions = coreHooks.useStructuralMemo(options);\n    const plan = adapter.framework.useMemo(() => {\n      return actionOperation(\n        action.operationName,\n        action.defaultSelection,\n        action.modelApiIdentifier,\n        action.modelSelectionField,\n        action.variables,\n        memoizedOptions,\n        action.namespace,\n        action.isBulk,\n        action.hasReturnType\n      );\n    }, [action, memoizedOptions]);\n\n    const [result, runMutation] = coreHooks.useGadgetMutation<\n      GadgetRecord<\n        Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>\n      >,\n      F[\"variablesType\"]\n    >(plan.query);\n\n    const transformedResult = adapter.framework.useMemo(() => processResult(result, action), [result, action]);\n\n    return [\n      transformedResult,\n      adapter.framework.useCallback(\n        async (input: F[\"variablesType\"], context?: Partial<OperationContext>) => {\n          const variables = disambiguateActionVariables(action, input);\n\n          const result = await runMutation(variables, {\n            ...context,\n            // Adding the model's additional typename ensures document cache will properly refresh, regardless of whether __typename was selected (and sometimes we can't even select it, like delete actions!)\n            additionalTypenames: [...(context?.additionalTypenames ?? []), capitalizeIdentifier(action.modelApiIdentifier)],\n          });\n\n          return processResult({ fetching: false, ...result }, action);\n        },\n        [action, runMutation]\n      ),\n    ];\n  };\n\n  return {\n    /**\n     * Hook to run a Gadget model action. `useAction` must be passed an action function from an instance of your generated API client library, like `api.user.create` or `api.blogPost.publish`. `useAction` doesn't actually run the action when invoked, but instead returns an action function as the second result for running the action in response to an event.\n     *\n     * @param action an action function from a model manager in your application's client, like `api.user.create`\n     * @param options action options, like selecting the fields in the result\n     *\n     * @example\n     * export function CreateUserButton(props: { name: string; email: string }) {\n     *   const [{error, fetching, data}, createUser] = useAction(api.user.create, {\n     *     select: {\n     *       id: true,\n     *     },\n     *   });\n     *\n     *   const onClick = () => createUser({\n     *     name: props.name,\n     *     email: props.email,\n     *   });\n     *\n     *   return (\n     *     <>\n     *       {error && <>Failed to create user: {error.toString()}</>}\n     *       {fetching && <>Creating user...</>}\n     *       {data && <>Created user with id={data.id}</>}\n     *       <button onClick={onClick}>Create user</button>\n     *     </>\n     *   );\n     * }\n     */\n    useAction,\n  };\n};\n\nconst processResult = <Data, Variables extends AnyVariables>(\n  result: UseMutationState<Data, Variables>,\n  action: ActionFunction<any, any, any, any, any>\n): ActionHookState<any, any> => {\n  let error = ErrorWrapper.forMaybeCombinedError(result.error);\n  let data = null;\n  if (result.data) {\n    const dataPath = namespaceDataPath([action.operationName], action.namespace);\n    const mutationData = get(result.data, dataPath);\n    if (mutationData) {\n      const errors = mutationData[\"errors\"];\n      if (errors && errors[0]) {\n        error = ErrorWrapper.forErrorsResponse(errors, error?.response);\n      } else {\n        data = processActionResponse(action.defaultSelection, result, mutationData, action.modelSelectionField, action.hasReturnType);\n      }\n    }\n  }\n\n  return { ...result, error, data };\n};\n"]}
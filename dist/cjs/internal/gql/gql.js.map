{"version":3,"file":"gql.js","sourceRoot":"","sources":["../../../../src/internal/gql/gql.ts"],"names":[],"mappings":";;;;AAEA,4DAAsC;AAEtC;;;;;;;;;GASG;AACH,MAAM,SAAS,GAAG;IAChB,ykEAAykE,EACvkE,KAAK,CAAC,wBAAwB;IAChC,kbAAkb,EAChb,KAAK,CAAC,wBAAwB;IAChC,osBAAosB,EAClsB,KAAK,CAAC,oBAAoB;IAC5B,i/BAAi/B,EAC/+B,KAAK,CAAC,2BAA2B;IACnC,mXAAmX,EACjX,KAAK,CAAC,4BAA4B;IACpC,kIAAkI,EAChI,KAAK,CAAC,qBAAqB;CAC9B,CAAC;AAqDF,SAAgB,OAAO,CAAC,MAAc;IACpC,OAAQ,SAAiB,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AAC1C,CAAC;AAFD,0BAEC","sourcesContent":["/* eslint-disable */\nimport type { TypedDocumentNode as DocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as types from \"./graphql.js\";\n\n/**\n * Map of all GraphQL operations in the project.\n *\n * This map has several performance disadvantages:\n * 1. It is not tree-shakeable, so it will include all operations in the project.\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\n * 3. It does not support dead code elimination, so it will add unused operations.\n *\n * Therefore it is highly recommended to use the babel or swc plugin for production.\n */\nconst documents = {\n  \"\\n  fragment FieldMetadata on GadgetField {\\n    name\\n    apiIdentifier\\n    fieldType\\n    requiredArgumentForInput\\n    ... on GadgetModelField {\\n      sortable\\n      filterable\\n    }\\n    configuration {\\n      __typename\\n      fieldType\\n      validations {\\n        __typename\\n        ... on GadgetRegexFieldValidation {\\n          name\\n          specID\\n          pattern\\n        }\\n        ... on GadgetRangeFieldValidation {\\n          name\\n          specID\\n          min\\n          max\\n        }\\n        ... on GadgetOnlyImageFileFieldValidation {\\n          name\\n          specID\\n          allowAnimatedImages\\n        }\\n        ... on GadgetGenericFieldValidation {\\n          name\\n          specID\\n        }\\n      }\\n      ... on GadgetHasManyThroughConfig {\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseField {\\n          apiIdentifier\\n        }\\n        joinModel {\\n          key\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseJoinModelField {\\n          apiIdentifier\\n        }\\n        inverseRelatedModelField {\\n          apiIdentifier\\n        }\\n      }\\n      ... on GadgetHasManyConfig {\\n        isJoinModelHasManyField\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseField {\\n          apiIdentifier\\n        }\\n      }\\n      ... on GadgetHasOneConfig {\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseField {\\n          apiIdentifier\\n        }\\n      }\\n      ... on GadgetBelongsToConfig {\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n      }\\n      ... on GadgetEnumConfig {\\n        allowMultiple\\n        allowOther\\n        options {\\n          name\\n          color\\n        }\\n      }\\n      ... on GadgetDateTimeConfig {\\n        includeTime\\n      }\\n      ... on GadgetNumberConfig {\\n        decimals\\n      }\\n    }\\n  }\\n\":\n    types.FieldMetadataFragmentDoc,\n  \"\\n  query GetModelMetadata($apiIdentifier: String!, $namespace: [String!]) {\\n    gadgetMeta {\\n      modelAndRelatedModels(apiIdentifier: $apiIdentifier, namespace: $namespace) {\\n        key\\n        apiIdentifier\\n        namespace\\n        name\\n        fields {\\n          ...FieldMetadata\\n        }\\n        defaultDisplayField {\\n          name\\n          apiIdentifier\\n          fieldType\\n        }\\n      }\\n    }\\n  }\\n\":\n    types.GetModelMetadataDocument,\n  \"\\n  fragment SubFields on GadgetField {\\n    configuration {\\n      __typename\\n      ... on GadgetObjectFieldConfig {\\n        name\\n        fields {\\n          ...FieldMetadata\\n          configuration {\\n            __typename\\n            ... on GadgetObjectFieldConfig {\\n              name\\n              fields {\\n                ...FieldMetadata\\n                configuration {\\n                  __typename\\n                  ... on GadgetObjectFieldConfig {\\n                    name\\n                    fields {\\n                      ...FieldMetadata\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\":\n    types.SubFieldsFragmentDoc,\n  \"\\n  query ModelActionMetadata($modelApiIdentifier: String!, $modelNamespace: [String!], $action: String!) {\\n    gadgetMeta {\\n      modelAndRelatedModels(apiIdentifier: $modelApiIdentifier, namespace: $modelNamespace) {\\n        key\\n        name\\n        namespace\\n        apiIdentifier\\n        defaultRecord\\n        fields {\\n          ...FieldMetadata\\n          ...SubFields\\n        }\\n        defaultDisplayField {\\n          name\\n          apiIdentifier\\n          fieldType\\n        }\\n      }\\n      model(apiIdentifier: $modelApiIdentifier, namespace: $modelNamespace) {\\n        key\\n        name\\n        namespace\\n        apiIdentifier\\n        defaultRecord\\n        action(apiIdentifier: $action) {\\n          name\\n          apiIdentifier\\n          operatesWithRecordIdentity\\n          isDeleteAction\\n          inputFields {\\n            ...FieldMetadata\\n            ...SubFields\\n          }\\n          triggers {\\n            specID\\n          }\\n        }\\n      }\\n    }\\n  }\\n\":\n    types.ModelActionMetadataDocument,\n  \"\\n  query GlobalActionMetadata($apiIdentifier: String!, $namespace: [String!]) {\\n    gadgetMeta {\\n      globalAction(apiIdentifier: $apiIdentifier, namespace: $namespace) {\\n        name\\n        apiIdentifier\\n        inputFields {\\n          ...FieldMetadata\\n          ...SubFields\\n        }\\n        triggers {\\n          specID\\n        }\\n      }\\n    }\\n  }\\n\":\n    types.GlobalActionMetadataDocument,\n  \"\\n  query RolesMetadata {\\n    gadgetMeta {\\n      roles {\\n        name\\n        key\\n        selectable\\n      }\\n    }\\n  }\\n\":\n    types.RolesMetadataDocument,\n};\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n *\n *\n * @example\n * ```ts\n * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);\n * ```\n *\n * The query argument is unknown!\n * Please regenerate the types.\n */\nexport function graphql(source: string): unknown;\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: \"\\n  fragment FieldMetadata on GadgetField {\\n    name\\n    apiIdentifier\\n    fieldType\\n    requiredArgumentForInput\\n    ... on GadgetModelField {\\n      sortable\\n      filterable\\n    }\\n    configuration {\\n      __typename\\n      fieldType\\n      validations {\\n        __typename\\n        ... on GadgetRegexFieldValidation {\\n          name\\n          specID\\n          pattern\\n        }\\n        ... on GadgetRangeFieldValidation {\\n          name\\n          specID\\n          min\\n          max\\n        }\\n        ... on GadgetOnlyImageFileFieldValidation {\\n          name\\n          specID\\n          allowAnimatedImages\\n        }\\n        ... on GadgetGenericFieldValidation {\\n          name\\n          specID\\n        }\\n      }\\n      ... on GadgetHasManyThroughConfig {\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseField {\\n          apiIdentifier\\n        }\\n        joinModel {\\n          key\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseJoinModelField {\\n          apiIdentifier\\n        }\\n        inverseRelatedModelField {\\n          apiIdentifier\\n        }\\n      }\\n      ... on GadgetHasManyConfig {\\n        isJoinModelHasManyField\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseField {\\n          apiIdentifier\\n        }\\n      }\\n      ... on GadgetHasOneConfig {\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseField {\\n          apiIdentifier\\n        }\\n      }\\n      ... on GadgetBelongsToConfig {\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n      }\\n      ... on GadgetEnumConfig {\\n        allowMultiple\\n        allowOther\\n        options {\\n          name\\n          color\\n        }\\n      }\\n      ... on GadgetDateTimeConfig {\\n        includeTime\\n      }\\n      ... on GadgetNumberConfig {\\n        decimals\\n      }\\n    }\\n  }\\n\"\n): (typeof documents)[\"\\n  fragment FieldMetadata on GadgetField {\\n    name\\n    apiIdentifier\\n    fieldType\\n    requiredArgumentForInput\\n    ... on GadgetModelField {\\n      sortable\\n      filterable\\n    }\\n    configuration {\\n      __typename\\n      fieldType\\n      validations {\\n        __typename\\n        ... on GadgetRegexFieldValidation {\\n          name\\n          specID\\n          pattern\\n        }\\n        ... on GadgetRangeFieldValidation {\\n          name\\n          specID\\n          min\\n          max\\n        }\\n        ... on GadgetOnlyImageFileFieldValidation {\\n          name\\n          specID\\n          allowAnimatedImages\\n        }\\n        ... on GadgetGenericFieldValidation {\\n          name\\n          specID\\n        }\\n      }\\n      ... on GadgetHasManyThroughConfig {\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseField {\\n          apiIdentifier\\n        }\\n        joinModel {\\n          key\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseJoinModelField {\\n          apiIdentifier\\n        }\\n        inverseRelatedModelField {\\n          apiIdentifier\\n        }\\n      }\\n      ... on GadgetHasManyConfig {\\n        isJoinModelHasManyField\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseField {\\n          apiIdentifier\\n        }\\n      }\\n      ... on GadgetHasOneConfig {\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n        inverseField {\\n          apiIdentifier\\n        }\\n      }\\n      ... on GadgetBelongsToConfig {\\n        relatedModel {\\n          key\\n          name\\n          apiIdentifier\\n          namespace\\n        }\\n      }\\n      ... on GadgetEnumConfig {\\n        allowMultiple\\n        allowOther\\n        options {\\n          name\\n          color\\n        }\\n      }\\n      ... on GadgetDateTimeConfig {\\n        includeTime\\n      }\\n      ... on GadgetNumberConfig {\\n        decimals\\n      }\\n    }\\n  }\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: \"\\n  query GetModelMetadata($apiIdentifier: String!, $namespace: [String!]) {\\n    gadgetMeta {\\n      modelAndRelatedModels(apiIdentifier: $apiIdentifier, namespace: $namespace) {\\n        key\\n        apiIdentifier\\n        namespace\\n        name\\n        fields {\\n          ...FieldMetadata\\n        }\\n        defaultDisplayField {\\n          name\\n          apiIdentifier\\n          fieldType\\n        }\\n      }\\n    }\\n  }\\n\"\n): (typeof documents)[\"\\n  query GetModelMetadata($apiIdentifier: String!, $namespace: [String!]) {\\n    gadgetMeta {\\n      modelAndRelatedModels(apiIdentifier: $apiIdentifier, namespace: $namespace) {\\n        key\\n        apiIdentifier\\n        namespace\\n        name\\n        fields {\\n          ...FieldMetadata\\n        }\\n        defaultDisplayField {\\n          name\\n          apiIdentifier\\n          fieldType\\n        }\\n      }\\n    }\\n  }\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: \"\\n  fragment SubFields on GadgetField {\\n    configuration {\\n      __typename\\n      ... on GadgetObjectFieldConfig {\\n        name\\n        fields {\\n          ...FieldMetadata\\n          configuration {\\n            __typename\\n            ... on GadgetObjectFieldConfig {\\n              name\\n              fields {\\n                ...FieldMetadata\\n                configuration {\\n                  __typename\\n                  ... on GadgetObjectFieldConfig {\\n                    name\\n                    fields {\\n                      ...FieldMetadata\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"\n): (typeof documents)[\"\\n  fragment SubFields on GadgetField {\\n    configuration {\\n      __typename\\n      ... on GadgetObjectFieldConfig {\\n        name\\n        fields {\\n          ...FieldMetadata\\n          configuration {\\n            __typename\\n            ... on GadgetObjectFieldConfig {\\n              name\\n              fields {\\n                ...FieldMetadata\\n                configuration {\\n                  __typename\\n                  ... on GadgetObjectFieldConfig {\\n                    name\\n                    fields {\\n                      ...FieldMetadata\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: \"\\n  query ModelActionMetadata($modelApiIdentifier: String!, $modelNamespace: [String!], $action: String!) {\\n    gadgetMeta {\\n      modelAndRelatedModels(apiIdentifier: $modelApiIdentifier, namespace: $modelNamespace) {\\n        key\\n        name\\n        namespace\\n        apiIdentifier\\n        defaultRecord\\n        fields {\\n          ...FieldMetadata\\n          ...SubFields\\n        }\\n        defaultDisplayField {\\n          name\\n          apiIdentifier\\n          fieldType\\n        }\\n      }\\n      model(apiIdentifier: $modelApiIdentifier, namespace: $modelNamespace) {\\n        key\\n        name\\n        namespace\\n        apiIdentifier\\n        defaultRecord\\n        action(apiIdentifier: $action) {\\n          name\\n          apiIdentifier\\n          operatesWithRecordIdentity\\n          isDeleteAction\\n          inputFields {\\n            ...FieldMetadata\\n            ...SubFields\\n          }\\n          triggers {\\n            specID\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"\n): (typeof documents)[\"\\n  query ModelActionMetadata($modelApiIdentifier: String!, $modelNamespace: [String!], $action: String!) {\\n    gadgetMeta {\\n      modelAndRelatedModels(apiIdentifier: $modelApiIdentifier, namespace: $modelNamespace) {\\n        key\\n        name\\n        namespace\\n        apiIdentifier\\n        defaultRecord\\n        fields {\\n          ...FieldMetadata\\n          ...SubFields\\n        }\\n        defaultDisplayField {\\n          name\\n          apiIdentifier\\n          fieldType\\n        }\\n      }\\n      model(apiIdentifier: $modelApiIdentifier, namespace: $modelNamespace) {\\n        key\\n        name\\n        namespace\\n        apiIdentifier\\n        defaultRecord\\n        action(apiIdentifier: $action) {\\n          name\\n          apiIdentifier\\n          operatesWithRecordIdentity\\n          isDeleteAction\\n          inputFields {\\n            ...FieldMetadata\\n            ...SubFields\\n          }\\n          triggers {\\n            specID\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: \"\\n  query GlobalActionMetadata($apiIdentifier: String!, $namespace: [String!]) {\\n    gadgetMeta {\\n      globalAction(apiIdentifier: $apiIdentifier, namespace: $namespace) {\\n        name\\n        apiIdentifier\\n        inputFields {\\n          ...FieldMetadata\\n          ...SubFields\\n        }\\n        triggers {\\n          specID\\n        }\\n      }\\n    }\\n  }\\n\"\n): (typeof documents)[\"\\n  query GlobalActionMetadata($apiIdentifier: String!, $namespace: [String!]) {\\n    gadgetMeta {\\n      globalAction(apiIdentifier: $apiIdentifier, namespace: $namespace) {\\n        name\\n        apiIdentifier\\n        inputFields {\\n          ...FieldMetadata\\n          ...SubFields\\n        }\\n        triggers {\\n          specID\\n        }\\n      }\\n    }\\n  }\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: \"\\n  query RolesMetadata {\\n    gadgetMeta {\\n      roles {\\n        name\\n        key\\n        selectable\\n      }\\n    }\\n  }\\n\"\n): (typeof documents)[\"\\n  query RolesMetadata {\\n    gadgetMeta {\\n      roles {\\n        name\\n        key\\n        selectable\\n      }\\n    }\\n  }\\n\"];\n\nexport function graphql(source: string) {\n  return (documents as any)[source] ?? {};\n}\n\nexport type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<infer TType, any>\n  ? TType\n  : never;\n"]}
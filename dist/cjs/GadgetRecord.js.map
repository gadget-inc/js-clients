{"version":3,"file":"GadgetRecord.js","sourceRoot":"","sources":["../../src/GadgetRecord.ts"],"names":[],"mappings":"","sourcesContent":["import type { Jsonify } from \"type-fest\";\nimport { AnyInternalModelManager } from \"./AnyInternalModelManager.js\";\nimport { AnyModelManager } from \"./AnyModelManager.js\";\nimport type { PaginateOptions } from \"./types.js\";\n\nexport type RecordShape = Record<string, any> | null | undefined | void;\n\ninterface GadgetRecord_<Shape extends RecordShape> {\n  isEmpty(): boolean;\n  getField(field: string): any;\n  setField<T>(field: string, value: T): T;\n  changes: {\n    (): Record<string, { current: any; previous: any }>;\n    (prop: string): { changed: true; current: any; previous: any } | { changed: false };\n  };\n  changed: {\n    (): boolean;\n    (prop: string): boolean;\n  };\n  toJSON(): Jsonify<Shape>;\n  touch(): void;\n}\n\nexport type GadgetRecord<Shape extends RecordShape> = GadgetRecord_<Shape> & Shape;\n\nexport type PaginationConfig = {\n  pageInfo: { hasNextPage: boolean; hasPreviousPage: boolean; startCursor: string; endCursor: string };\n  options?: PaginateOptions;\n};\n\nexport interface GadgetRecordList<Shape extends RecordShape> extends Array<GadgetRecord<Shape>> {\n  modelManager: AnyModelManager | AnyInternalModelManager<Shape>;\n  pagination: PaginationConfig;\n  firstOrThrow(): GadgetRecord<Shape>;\n  toJSON(): Jsonify<Shape>[];\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n  startCursor: string;\n  endCursor: string;\n  nextPage(): Promise<GadgetRecordList<Shape>>;\n  previousPage(): Promise<GadgetRecordList<Shape>>;\n}\n"]}
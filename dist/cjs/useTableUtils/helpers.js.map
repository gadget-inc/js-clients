{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/useTableUtils/helpers.ts"],"names":[],"mappings":";;;AAEA,2DAA6D;AAC7D,gDAAuF;AACvF,0CAAuE;AAKvE,MAAM,sBAAsB,GAAG,CAAC,MAA6B,EAAE,EAAE;IAC/D,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;QAC/B,OAAO,MAAM,CAAC;IAChB,CAAC;SAAM,IAAI,IAAA,+BAAoB,EAAC,MAAM,CAAC,EAAE,CAAC;QACxC,OAAO,MAAM,CAAC,KAAK,CAAC;IACtB,CAAC;SAAM,CAAC;QACN,OAAO,MAAM,CAAC,IAAI,CAAC;IACrB,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,yCAAyC,GAAG,CAAC,KAA4B,EAAE,EAAE;IACjF,IACE,KAAK,CAAC,aAAa,CAAC,UAAU,KAAK,uBAAuB;QAC1D,KAAK,CAAC,aAAa,CAAC,UAAU,KAAK,oBAAoB;QACvD,KAAK,CAAC,aAAa,CAAC,UAAU,KAAK,qBAAqB,EACxD,CAAC;QACD,OAAO,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC;IAC1C,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,qCAAqC,GAAG,CAC5C,kBAA0B,EAC1B,yBAAiC,EACjC,SAA0B,EACV,EAAE;IAClB,MAAM,cAAc,GAAmB;QACrC,EAAE,EAAE,IAAI;QACR,CAAC,yBAAyB,CAAC,EAAE,IAAI;KAClC,CAAC;IAEF,IAAI,SAAS,KAAK,4BAAe,CAAC,MAAM,IAAI,SAAS,KAAK,4BAAe,CAAC,SAAS,EAAE,CAAC;QACpF,OAAO,cAAc,CAAC;IACxB,CAAC;SAAM,IAAI,SAAS,KAAK,4BAAe,CAAC,OAAO,EAAE,CAAC;QACjD,OAAO;YACL,KAAK,EAAE;gBACL,IAAI,EAAE,cAAc;aACrB;SACF,CAAC;IACJ,CAAC;IAED,MAAM,IAAI,KAAK,CAAC,UAAU,kBAAkB,+BAA+B,CAAC,CAAC;AAC/E,CAAC,CAAC;AAQK,MAAM,YAAY,GAAG,CAC1B,kBAA2C,EAC3C,OAAgC,EAChC,cAA8C,EAC9C,gBAAqC,EACrC,EAAE;IACF,MAAM,IAAI,GAAc;QACtB,aAAa,EAAE,EAAE;QACjB,gBAAgB,EAAE,IAAI,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC;QAC1F,gBAAgB;KACjB,CAAC;IAEF,IAAI,OAAO,IAAI,cAAc,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;IAC7F,CAAC;IAED,IAAI,OAAO,EAAE,CAAC;QACZ,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IAC/B,CAAC;SAAM,IAAI,cAAc,EAAE,CAAC;QAC1B,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,IAAA,sCAAwB,EAAC,kBAAkB,CAAC;aAC9D,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;aACvD,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACzC,CAAC;SAAM,CAAC;QACN,IAAI,CAAC,aAAa,GAAG,IAAA,sCAAwB,EAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACxG,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AA5BW,QAAA,YAAY,gBA4BvB;AAEK,MAAM,oBAAoB,GAAG,CAAC,IAAe,EAAE,EAAE;IACtD,IAAI,YAAY,GAAmB;QACjC,EAAE,EAAE,IAAI;KACT,CAAC;IAEF,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,IAAI,IAAA,6BAAkB,EAAC,MAAM,CAAC,EAAE,CAAC;YAC/B,YAAY,GAAG;gBACb,GAAG,YAAY;gBACf,GAAG,IAAI,CAAC,gBAAgB;aACzB,CAAC;YACF,SAAS;QACX,CAAC;QAED,MAAM,mBAAmB,GAAG,sBAAsB,CAAC,MAAM,CAAC,CAAC;QAC3D,MAAM,KAAK,GAAG,gCAAgC,CAAC,IAAI,EAAE,IAAA,+BAAoB,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAE3G,IAAI,CAAC,yCAA2B,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,UAAU,mBAAmB,gCAAgC,CAAC,CAAC;QACjF,CAAC;QAED,MAAM,YAAY,GAAG,yCAAyC,CAAC,KAAK,CAAC,CAAC;QAEtE,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;YAC/B,IAAI,YAAY,EAAE,CAAC;gBACjB,YAAY,CAAC,MAAM,CAAC,GAAG,qCAAqC,CAC1D,MAAM,EACN,YAAY,CAAC,mBAAmB,CAAC,aAAa,EAC9C,KAAK,CAAC,SAAS,CAChB,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,YAAY,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;YAC/D,CAAC;QACH,CAAC;aAAM,IAAI,IAAA,+BAAoB,EAAC,MAAM,CAAC,EAAE,CAAC;YACxC,MAAM,YAAY,GAAG,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,KAAK,MAAM,CAAC,YAAY,CAAC,CAAC;YACxG,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,MAAM,IAAI,KAAK,CAAC,kBAAkB,MAAM,CAAC,YAAY,uCAAuC,CAAC,CAAC;YAChG,CAAC;YACD,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,qCAAqC,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;QACzH,CAAC;IACH,CAAC;IAED,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AA3CW,QAAA,oBAAoB,wBA2C/B;AAEK,MAAM,YAAY,GAAG,CAAC,IAAe,EAAE,OAA4B,EAAE,EAAE;IAC5E,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC;AAFW,QAAA,YAAY,gBAEvB;AAEK,MAAM,eAAe,GAAG,CAAC,IAAe,EAAE,EAAE;IACjD,MAAM,OAAO,GAAkB,EAAE,CAAC;IAClC,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;QAC9C,IAAI,IAAA,6BAAkB,EAAC,YAAY,CAAC,EAAE,CAAC;YACrC,OAAO,CAAC,IAAI,CAAC;gBACX,IAAI,EAAE,YAAY,CAAC,IAAI;gBACvB,aAAa,EAAE,YAAY,CAAC,IAAI;gBAChC,QAAQ,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC;gBACjD,YAAY,EAAE,IAAI;gBAClB,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;YACH,SAAS;QACX,CAAC;QAED,MAAM,KAAK,GAAG,gCAAgC,CAAC,IAAI,EAAE,IAAA,+BAAoB,EAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;QAE7H,MAAM,YAAY,GAAG,yCAAyC,CAAC,KAAK,CAAC,CAAC;QACtE,MAAM,YAAY,GAAG,IAAA,+BAAoB,EAAC,YAAY,CAAC;YACrD,CAAC,CAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,KAAK,YAAY,CAAC,YAAY,CAAC;YAC1F,CAAC,CAAC,YAAY;gBACd,CAAC,CAAC;oBACE,IAAI,EAAE,YAAY,CAAC,mBAAmB,CAAC,IAAI;oBAC3C,aAAa,EAAE,YAAY,CAAC,mBAAmB,CAAC,aAAa;oBAC7D,SAAS,EAAE,YAAY,CAAC,mBAAmB,CAAC,SAAS;iBACtD;gBACH,CAAC,CAAC,SAAS,CAAC;QAEd,OAAO,CAAC,IAAI,CAAC;YACX,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,aAAa,EAAE,KAAK,CAAC,aAAa;YAClC,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,QAAQ,EAAE,UAAU,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ;YAC/C,QAAQ,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC;YACjD,YAAY,EAAE,KAAK;YACnB,YAAY,EAAE,YAAY;gBACxB,CAAC,CAAC;oBACE,IAAI,EAAE,YAAY,CAAC,IAAI;oBACvB,aAAa,EAAE,YAAY,CAAC,aAAa;oBACzC,SAAS,EAAE,YAAY,CAAC,SAAS;oBACjC,QAAQ,EAAE,UAAU,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ;oBAC/C,QAAQ,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC;oBACjD,YAAY,EAAE,KAAK;iBACpB;gBACH,CAAC,CAAC,SAAS;SACd,CAAC,CAAC;IACL,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAhDW,QAAA,eAAe,mBAgD1B;AAEF,MAAM,gCAAgC,GAAG,CAAC,IAAe,EAAE,aAAqB,EAAE,EAAE;IAClF,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IACvD,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,UAAU,aAAa,+BAA+B,CAAC,CAAC;IAC1E,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,CAAC,IAAe,EAAE,MAAyB,EAAE,EAAE;IAClE,MAAM,GAAG,GAAa;QACpB,EAAE,EAAE,MAAM,CAAC,EAAE;KACd,CAAC;IAEF,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;QAC9C,MAAM,mBAAmB,GAAG,sBAAsB,CAAC,YAAY,CAAC,CAAC;QAEjE,IAAI,IAAA,6BAAkB,EAAC,YAAY,CAAC,EAAE,CAAC;YACrC,GAAG,CAAC,mBAAmB,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvD,SAAS;QACX,CAAC;QAED,GAAG,CAAC,mBAAmB,CAAC,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;IACzD,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC,CAAC","sourcesContent":["import type { FieldSelection, GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport type { FieldMetadataFragment } from \"../internal/gql/graphql.js\";\nimport { GadgetFieldType } from \"../internal/gql/graphql.js\";\nimport { acceptedAutoTableFieldTypes, filterAutoTableFieldList } from \"../metadata.js\";\nimport { isCustomCellColumn, isRelatedFieldColumn } from \"../utils.js\";\nimport type { TableColumn, TableOptions, TableRow } from \"./types.js\";\n\ntype ColumnsOption = Exclude<TableOptions[\"columns\"], undefined>;\n\nconst getColumnApiIdentifier = (column: ColumnsOption[number]) => {\n  if (typeof column === \"string\") {\n    return column;\n  } else if (isRelatedFieldColumn(column)) {\n    return column.field;\n  } else {\n    return column.name;\n  }\n};\n\nconst maybeGetRelatedModelFromRelationshipField = (field: FieldMetadataFragment) => {\n  if (\n    field.configuration.__typename === \"GadgetBelongsToConfig\" ||\n    field.configuration.__typename === \"GadgetHasOneConfig\" ||\n    field.configuration.__typename === \"GadgetHasManyConfig\"\n  ) {\n    return field.configuration.relatedModel;\n  }\n};\n\nconst getInnerSelectionForRelationshipField = (\n  fieldApiIdentifier: string,\n  relatedFieldApiIdentifier: string,\n  fieldType: GadgetFieldType\n): FieldSelection => {\n  const innerSelection: FieldSelection = {\n    id: true,\n    [relatedFieldApiIdentifier]: true,\n  };\n\n  if (fieldType === GadgetFieldType.HasOne || fieldType === GadgetFieldType.BelongsTo) {\n    return innerSelection;\n  } else if (fieldType === GadgetFieldType.HasMany) {\n    return {\n      edges: {\n        node: innerSelection,\n      },\n    };\n  }\n\n  throw new Error(`Field '${fieldApiIdentifier}' is not a relationship field`);\n};\n\nexport type TableSpec = {\n  targetColumns: ColumnsOption;\n  fieldMetadataMap: Map<string, FieldMetadataFragment>;\n  defaultSelection: Record<string, any>;\n};\n\nexport const getTableSpec = (\n  fieldMetadataArray: FieldMetadataFragment[],\n  columns: TableOptions[\"columns\"],\n  excludeColumns: TableOptions[\"excludeColumns\"],\n  defaultSelection: Record<string, any>\n) => {\n  const spec: TableSpec = {\n    targetColumns: [],\n    fieldMetadataMap: new Map(fieldMetadataArray.map((field) => [field.apiIdentifier, field])),\n    defaultSelection,\n  };\n\n  if (columns && excludeColumns) {\n    throw new Error(\"Cannot use both 'columns' and 'excludeColumns' options at the same time\");\n  }\n\n  if (columns) {\n    spec.targetColumns = columns;\n  } else if (excludeColumns) {\n    const excludeSet = new Set(excludeColumns);\n    spec.targetColumns = filterAutoTableFieldList(fieldMetadataArray)\n      .filter((field) => !excludeSet.has(field.apiIdentifier))\n      .map((field) => field.apiIdentifier);\n  } else {\n    spec.targetColumns = filterAutoTableFieldList(fieldMetadataArray).map((field) => field.apiIdentifier);\n  }\n\n  return spec;\n};\n\nexport const getTableSelectionMap = (spec: TableSpec) => {\n  let selectionMap: FieldSelection = {\n    id: true,\n  };\n\n  for (const column of spec.targetColumns) {\n    if (isCustomCellColumn(column)) {\n      selectionMap = {\n        ...selectionMap,\n        ...spec.defaultSelection,\n      };\n      continue;\n    }\n\n    const columnApiIdentifier = getColumnApiIdentifier(column);\n    const field = _getFieldMetadataByApiIdentifier(spec, isRelatedFieldColumn(column) ? column.field : column);\n\n    if (!acceptedAutoTableFieldTypes.has(field.fieldType)) {\n      throw new Error(`Field '${columnApiIdentifier}' cannot be shown in the table`);\n    }\n\n    const relatedModel = maybeGetRelatedModelFromRelationshipField(field);\n\n    if (typeof column === \"string\") {\n      if (relatedModel) {\n        selectionMap[column] = getInnerSelectionForRelationshipField(\n          column,\n          relatedModel.defaultDisplayField.apiIdentifier,\n          field.fieldType\n        );\n      } else {\n        selectionMap[column] = spec.defaultSelection[column] ?? true;\n      }\n    } else if (isRelatedFieldColumn(column)) {\n      const relatedField = relatedModel?.fields?.find((field) => field.apiIdentifier === column.relatedField);\n      if (!relatedField) {\n        throw new Error(`Related field '${column.relatedField}' does not exist in the related model`);\n      }\n      selectionMap[column.field] = getInnerSelectionForRelationshipField(column.field, column.relatedField, field.fieldType);\n    }\n  }\n\n  return selectionMap;\n};\n\nexport const getTableRows = (spec: TableSpec, records: GadgetRecord<any>[]) => {\n  return records.map((record) => _recordToRow(spec, record));\n};\n\nexport const getTableColumns = (spec: TableSpec) => {\n  const columns: TableColumn[] = [];\n  for (const targetColumn of spec.targetColumns) {\n    if (isCustomCellColumn(targetColumn)) {\n      columns.push({\n        name: targetColumn.name,\n        apiIdentifier: targetColumn.name,\n        getValue: (record) => targetColumn.render(record),\n        isCustomCell: true,\n        sortable: false,\n      });\n      continue;\n    }\n\n    const field = _getFieldMetadataByApiIdentifier(spec, isRelatedFieldColumn(targetColumn) ? targetColumn.field : targetColumn);\n\n    const relatedModel = maybeGetRelatedModelFromRelationshipField(field);\n    const relatedField = isRelatedFieldColumn(targetColumn)\n      ? relatedModel?.fields?.find((field) => field.apiIdentifier === targetColumn.relatedField)\n      : relatedModel\n      ? {\n          name: relatedModel.defaultDisplayField.name,\n          apiIdentifier: relatedModel.defaultDisplayField.apiIdentifier,\n          fieldType: relatedModel.defaultDisplayField.fieldType,\n        }\n      : undefined;\n\n    columns.push({\n      name: field.name,\n      apiIdentifier: field.apiIdentifier,\n      fieldType: field.fieldType,\n      sortable: \"sortable\" in field && field.sortable,\n      getValue: (record) => record[field.apiIdentifier],\n      isCustomCell: false,\n      relatedField: relatedField\n        ? {\n            name: relatedField.name,\n            apiIdentifier: relatedField.apiIdentifier,\n            fieldType: relatedField.fieldType,\n            sortable: \"sortable\" in field && field.sortable,\n            getValue: (record) => record[field.apiIdentifier],\n            isCustomCell: false,\n          }\n        : undefined,\n    });\n  }\n\n  return columns;\n};\n\nconst _getFieldMetadataByApiIdentifier = (spec: TableSpec, apiIdentifier: string) => {\n  const field = spec.fieldMetadataMap.get(apiIdentifier);\n  if (!field) {\n    throw new Error(`Field '${apiIdentifier}' does not exist in the model`);\n  }\n  return field;\n};\n\nconst _recordToRow = (spec: TableSpec, record: GadgetRecord<any>) => {\n  const row: TableRow = {\n    id: record.id,\n  };\n\n  for (const targetColumn of spec.targetColumns) {\n    const columnApiIdentifier = getColumnApiIdentifier(targetColumn);\n\n    if (isCustomCellColumn(targetColumn)) {\n      row[columnApiIdentifier] = targetColumn.render(record);\n      continue;\n    }\n\n    row[columnApiIdentifier] = record[columnApiIdentifier];\n  }\n\n  return row;\n};\n"]}
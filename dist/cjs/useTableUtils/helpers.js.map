{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/useTableUtils/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FieldSelection, GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport type { FieldMetadataFragment } from \"../internal/gql/graphql.js\";\nimport { GadgetFieldType } from \"../internal/gql/graphql.js\";\nimport { acceptedAutoTableFieldTypes, filterAutoTableFieldList } from \"../metadata.js\";\nimport { get, set } from \"../utils.js\";\nimport type {\n  CellDetailColumn,\n  CustomCellColumn,\n  FieldMetadataFragmentWithRelationshipConfig,\n  RelationshipType,\n  TableColumn,\n  TableOptions,\n  TableRow,\n  TableSpec,\n} from \"./types.js\";\n\nexport const getTableSpec = (\n  fieldMetadataArray: FieldMetadataFragment[],\n  columns: TableOptions[\"columns\"],\n  excludeColumns: TableOptions[\"excludeColumns\"],\n  defaultSelection: Record<string, any>\n) => {\n  const spec: TableSpec = {\n    targetColumns: [],\n    fieldMetadataTree: fieldMetadataArrayToFieldMetadataTree(fieldMetadataArray),\n    defaultSelection,\n  };\n\n  if (columns && excludeColumns) {\n    throw new Error(\"Cannot use both 'columns' and 'excludeColumns' options at the same time\");\n  }\n\n  if (columns) {\n    spec.targetColumns = columns;\n  } else if (excludeColumns) {\n    const excludeSet = new Set(excludeColumns);\n    spec.targetColumns = filterAutoTableFieldList(fieldMetadataArray)\n      .filter((field) => !excludeSet.has(field.apiIdentifier))\n      .map((field) => field.apiIdentifier);\n  } else {\n    // Select all fields available for the table\n    spec.targetColumns = filterAutoTableFieldList(fieldMetadataArray).map((field) => field.apiIdentifier);\n  }\n\n  return spec;\n};\n\nexport const getTableSelectionMap = (spec: TableSpec) => {\n  let selectionMap: FieldSelection = {\n    id: true,\n  };\n\n  for (const targetColumn of spec.targetColumns) {\n    if (isCustomCellColumn(targetColumn)) {\n      selectionMap = {\n        ...selectionMap,\n        ...spec.defaultSelection,\n      };\n      continue;\n    }\n\n    const { field: columnPath } = getCellDetailColumnByColumnValue(targetColumn);\n    const columnPathSegments = columnPath.split(\".\");\n\n    let pointer = 0;\n    for (let i = 0; i < columnPathSegments.length; i++) {\n      if (i < pointer) {\n        continue;\n      }\n      pointer = i + 1;\n\n      const currentColumnPath = columnPathSegments.slice(0, i + 1).join(\".\");\n      const isLastColumnPath = i === columnPathSegments.length - 1;\n\n      const fieldMetadata = getFieldMetadataByColumnPath(spec.fieldMetadataTree, currentColumnPath);\n      if (!acceptedAutoTableFieldTypes.has(fieldMetadata.fieldType)) {\n        throw new Error(`Field '${columnPath}' cannot be shown in the table`);\n      }\n\n      const isHasOneOrBelongsTo = isHasOneOrBelongsToField(fieldMetadata);\n      const isHasMany = isHasManyField(fieldMetadata);\n\n      if (isHasOneOrBelongsTo || isHasMany) {\n        const idColumnPath = mergeColumnPathByFieldType(currentColumnPath, \"id\", fieldMetadata);\n        set(selectionMap, idColumnPath, true);\n\n        // Since we are walking through the column path,\n        // we only need to get the default display field if the current field is a relationship field and it doesn't specify a related field.\n        const defaultRelatedField = isLastColumnPath\n          ? maybeGetDefaultDisplayFieldMetadata(spec.fieldMetadataTree, currentColumnPath)\n          : undefined;\n\n        if (defaultRelatedField) {\n          set(\n            selectionMap,\n            mergeColumnPathByFieldType(currentColumnPath, defaultRelatedField.apiIdentifier, fieldMetadata),\n            getNonRelationshipSelectionValue(defaultRelatedField)\n          );\n          continue;\n        }\n\n        if (isHasOneOrBelongsTo) {\n          continue;\n        } else {\n          // Skip `edges.node` segment\n          pointer = i + 3;\n          continue;\n        }\n      }\n\n      set(selectionMap, currentColumnPath, getNonRelationshipSelectionValue(fieldMetadata));\n    }\n  }\n\n  return selectionMap;\n};\n\nexport const getTableRows = (spec: Pick<TableSpec, \"fieldMetadataTree\" | \"targetColumns\">, records: GadgetRecord<any>[]) => {\n  return records.map((record) => recordToRow(spec, record));\n};\n\nexport const getTableColumns = (spec: Pick<TableSpec, \"fieldMetadataTree\" | \"targetColumns\">) => {\n  const columns: TableColumn[] = [];\n\n  for (const targetColumn of spec.targetColumns) {\n    if (isCustomCellColumn(targetColumn)) {\n      columns.push({\n        header: targetColumn.name,\n        field: targetColumn.name,\n        type: \"CustomRenderer\",\n        sortable: false,\n      });\n\n      continue;\n    }\n\n    const { header, field: columnPath, sortable } = getCellDetailColumnByColumnValue(targetColumn);\n    const { firstField, targetField, isHasMany, isHasOneOrBelongsTo } = getFieldInformationByColumnPath(spec.fieldMetadataTree, columnPath);\n\n    const column: TableColumn = {\n      header: header ?? firstField.name,\n      field: columnPath,\n      type: targetField.fieldType,\n      sortable: isColumnSortable(targetField, sortable),\n    };\n\n    // The column path doesn't specify a related field, so we need to get the default display field\n    if (isHasOneOrBelongsTo || isHasMany) {\n      const defaultRelatedField = maybeGetDefaultDisplayFieldMetadata(spec.fieldMetadataTree, columnPath);\n      if (defaultRelatedField) {\n        column.type = defaultRelatedField.fieldType;\n        column.sortable = isColumnSortable(defaultRelatedField, sortable);\n      }\n      column.relationshipType = firstField.fieldType as RelationshipType;\n    }\n\n    columns.push(column);\n  }\n\n  return columns;\n};\n\nconst recordToRow = (spec: Pick<TableSpec, \"fieldMetadataTree\" | \"targetColumns\">, record: GadgetRecord<any>) => {\n  const row: TableRow = {\n    id: record.id,\n  };\n\n  for (const targetColumn of spec.targetColumns) {\n    if (isCustomCellColumn(targetColumn)) {\n      row[targetColumn.name] = targetColumn.render({ record });\n      continue;\n    }\n\n    const { field: columnPath } = getCellDetailColumnByColumnValue(targetColumn);\n    const { firstPathSegment, targetField, isHasMany, isHasOneOrBelongsTo } = getFieldInformationByColumnPath(\n      spec.fieldMetadataTree,\n      columnPath\n    );\n\n    // The column path doesn't specify a related field, so we need to get the default display field\n    if (isHasOneOrBelongsTo || isHasMany) {\n      const relatedField = maybeGetDefaultDisplayFieldMetadata(spec.fieldMetadataTree, columnPath) ?? targetField;\n      if (isHasMany) {\n        row[columnPath] = get(record, firstPathSegment)?.edges.map((edge: any) => edge.node[relatedField.apiIdentifier]);\n      } else {\n        row[columnPath] = get(record, firstPathSegment)?.[relatedField.apiIdentifier];\n      }\n    } else {\n      row[columnPath] = get(record, columnPath);\n    }\n  }\n\n  return row;\n};\n\nconst getFieldInformationByColumnPath = (fieldMetadataTree: TableSpec[\"fieldMetadataTree\"], columnPath: string) => {\n  const firstPathSegment = columnPath.split(\".\")[0];\n  const firstField = getFieldMetadataByColumnPath(fieldMetadataTree, firstPathSegment);\n  const targetField = getFieldMetadataByColumnPath(fieldMetadataTree, columnPath);\n\n  const isHasOneOrBelongsTo = isHasOneOrBelongsToField(firstField);\n  const isHasMany = isHasManyField(firstField);\n\n  return {\n    firstPathSegment,\n    firstField,\n    targetField,\n\n    isHasOneOrBelongsTo,\n    isHasMany,\n  };\n};\n\nconst isCustomCellColumn = (value: any): value is CustomCellColumn => {\n  return typeof value === \"object\" && value !== null && \"name\" in value && \"render\" in value;\n};\n\nconst getCellDetailColumnByColumnValue = (column: string | CellDetailColumn): CellDetailColumn => {\n  return typeof column === \"string\" ? { field: column } : column;\n};\n\nconst isColumnSortable = (fieldMetadata: FieldMetadataFragment, sortable: boolean | undefined) => {\n  return sortable ?? (\"sortable\" in fieldMetadata && fieldMetadata.sortable);\n};\n\nconst mergeColumnPathByFieldType = (columnPath: string, newSegment: string, field: { fieldType: GadgetFieldType }) => {\n  if (isHasManyField(field)) {\n    return `${columnPath}.edges.node.${newSegment}`;\n  }\n\n  return `${columnPath}.${newSegment}`;\n};\n\nconst isHasOneOrBelongsToField = (field: { fieldType: GadgetFieldType }) => {\n  return field.fieldType === GadgetFieldType.HasOne || field.fieldType === GadgetFieldType.BelongsTo;\n};\n\nconst isHasManyField = (field: { fieldType: GadgetFieldType }) => {\n  return field.fieldType === GadgetFieldType.HasMany;\n};\n\nconst richTextSelection = {\n  markdown: true,\n  truncatedHTML: true,\n};\n\nconst fileSelection = {\n  url: true,\n  mimeType: true,\n  fileName: true,\n};\n\nconst roleAssignmentsSelection = {\n  key: true,\n  name: true,\n};\n\nconst getNonRelationshipSelectionValue = (field: FieldMetadataFragment) => {\n  switch (field.fieldType) {\n    case GadgetFieldType.RichText:\n      return richTextSelection;\n    case GadgetFieldType.File:\n      return fileSelection;\n    case GadgetFieldType.RoleAssignments:\n      return roleAssignmentsSelection;\n    default:\n      return true;\n  }\n};\n\nconst maybeGetDefaultDisplayFieldMetadata = (fieldMetadataTree: TableSpec[\"fieldMetadataTree\"], columnPath: string) => {\n  const field = getFieldMetadataByColumnPath(fieldMetadataTree, columnPath);\n\n  const relatedModel = maybeGetRelatedModelFromRelationshipField(field);\n  if (relatedModel) {\n    const newColumnPath = mergeColumnPathByFieldType(columnPath, relatedModel.defaultDisplayField.apiIdentifier, field);\n    return getFieldMetadataByColumnPath(fieldMetadataTree, newColumnPath);\n  }\n};\n\nexport const fieldMetadataArrayToFieldMetadataTree = (fieldMetadataArray: FieldMetadataFragment[]) => {\n  const map: Record<string, any> = {};\n\n  const getRelatedModelFields = (field: FieldMetadataFragment) => {\n    if (!(\"configuration\" in field)) return [];\n    return (field as FieldMetadataFragmentWithRelationshipConfig).configuration.relatedModel?.fields ?? [];\n  };\n\n  for (const field of fieldMetadataArray) {\n    map[field.apiIdentifier] = {};\n\n    if (isHasOneOrBelongsToField(field)) {\n      map[field.apiIdentifier] = {\n        $field: field,\n        ...fieldMetadataArrayToFieldMetadataTree(getRelatedModelFields(field) as any[]),\n      };\n    } else if (isHasManyField(field)) {\n      map[field.apiIdentifier] = {\n        $field: field,\n        edges: {\n          node: fieldMetadataArrayToFieldMetadataTree(getRelatedModelFields(field) as any[]),\n        },\n      };\n    } else {\n      map[field.apiIdentifier] = field;\n    }\n  }\n\n  return map;\n};\n\nconst getFieldMetadataByColumnPath = (fieldMetadataTree: TableSpec[\"fieldMetadataTree\"], columnPath: string): FieldMetadataFragment => {\n  let field: FieldMetadataFragment | { $field: FieldMetadataFragment } | undefined = get(fieldMetadataTree, columnPath);\n  if (!field) {\n    throw new Error(`Field '${columnPath}' does not exist in the model`);\n  }\n  field = \"$field\" in field ? field.$field : field;\n\n  return field;\n};\n\nconst maybeGetRelatedModelFromRelationshipField = (field: FieldMetadataFragment) => {\n  if ((isHasOneOrBelongsToField(field) || isHasManyField(field)) && \"configuration\" in field) {\n    return (field as FieldMetadataFragmentWithRelationshipConfig).configuration.relatedModel;\n  }\n};\n"]}
{"version":3,"file":"GadgetFunctions.js","sourceRoot":"","sources":["../../src/GadgetFunctions.ts"],"names":[],"mappings":"","sourcesContent":["import type { AnyGadgetRecord, AnyGadgetRecordList, RecordShape } from \"./AnyGadgetRecord.js\";\nimport type { LimitToKnownKeys, VariablesOptions } from \"./types.js\";\n\nexport type PromiseOrLiveIterator<T> = Promise<T> | AsyncIterable<T>;\nexport type AsyncRecord<T extends RecordShape> = PromiseOrLiveIterator<AnyGadgetRecord<T>>;\nexport type AsyncNullableRecord<T extends RecordShape> = PromiseOrLiveIterator<AnyGadgetRecord<T> | null>;\nexport type AsyncRecordList<T extends RecordShape> = PromiseOrLiveIterator<AnyGadgetRecordList<T>>;\n\nexport interface GQLBuilderResult {\n  query: string;\n  variables: Record<string, any>;\n}\n\nexport interface FindOneFunction<OptionsT, SelectionT, SchemaT, DefaultsT> {\n  <Options extends OptionsT>(fieldValue: string, options?: LimitToKnownKeys<Options, OptionsT>): AsyncRecord<any>;\n  type: \"findOne\";\n  findByVariableName: string;\n  operationName: string;\n  modelApiIdentifier: string;\n  defaultSelection: DefaultsT;\n  namespace?: string | string[] | null;\n  selectionType: SelectionT;\n  optionsType: OptionsT;\n  schemaType: SchemaT | null;\n  plan: <Options extends OptionsT>(fieldValue: string, options?: LimitToKnownKeys<Options, OptionsT>) => GQLBuilderResult;\n}\n\nexport interface MaybeFindOneFunction<OptionsT, SelectionT, SchemaT, DefaultsT> {\n  <Options extends OptionsT>(fieldValue: string, options?: LimitToKnownKeys<Options, OptionsT>): AsyncNullableRecord<any>;\n\n  type: \"maybeFindOne\";\n  findByVariableName: string;\n  operationName: string;\n  modelApiIdentifier: string;\n  defaultSelection: DefaultsT;\n  namespace?: string | string[] | null;\n  selectionType: SelectionT;\n  optionsType: OptionsT;\n  schemaType: SchemaT | null;\n  plan: <Options extends OptionsT>(fieldValue: string, options?: LimitToKnownKeys<Options, OptionsT>) => GQLBuilderResult;\n}\n\nexport interface FindManyFunction<OptionsT, SelectionT, SchemaT, DefaultsT> {\n  <Options extends OptionsT>(options?: LimitToKnownKeys<Options, OptionsT>): AsyncRecordList<any>;\n\n  type: \"findMany\";\n  operationName: string;\n  modelApiIdentifier: string;\n  defaultSelection: DefaultsT;\n  namespace?: string | string[] | null;\n  selectionType: SelectionT;\n  optionsType: OptionsT;\n  schemaType: SchemaT | null;\n  plan: <Options extends OptionsT>(options?: LimitToKnownKeys<Options, OptionsT>) => GQLBuilderResult;\n}\n\nexport interface FindFirstFunction<OptionsT, SelectionT, SchemaT, DefaultsT> {\n  <Options extends OptionsT>(options?: LimitToKnownKeys<Options, OptionsT>): AsyncRecord<any>;\n\n  type: \"findFirst\";\n  operationName: string;\n  modelApiIdentifier: string;\n  defaultSelection: DefaultsT;\n  namespace?: string | string[] | null;\n  selectionType: SelectionT;\n  optionsType: OptionsT;\n  schemaType: SchemaT | null;\n  plan: <Options extends OptionsT>(options?: LimitToKnownKeys<Options, OptionsT>) => GQLBuilderResult;\n}\n\nexport interface MaybeFindFirstFunction<OptionsT, SelectionT, SchemaT, DefaultsT> {\n  <Options extends OptionsT>(options?: LimitToKnownKeys<Options, OptionsT>): AsyncNullableRecord<any>;\n\n  type: \"maybeFindFirst\";\n  operationName: string;\n  modelApiIdentifier: string;\n  defaultSelection: DefaultsT;\n  namespace?: string | string[] | null;\n  selectionType: SelectionT;\n  optionsType: OptionsT;\n  schemaType: SchemaT | null;\n  plan: <Options extends OptionsT>(options?: LimitToKnownKeys<Options, OptionsT>) => GQLBuilderResult;\n}\n\nexport interface ViewFunctionWithoutVariables<ResultT> {\n  (): Promise<ResultT>;\n  type: \"computedView\";\n  operationName: string;\n  gqlFieldName: string;\n  namespace?: string | string[] | null;\n  referencedTypenames?: string[];\n  resultType: ResultT;\n  plan(): GQLBuilderResult;\n}\n\nexport interface ViewFunctionWithVariables<VariablesT, ResultT> {\n  (variables: VariablesT): Promise<ResultT>;\n  type: \"computedView\";\n  operationName: string;\n  gqlFieldName: string;\n  namespace?: string | string[] | null;\n  referencedTypenames?: string[];\n  variables: VariablesOptions;\n  variablesType: VariablesT;\n  resultType: ResultT;\n  plan(variables: VariablesOptions): GQLBuilderResult;\n}\n\nexport type ViewFunction<VariablesT, ResultT> = ViewFunctionWithoutVariables<ResultT> | ViewFunctionWithVariables<VariablesT, ResultT>;\n\nexport interface ActionWithIdAndVariables<OptionsT, VariablesT> {\n  <Options extends OptionsT>(id: string, variables: VariablesT, options?: LimitToKnownKeys<Options, OptionsT>):\n    | AsyncRecord<any>\n    | Promise<void>;\n}\n\nexport interface ActionWithNoIdAndVariables<OptionsT, VariablesT> {\n  <Options extends OptionsT>(variables: VariablesT, options?: LimitToKnownKeys<Options, OptionsT>): AsyncRecord<any>;\n}\n\nexport interface ActionWithIdAndNoVariables<OptionsT> {\n  <Options extends OptionsT>(id: string, options?: LimitToKnownKeys<Options, OptionsT>): AsyncRecord<any> | Promise<void>;\n}\n\nexport interface ActionWithNoIdAndNoVariables<OptionsT> {\n  <Options extends OptionsT>(options?: LimitToKnownKeys<Options, OptionsT>): AsyncRecord<any>;\n}\n\nexport interface BulkActionWithIdsAndNoVariables<OptionsT> {\n  <Options extends OptionsT>(ids: string[], options?: LimitToKnownKeys<Options, OptionsT>): AsyncRecord<any>;\n}\n\nexport interface BulkActionWithInputs<OptionsT, VariablesT> {\n  <Options extends OptionsT>(inputs: VariablesT, options?: LimitToKnownKeys<Options, OptionsT>): AsyncRecord<any>;\n}\n\nexport type HasReturnType = boolean | Record<string, { hasReturnType: HasReturnType } | { select: boolean }>;\n\nexport interface ActionFunctionMetadata<OptionsT, VariablesT, SelectionT, SchemaT, DefaultsT, IsBulk> {\n  type: \"action\";\n  operationName: string;\n  operationReturnType?: string;\n  namespace: string | string[] | null;\n  modelApiIdentifier: string;\n  operatesWithRecordIdentity?: boolean;\n  modelSelectionField: string;\n  defaultSelection: DefaultsT;\n  selectionType: SelectionT;\n  optionsType: OptionsT;\n  schemaType: SchemaT | null;\n  variables: VariablesOptions;\n  variablesType: VariablesT;\n  isBulk: IsBulk;\n  hasAmbiguousIdentifier?: boolean;\n  acceptsModelInput?: boolean;\n  paramOnlyVariables?: readonly string[];\n  hasReturnType?: HasReturnType;\n  singleActionFunctionName?: string;\n  singleAction?: IsBulk extends true ? ActionFunctionMetadata<OptionsT, VariablesT, SelectionT, SchemaT, DefaultsT, false> : never;\n  plan: <Options extends OptionsT>(options?: LimitToKnownKeys<Options, OptionsT>) => GQLBuilderResult;\n  /** @deprecated */\n  hasCreateOrUpdateEffect?: boolean;\n}\n\nexport type StubbedActionReason = \"MissingApiTrigger\";\n\nexport interface StubbedActionFunctionMetadata {\n  type: \"stubbedAction\";\n  functionName: string;\n  operationName?: string;\n  errorMessage: string;\n  actionApiIdentifier: string;\n  modelApiIdentifier?: string;\n  variables: VariablesOptions;\n  reason: StubbedActionReason;\n  dataPath: string;\n}\n\nexport type StubbedActionFunction<OptionsT> = StubbedActionFunctionMetadata & ActionWithNoIdAndNoVariables<OptionsT>;\n\nexport type ActionFunction<OptionsT, VariablesT, SelectionT, SchemaT, DefaultsT> = ActionFunctionMetadata<\n  OptionsT,\n  VariablesT,\n  SelectionT,\n  SchemaT,\n  DefaultsT,\n  false\n> &\n  (\n    | ActionWithIdAndVariables<OptionsT, VariablesT>\n    | ActionWithIdAndNoVariables<OptionsT>\n    | ActionWithNoIdAndVariables<OptionsT, VariablesT>\n    | ActionWithNoIdAndNoVariables<OptionsT>\n  );\n\nexport type BulkActionFunction<OptionsT, VariablesT, SelectionT, SchemaT, DefaultsT> = ActionFunctionMetadata<\n  OptionsT,\n  VariablesT,\n  SelectionT,\n  SchemaT,\n  DefaultsT,\n  true\n> &\n  (BulkActionWithIdsAndNoVariables<OptionsT> | BulkActionWithInputs<OptionsT, VariablesT>);\n\nexport interface GetFunction<OptionsT, SelectionT, SchemaT, DefaultsT> {\n  <Options extends OptionsT>(options?: LimitToKnownKeys<Options, OptionsT>): AsyncRecord<AnyGadgetRecord<any>>;\n\n  type: \"get\";\n  operationName: string;\n  modelApiIdentifier: string;\n  defaultSelection: DefaultsT;\n  namespace?: string | string[] | null;\n  selectionType: SelectionT;\n  optionsType: OptionsT;\n  schemaType: SchemaT | null;\n  plan: <Options extends OptionsT>(options?: LimitToKnownKeys<Options, OptionsT>) => GQLBuilderResult;\n}\n\nexport interface GlobalActionFunction<VariablesT> {\n  (variables: VariablesT): Promise<any>;\n\n  type: \"globalAction\";\n  operationName: string;\n  operationReturnType?: string;\n  namespace: string | string[] | null;\n  variables: VariablesOptions;\n  variablesType: VariablesT;\n  isBulk?: undefined;\n  plan: (variables?: VariablesOptions) => GQLBuilderResult;\n}\n\nexport type AnyActionFunction =\n  | ActionFunctionMetadata<any, any, any, any, any, true>\n  | ActionFunctionMetadata<any, any, any, any, any, false | undefined>\n  | GlobalActionFunction<any>;\nexport type AnyBulkActionFunction = ActionFunctionMetadata<any, any, any, any, any, true>;\n\n// This is a function that represents a computed view that doesn't take any input parameters/variables.\n// Result is an explicit type parameter defining the shape of the full result.\nexport type ComputedViewFunctionWithoutVariables<Result> = () => Promise<Result>;\n\n// Represents a computed view that doesn't take any input parameters/variables.\n// It includes the view function and the view metadata.\nexport interface ComputedViewWithoutVariables<Result> extends ComputedViewFunctionWithoutVariables<Result> {\n  type: \"computedView\";\n  operationName: string;\n  gqlFieldName: string;\n  namespace: string | string[] | null;\n  resultType: Result;\n  plan(): {\n    query: string;\n    variables: Record<string, any>;\n  };\n}\n\n// This is a function that represents a computed view that takes input parameters/variables.\n// Result is an explicit type parameter defining the shape of the full result.\n// Variables is an explicit type parameter that describes the shape of the variables parameter.\nexport type ComputedViewFunctionWithVariables<Variables, Result> = (variables?: Variables) => Promise<Result>;\n\n// Represents a computed view that takes input parameters/variables.\n// It includes the view function and the view metadata.\nexport interface ComputedViewWithVariables<Variables, Result> extends ComputedViewFunctionWithVariables<Variables, Result> {\n  type: \"computedView\";\n  operationName: string;\n  gqlFieldName: string;\n  namespace: string | string[] | null;\n  variables: VariablesOptions;\n  variablesType: Variables;\n  resultType: Result;\n  plan(variables?: Variables): {\n    query: string;\n    variables: Record<string, any>;\n  };\n}\n"]}
{"version":3,"file":"useSignOut.js","sourceRoot":"","sources":["../../../src/auth/useSignOut.ts"],"names":[],"mappings":";;;AAAA,iCAAgD;AAChD,4DAAwD;AACxD,0CAAgD;AAChD,6CAAuC;AACvC,yCAA4C;AAE5C;;;;GAIG;AACI,MAAM,UAAU,GAAG,CAAC,IAA+D,EAAE,EAAE;IAC5F,MAAM,iBAAiB,GAAG,IAAI,EAAE,iBAAiB,IAAI,IAAI,CAAC;IAC1D,MAAM,cAAc,GAAG,IAAI,EAAE,cAAc,CAAC;IAC5C,MAAM,GAAG,GAAG,IAAA,iBAAM,GAAE,CAAC;IACrB,MAAM,IAAI,GAAG,IAAA,oBAAO,GAAE,CAAC;IACvB,MAAM,OAAO,GAAG,IAAA,kBAAU,EAAC,oCAAgB,CAAC,CAAC;IAC7C,MAAM,EAAE,0BAA0B,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAChE,IAAI,0BAA0B,IAAK,GAAW,CAAC,IAAI,CAAC,0BAA0B,CAAC,EAAE,CAAC;QAChF,6DAA6D;QAC7D,aAAa;QACb,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,aAAa,CAAC,GAAG,IAAA,oBAAS,EAAE,GAAW,CAAC,IAAI,CAAC,0BAA0B,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAEhH,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QAEvB,oEAAoE;QACpE,OAAO,IAAA,mBAAW,EAAC,KAAK,IAAI,EAAE;YAC5B,IAAI,CAAC,IAAI;gBAAE,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;YACpF,oEAAoE;YAEpE,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAEpD,IAAI,iBAAiB,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;gBACrC,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,cAAc,IAAI,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAClF,MAAM,QAAQ,GAAG,OAAO,EAAE,QAAQ,IAAI,yBAAc,CAAC;gBACrD,QAAQ,CAAC,GAAG,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,EAAE,iBAAiB,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC9F,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,kDAAkD,0BAA0B,sCAAsC,CAAC,CAAC;IACtI,CAAC;AACH,CAAC,CAAC;AA9BW,QAAA,UAAU,cA8BrB","sourcesContent":["import { useCallback, useContext } from \"react\";\nimport { GadgetApiContext } from \"../GadgetProvider.js\";\nimport { useAction, useApi } from \"../hooks.js\";\nimport { useUser } from \"./useUser.js\";\nimport { windowNavigate } from \"./utils.js\";\n\n/**\n * Returns a callback that will call the configured `signOutActionApiIdentifier` on the `User` model and optionally redirect (by default). Throws an `error` if one occurs while performing the `signOut` action, or if the `User` is not signed in.\n * @param opts - `redirectOnSuccess` defaults to `true` and will redirect the browser via `window.location.assign` if the sign out action is successful. Setting it to `false` will call the action but will not return. Defaults to `true`.\n * @param opts - `redirectToPath` defaults to the `signInPath` configured in the `GadgetConfigurationContext` and will be used as the redirect path if `redirectOnSuccess` is `true`.\n */\nexport const useSignOut = (opts?: { redirectOnSuccess?: boolean; redirectToPath?: string }) => {\n  const redirectOnSuccess = opts?.redirectOnSuccess ?? true;\n  const redirectToPath = opts?.redirectToPath;\n  const api = useApi();\n  const user = useUser();\n  const context = useContext(GadgetApiContext);\n  const { signOutActionApiIdentifier, signInPath } = context.auth;\n  if (signOutActionApiIdentifier && (api as any).user[signOutActionApiIdentifier]) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const [{ error }, signOutAction] = useAction((api as any).user[signOutActionApiIdentifier], { suspense: true });\n\n    if (error) throw error;\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return useCallback(async () => {\n      if (!user) throw new Error(\"attempting to sign out when the user is not signed in\");\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n      const result = await signOutAction({ id: user.id });\n\n      if (redirectOnSuccess && result.data) {\n        const redirectUrl = new URL(redirectToPath ?? signInPath, window.location.origin);\n        const navigate = context?.navigate ?? windowNavigate;\n        navigate(`${redirectUrl.pathname}${redirectUrl.search}`);\n      }\n    }, [user, signOutAction, redirectOnSuccess, redirectToPath, signInPath, context?.navigate]);\n  } else {\n    throw new Error(`missing configured signOutActionApiIdentifier '${signOutActionApiIdentifier}' on the \\`api.user\\` model manager.`);\n  }\n};\n"]}
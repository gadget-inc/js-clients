{"version":3,"file":"useSignOut.js","sourceRoot":"","sources":["../../../src/auth/useSignOut.ts"],"names":[],"mappings":";;;AAAA,iCAAgD;AAChD,4DAA0E;AAC1E,6CAAuC;AAEvC;;;;GAIG;AACI,MAAM,UAAU,GAAG,CAAC,IAA+D,EAAE,EAAE;IAC5F,MAAM,iBAAiB,GAAG,IAAI,EAAE,iBAAiB,IAAI,IAAI,CAAC;IAC1D,MAAM,cAAc,GAAG,IAAI,EAAE,cAAc,CAAC;IAC5C,MAAM,GAAG,GAAG,IAAA,0BAAM,GAAE,CAAC;IACrB,MAAM,IAAI,GAAG,IAAA,oBAAO,GAAE,CAAC;IACvB,MAAM,OAAO,GAAG,IAAA,kBAAU,EAAC,8CAA0B,CAAC,CAAC;IAEvD,OAAO,IAAA,mBAAW,EAAC,GAAG,EAAE;QACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,OAAO,EAAE,iBAAiB,EAAE,cAAc,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IACnE,CAAC,EAAE,CAAC,iBAAiB,EAAE,cAAc,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5D,oEAAoE;IACpE,oEAAoE;IACpE,qFAAqF;IACrF,kEAAkE;IAClE,kBAAkB;IAClB,2HAA2H;IAE3H,4BAA4B;IAE5B,gCAAgC;IAChC,sBAAsB;IACtB,uCAAuC;IACvC,2FAA2F;IAC3F,8DAA8D;IAC9D,kEAAkE;IAClE,QAAQ;IACR,gBAAgB;IAEhB,yEAAyE;IACzE,qCAAqC;IACrC,2FAA2F;IAC3F,2EAA2E;IAC3E,4CAA4C;IAC5C,+BAA+B;IAC/B,WAAW;IACX,yIAAyI;IACzI,IAAI;AACN,CAAC,CAAC;AAtCW,QAAA,UAAU,cAsCrB","sourcesContent":["import { useCallback, useContext } from \"react\";\nimport { GadgetConfigurationContext, useApi } from \"../GadgetProvider.js\";\nimport { useUser } from \"./useUser.js\";\n\n/**\n * Returns a callback that will call the configured `signOutActionApiIdentifier` on the `User` model and optionally redirect (by default). Throws an `error` if one occurs while performing the `signOut` action, or if the `User` is not signed in.\n * @param opts - `redirectOnSuccess` defaults to `true` and will redirect the browser via `window.location.assign` if the sign out action is successful. Setting it to `false` will call the action but will not return. Defaults to `true`.\n * @param opts - `redirectToPath` defaults to the `signInPath` configured in the `GadgetConfigurationContext` and will be used as the redirect path if `redirectOnSuccess` is `true`.\n */\nexport const useSignOut = (opts?: { redirectOnSuccess?: boolean; redirectToPath?: string }) => {\n  const redirectOnSuccess = opts?.redirectOnSuccess ?? true;\n  const redirectToPath = opts?.redirectToPath;\n  const api = useApi();\n  const user = useUser();\n  const context = useContext(GadgetConfigurationContext);\n\n  return useCallback(() => {\n    console.log(\" :\");\n    return { redirectOnSuccess, redirectToPath, api, user, context };\n  }, [redirectOnSuccess, redirectToPath, api, user, context]);\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  // const { signOutActionApiIdentifier, signInPath } = context!.auth;\n  // if (signOutActionApiIdentifier && (api as any).user[signOutActionApiIdentifier]) {\n  //   // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  //   // @ts-ignore\n  //   const [{ error, data }, signOutAction] = useAction((api as any).user[signOutActionApiIdentifier], { suspense: true });\n\n  //   if (error) throw error;\n\n  //   // eslint-disable-next-line\n  //   useEffect(() => {\n  //     if (redirectOnSuccess && data) {\n  //       const redirectUrl = new URL(redirectToPath ?? signInPath, window.location.origin);\n  //       const navigate = context?.navigate ?? windowNavigate;\n  //       navigate(`${redirectUrl.pathname}${redirectUrl.search}`);\n  //     }\n  //   }, [data]);\n\n  //   // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  //   return useCallback(async () => {\n  //     if (!user) throw new Error(\"attempting to sign out when the user is not signed in\");\n  //     // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  //     await signOutAction({ id: user.id });\n  //   }, [user, signOutAction]);\n  // } else {\n  //   throw new Error(`missing configured signOutActionApiIdentifier '${signOutActionApiIdentifier}' on the \\`api.user\\` model manager.`);\n  // }\n};\n"]}
{"version":3,"file":"useUser.js","sourceRoot":"","sources":["../../../src/auth/useUser.ts"],"names":[],"mappings":";;;AACA,4DAA8C;AAG9C,mDAA6C;AAE7C;;;GAGG;AACH,SAAgB,OAAO,CASrB,MAAmB,EACnB,OAAqG;IAarG,MAAM,WAAW,GAAG,IAAA,0BAAM,GAAS,CAAC;IACpC,MAAM,GAAG,GAAG,MAAM,IAAI,WAAW,CAAC;IAElC,IAAI,CAAC,CAAC,MAAM,IAAI,GAAG,CAAC,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;KAC1D;IAED,MAAM,EAAE,MAAM,EAAE,GAAG,QAAQ,EAAE,GAAG,OAAO,IAAK,EAAU,CAAC;IACvD,MAAM,IAAI,GAAG;QACX,QAAQ,EAAE,IAAI;QACd,GAAG,QAAQ;KACZ,CAAC;IACF,IAAI,MAAM,EAAE;QACV,IAAI,CAAC,MAAM,GAAG;YACZ,IAAI,EAAE,MAAM;SACb,CAAC;KACH;IACD,MAAM,OAAO,GAAG,IAAA,0BAAU,EAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACtC,OAAO,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC7C,CAAC;AA1CD,0BA0CC","sourcesContent":["import type { DefaultSelection, GadgetRecord, LimitToKnownKeys, Select } from \"@gadgetinc/api-client-core\";\nimport { useApi } from \"../GadgetProvider.js\";\nimport type { OptionsType, ReadOperationOptions } from \"../utils.js\";\nimport type { ClientWithSessionAndUserManagers } from \"./useSession.js\";\nimport { useSession } from \"./useSession.js\";\n\n/**\n * Used for fetching the current `User` record from Gadget. Will return `null` if the session is unauthenticated. Will suspend while the user is being fetched.\n * @returns The current user associated with the session or `null`.\n */\nexport function useUser<\n  SessionGivenOptions extends OptionsType,\n  SessionSchemaT,\n  UserGivenOptions extends OptionsType,\n  UserSchemaT,\n  Client extends ClientWithSessionAndUserManagers<SessionGivenOptions, SessionSchemaT, UserGivenOptions, UserSchemaT>,\n  Options extends Client[\"user\"][\"findMany\"][\"optionsType\"] & ReadOperationOptions,\n  ClientType extends Client | undefined\n>(\n  client?: ClientType,\n  options?: LimitToKnownKeys<Options, Client[\"user\"][\"findMany\"][\"optionsType\"] & ReadOperationOptions>\n): undefined extends ClientType\n  ? GadgetRecord<Record<string, any>>\n  : GadgetRecord<\n      Select<\n        Exclude<Exclude<ClientType, undefined>[\"user\"][\"findMany\"][\"schemaType\"], null | undefined>,\n        DefaultSelection<\n          Exclude<ClientType, undefined>[\"user\"][\"findMany\"][\"selectionType\"],\n          Options,\n          Exclude<ClientType, undefined>[\"user\"][\"findMany\"][\"defaultSelection\"]\n        >\n      >\n    > {\n  const fallbackApi = useApi() as any;\n  const api = client ?? fallbackApi;\n\n  if (!(\"user\" in api)) {\n    throw new Error(\"api client does not have a User model\");\n  }\n\n  const { select, ...baseOpts } = options ?? ({} as any);\n  const opts = {\n    suspense: true,\n    ...baseOpts,\n  };\n  if (select) {\n    opts.select = {\n      user: select,\n    };\n  }\n  const session = useSession(api, opts);\n  return session && session.getField(\"user\");\n}\n"]}
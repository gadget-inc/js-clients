{"version":3,"file":"MUIAutoRolesInput.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIAutoRolesInput.tsx"],"names":[],"mappings":";;;;AACA,4CAAwD;AACxD,0DAA0B;AAE1B,qDAA+C;AAC/C,qFAA+E;AAElE,QAAA,iBAAiB,GAAG,IAAA,wBAAS,EACxC,CACE,KAI6E,EAC7E,EAAE;IACF,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,gBAAgB,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,IAAA,kDAAsB,EAAC,KAAK,CAAC,CAAC;IAE3H,IAAI,UAAU,EAAE,CAAC;QACf,MAAM,UAAU,CAAC;IACnB,CAAC;IACD,IAAI,UAAU,EAAE,CAAC;QACf,MAAM,UAAU,CAAC;IACnB,CAAC;IAED,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,QAAQ,CAAC,IAAI,CAAC;IAC3C,IAAI,OAAO,EAAE,CAAC;QACZ,OAAO,8BAAC,oBAAS,IAAC,KAAK,EAAE,KAAK,EAAE,YAAY,EAAC,KAAK,EAAC,QAAQ,EAAE,OAAO,GAAI,CAAC;IAC3E,CAAC;IAED,OAAO,CACL,8BAAC,uBAAY,IACX,aAAa,QACb,EAAE,EAAE,GAAG,KAAK,yBAAyB,EACrC,QAAQ,QACR,WAAW,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,8BAAC,oBAAS,OAAK,MAAM,EAAE,KAAK,EAAE,KAAK,GAAI,EAChE,YAAY,EAAE,CAAC,gBAAgB,EAAE,MAAM,EAAE,EAAE,CAAC,CAC1C,yCAAQ,gBAAgB,+BAA6B,MAAM,CAAC,EAAE,IAC3D,MAAM,CAAC,KAAK,CACV,CACN,KACG,UAAU,EACd,QAAQ,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAC1B,MAAM,sBAAsB,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACjH,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;QAC1D,CAAC,EACD,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,EAC7F,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,KAC/B,KAAK,GACT,CACH,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,MAAwC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC","sourcesContent":["import type { AutocompleteProps } from \"@mui/material\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport React from \"react\";\nimport type { Control } from \"../../../useActionForm.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useRoleInputController } from \"../../hooks/useRoleInputController.js\";\n\nexport const MUIAutoRolesInput = autoInput(\n  (\n    props: {\n      field: string; // Field API identifier\n      control?: Control<any>;\n      label?: string;\n    } & Partial<AutocompleteProps<{ id: string; label: string }, true, any, any>>\n  ) => {\n    const { options, loading, rolesError, fieldError, selectedRoleKeys, fieldProps, metadata } = useRoleInputController(props);\n\n    if (rolesError) {\n      throw rolesError;\n    }\n    if (fieldError) {\n      throw fieldError;\n    }\n\n    const label = props.label ?? metadata.name;\n    if (loading) {\n      return <TextField label={label} autoComplete=\"off\" disabled={loading} />;\n    }\n\n    return (\n      <Autocomplete\n        disablePortal\n        id={`${label}_Autocomplete_Textfield`}\n        multiple\n        renderInput={(params) => <TextField {...params} label={label} />}\n        renderOption={(optionAttributes, option) => (\n          <li {...optionAttributes} data-listbox-option-value={option.id}>\n            {option.label}\n          </li>\n        )}\n        {...fieldProps}\n        onChange={(_event, value) => {\n          const uniqueSelectedRoleKeys = new Set(value.map((option) => (typeof option === \"string\" ? option : option.id)));\n          fieldProps.onChange(Array.from(uniqueSelectedRoleKeys));\n        }}\n        value={options.filter((option) => selectedRoleKeys.includes(option.value)).map(idLabelMapper)}\n        options={options.map(idLabelMapper)}\n        {...props}\n      />\n    );\n  }\n);\n\nconst idLabelMapper = (option: { value: string; label: string }) => ({ id: option.value, label: option.label });\n"]}
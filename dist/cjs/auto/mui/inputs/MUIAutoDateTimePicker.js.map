{"version":3,"file":"MUIAutoDateTimePicker.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIAutoDateTimePicker.tsx"],"names":[],"mappings":";;;;AAAA,4CAAoC;AACpC,wDAA6D;AAC7D,0DAA0B;AAC1B,gEAA2D;AAE3D,gEAA0D;AAC1D,qDAA+C;AAC/C,yEAAmE;AAEtD,QAAA,qBAAqB,GAAG,IAAA,wBAAS,EAC5C,CAAC,KAAwG,EAAE,EAAE;IAC3G,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;IACjE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAA,sCAAgB,EAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACzD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC;IACtC,MAAM,UAAU,GAAG,QAAQ,CAAC,wBAAwB,CAAC;IACrD,MAAM,KAAK,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAExE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,IAAA,gCAAa,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAExE,OAAO,CACL,8BAAC,cAAG,IAAC,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;QAC1B,8BAAC,2BAAU,IACT,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,EAAE,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,EAAE,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,EAC9F,QAAQ,EAAE,CAAC,QAAuC,EAAE,EAAE;gBACpD,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAA,iCAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;gBACpE,UAAU,CAAC,QAAQ,CAAC,IAAA,iCAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YACzE,CAAC,GACD;QACA,MAA+B,CAAC,WAAW,IAAI,CAC/C,8BAAC,2BAAU,IACT,QAAQ,EAAE,CAAC,QAAuC,EAAE,EAAE;gBACpD,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAA,iCAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;gBACpE,UAAU,CAAC,QAAQ,CAAC,IAAA,iCAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YACzE,CAAC,GACD,CACH,CACG,CACP,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,kBAAe,6BAAqB,CAAC","sourcesContent":["import { Box } from \"@mui/material\";\nimport { DatePicker, TimePicker } from \"@mui/x-date-pickers\";\nimport React from \"react\";\nimport { zonedTimeToUtc } from \"../../../dateTimeUtils.js\";\nimport type { GadgetDateTimeConfig } from \"../../../internal/gql/graphql.js\";\nimport { useController } from \"../../../useActionForm.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\n\nexport const MUIAutoDateTimePicker = autoInput(\n  (props: { field: string; value?: Date; onChange?: (value: Date) => void; error?: string; label?: string }) => {\n    const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const { path, metadata } = useFieldMetadata(props.field);\n    const config = metadata.configuration;\n    const isRequired = metadata.requiredArgumentForInput;\n    const label = (props.label ?? metadata.name) + (isRequired ? \" *\" : \"\");\n\n    const { field: fieldProps, fieldState } = useController({ name: path });\n\n    return (\n      <Box sx={{ display: \"flex\" }}>\n        <DatePicker\n          label={label}\n          slotProps={{ textField: { error: !!fieldState.error, helperText: fieldState.error?.message } }}\n          onChange={(newValue: string | number | Date | null) => {\n            props.onChange?.(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n            fieldProps.onChange(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n          }}\n        />\n        {(config as GadgetDateTimeConfig).includeTime && (\n          <TimePicker\n            onChange={(newValue: string | number | Date | null) => {\n              props.onChange?.(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n              fieldProps.onChange(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n            }}\n          />\n        )}\n      </Box>\n    );\n  }\n);\n\nexport default MUIAutoDateTimePicker;\n"]}
{"version":3,"file":"MUIAutoDateTimePicker.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIAutoDateTimePicker.tsx"],"names":[],"mappings":";;;;AAAA,4CAAoC;AACpC,wDAA6D;AAC7D,0DAA0B;AAC1B,qDAAgD;AAChD,gEAA2D;AAE3D,yEAAmE;AAE5D,MAAM,qBAAqB,GAAG,CAAC,KAMrC,EAAE,EAAE;IACH,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;IACjE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAA,sCAAgB,EAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACzD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC;IACtC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAA,+BAAa,EAAC;QAC1C,IAAI,EAAE,IAAI;KACX,CAAC,CAAC;IAEH,OAAO,CACL,8BAAC,cAAG,IAAC,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;QAC1B,8BAAC,2BAAU,IACT,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,QAAQ,CAAC,IAAI,EACnC,QAAQ,EAAE,CAAC,QAAuC,EAAE,EAAE;gBACpD,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAA,iCAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;gBACpE,UAAU,CAAC,QAAQ,CAAC,IAAA,iCAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YACzE,CAAC,GACD;QACA,MAA+B,CAAC,WAAW,IAAI,CAC/C,8BAAC,2BAAU,IACT,QAAQ,EAAE,CAAC,QAAuC,EAAE,EAAE;gBACpD,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAA,iCAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;gBACpE,UAAU,CAAC,QAAQ,CAAC,IAAA,iCAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YACzE,CAAC,GACD,CACH,CACG,CACP,CAAC;AACJ,CAAC,CAAC;AAjCW,QAAA,qBAAqB,yBAiChC;AAEF,kBAAe,6BAAqB,CAAC","sourcesContent":["import { Box } from \"@mui/material\";\nimport { DatePicker, TimePicker } from \"@mui/x-date-pickers\";\nimport React from \"react\";\nimport { useController } from \"react-hook-form\";\nimport { zonedTimeToUtc } from \"../../../dateTimeUtils.js\";\nimport type { GadgetDateTimeConfig } from \"../../../internal/gql/graphql.js\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\n\nexport const MUIAutoDateTimePicker = (props: {\n  field: string;\n  value?: Date;\n  onChange?: (value: Date) => void;\n  error?: string;\n  label?: string;\n}) => {\n  const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  const { path, metadata } = useFieldMetadata(props.field);\n  const config = metadata.configuration;\n  const { field: fieldProps } = useController({\n    name: path,\n  });\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <DatePicker\n        label={props.label ?? metadata.name}\n        onChange={(newValue: string | number | Date | null) => {\n          props.onChange?.(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n          fieldProps.onChange(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n        }}\n      />\n      {(config as GadgetDateTimeConfig).includeTime && (\n        <TimePicker\n          onChange={(newValue: string | number | Date | null) => {\n            props.onChange?.(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n            fieldProps.onChange(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n          }}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default MUIAutoDateTimePicker;\n"]}
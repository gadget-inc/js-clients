{"version":3,"file":"MUIAutoPasswordInput.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIAutoPasswordInput.tsx"],"names":[],"mappings":";;;;AACA,4CAA2C;AAC3C,uDAAwC;AAExC,iEAA+D;AAC/D,qFAA+E;AAE/E;;;GAGG;AACH,MAAM,2BAA2B,GAAG,UAAU,CAAC;AAC/C,MAAM,WAAW,GAAG,IAAI,CAAC;AAElB,MAAM,oBAAoB,GAAG,CAClC,KAG2B,EAC3B,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,wCAAmB,GAAE,CAAC;IACzC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAC,CAAC,MAAM,CAAC,CAAC;IAEpD,MAAM,kBAAkB,GAAG,CACzB,8BAAC,qBAAU,IAAC,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,KAAK,oBAAoB,IACpF,WAAW,CACD,CACd,CAAC;IAEF,OAAO,CACL,8BAAC,4DAA2B,OACtB,CAAC,SAAS;YACZ,CAAC,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE;YAC7B,CAAC,CAAC;gBACE,UAAU,EAAE,EAAE,YAAY,EAAE,kBAAkB,EAAE;gBAChD,WAAW,EAAE,2BAA2B;gBACxC,QAAQ,EAAE,IAAI;aACf,CAAC,KACF,KAAK,GACT,CACH,CAAC;AACJ,CAAC,CAAC;AA3BW,QAAA,oBAAoB,wBA2B/B","sourcesContent":["import type { TextFieldProps } from \"@mui/material\";\nimport { IconButton } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport type { Control } from \"react-hook-form\";\nimport { useAutoFormMetadata } from \"../../AutoFormContext.js\";\nimport { MUIAutoEncryptedStringInput } from \"./MUIAutoEncryptedStringInput.js\";\n\n/**\n * The salted password hash is not retrieved from the DB\n * Regardless of the password is defined or not, this placeholder is shown as exposing an unset password is a security risk\n */\nconst existingPasswordPlaceholder = \"********\";\nconst pencilEmoji = `✏️`;\n\nexport const MUIAutoPasswordInput = (\n  props: {\n    field: string; // The field API identifier\n    control?: Control<any>;\n  } & Partial<TextFieldProps>\n) => {\n  const { findBy } = useAutoFormMetadata();\n  const [isEditing, setIsEditing] = useState(!findBy);\n\n  const startEditingButton = (\n    <IconButton onClick={() => setIsEditing(true)} role={`${props.field}EditPasswordButton`}>\n      {pencilEmoji}\n    </IconButton>\n  );\n\n  return (\n    <MUIAutoEncryptedStringInput\n      {...(isEditing\n        ? { placeholder: \"Password\" }\n        : {\n            InputProps: { endAdornment: startEditingButton },\n            placeholder: existingPasswordPlaceholder,\n            disabled: true,\n          })}\n      {...props}\n    />\n  );\n};\n"]}
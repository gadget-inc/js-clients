{"version":3,"file":"MUIAutoPasswordInput.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIAutoPasswordInput.tsx"],"names":[],"mappings":";;;;AACA,4CAA2C;AAC3C,uDAAwC;AACxC,gEAAwE;AACxE,iEAA+D;AAC/D,qDAA+C;AAC/C,yEAAmE;AACnE,qFAA+E;AAE/E;;;GAGG;AACH,MAAM,2BAA2B,GAAG,UAAU,CAAC;AAC/C,MAAM,WAAW,GAAG,IAAI,CAAC;AAEZ,QAAA,oBAAoB,GAAG,IAAA,wBAAS,EAC3C,CACE,KAG2B,EAC3B,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,wCAAmB,GAAE,CAAC;IACzC,MAAM,EAAE,IAAI,EAAE,GAAG,IAAA,sCAAgB,EAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC/C,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAA,gCAAa,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAE5D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAC,CAAC,MAAM,CAAC,CAAC;IAEpD,MAAM,YAAY,GAAG,GAAG,EAAE;QACxB,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,sCAAsC;QAC/D,YAAY,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC;IAEF,MAAM,kBAAkB,GAAG,CACzB,8BAAC,qBAAU,IAAC,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,KAAK,oBAAoB,IACxE,WAAW,CACD,CACd,CAAC;IAEF,OAAO,CACL,8BAAC,4DAA2B,OACtB,CAAC,SAAS;YACZ,CAAC,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE;YAC7B,CAAC,CAAC;gBACE,UAAU,EAAE,EAAE,YAAY,EAAE,kBAAkB,EAAE;gBAChD,WAAW,EAAE,2BAA2B;gBACxC,QAAQ,EAAE,IAAI;aACf,CAAC,KACF,KAAK,GACT,CACH,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["import type { TextFieldProps } from \"@mui/material\";\nimport { IconButton } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { useController, type Control } from \"../../../useActionForm.js\";\nimport { useAutoFormMetadata } from \"../../AutoFormContext.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\nimport { MUIAutoEncryptedStringInput } from \"./MUIAutoEncryptedStringInput.js\";\n\n/**\n * The salted password hash is not retrieved from the DB\n * Regardless of the password is defined or not, this placeholder is shown as exposing an unset password is a security risk\n */\nconst existingPasswordPlaceholder = \"********\";\nconst pencilEmoji = `✏️`;\n\nexport const MUIAutoPasswordInput = autoInput(\n  (\n    props: {\n      field: string; // The field API identifier\n      control?: Control<any>;\n    } & Partial<TextFieldProps>\n  ) => {\n    const { findBy } = useAutoFormMetadata();\n    const { path } = useFieldMetadata(props.field);\n    const { field: fieldProps } = useController({ name: path });\n\n    const [isEditing, setIsEditing] = useState(!findBy);\n\n    const startEditing = () => {\n      fieldProps.onChange(\"\"); // Touch the field to mark it as dirty\n      setIsEditing(true);\n    };\n\n    const startEditingButton = (\n      <IconButton onClick={startEditing} role={`${props.field}EditPasswordButton`}>\n        {pencilEmoji}\n      </IconButton>\n    );\n\n    return (\n      <MUIAutoEncryptedStringInput\n        {...(isEditing\n          ? { placeholder: \"Password\" }\n          : {\n              InputProps: { endAdornment: startEditingButton },\n              placeholder: existingPasswordPlaceholder,\n              disabled: true,\n            })}\n        {...props}\n      />\n    );\n  }\n);\n"]}
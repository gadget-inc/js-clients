{"version":3,"file":"MUIDateTimePicker.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIDateTimePicker.tsx"],"names":[],"mappings":";;;;AAAA,4CAAoC;AACpC,wDAA6D;AAC7D,6CAA6C;AAC7C,0DAA0B;AAC1B,qDAAgD;AAChD,yEAAmE;AAE5D,MAAM,iBAAiB,GAAG,CAAC,KAAwF,EAAE,EAAE;IAC5H,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;IACjE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAA,sCAAgB,EAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACzD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC;IACtC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAA,+BAAa,EAAC;QAC1C,IAAI,EAAE,IAAI;KACX,CAAC,CAAC;IAEH,OAAO,CACL,8BAAC,cAAG,IAAC,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;QAC1B,8BAAC,2BAAU,IACT,KAAK,EAAE,QAAQ,CAAC,IAAI,EACpB,QAAQ,EAAE,CAAC,QAAuC,EAAE,EAAE;gBACpD,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAA,4BAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;gBACpE,UAAU,CAAC,QAAQ,CAAC,IAAA,4BAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YACzE,CAAC,GACD;QACA,MAAc,CAAC,WAAW,IAAI,CAC9B,8BAAC,2BAAU,IACT,QAAQ,EAAE,CAAC,QAAuC,EAAE,EAAE;gBACpD,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAA,4BAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;gBACpE,UAAU,CAAC,QAAQ,CAAC,IAAA,4BAAc,EAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YACzE,CAAC,GACD,CACH,CACG,CACP,CAAC;AACJ,CAAC,CAAC;AA3BW,QAAA,iBAAiB,qBA2B5B;AAEF,kBAAe,yBAAiB,CAAC","sourcesContent":["import { Box } from \"@mui/material\";\nimport { DatePicker, TimePicker } from \"@mui/x-date-pickers\";\nimport { zonedTimeToUtc } from \"date-fns-tz\";\nimport React from \"react\";\nimport { useController } from \"react-hook-form\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\n\nexport const MUIDateTimePicker = (props: { field: string; value?: Date; onChange?: (value: Date) => void; error?: string }) => {\n  const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  const { path, metadata } = useFieldMetadata(props.field);\n  const config = metadata.configuration;\n  const { field: fieldProps } = useController({\n    name: path,\n  });\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <DatePicker\n        label={metadata.name}\n        onChange={(newValue: string | number | Date | null) => {\n          props.onChange?.(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n          fieldProps.onChange(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n        }}\n      />\n      {(config as any).includeTime && (\n        <TimePicker\n          onChange={(newValue: string | number | Date | null) => {\n            props.onChange?.(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n            fieldProps.onChange(zonedTimeToUtc(new Date(newValue ?? \"\"), localTz));\n          }}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default MUIDateTimePicker;\n"]}
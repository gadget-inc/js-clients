{"version":3,"file":"MUIAutoFileInput.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIAutoFileInput.tsx"],"names":[],"mappings":";;;;AAAA,4CAA+C;AAC/C,0DAA0B;AAE1B,qDAA+C;AAC/C,qFAA+E;AAC/E,mEAA6D;AAO7D,MAAM,mBAAmB,GAAG,IAAA,iBAAM,EAAC,OAAO,CAAC,CAAC;IAC1C,IAAI,EAAE,eAAe;IACrB,QAAQ,EAAE,YAAY;IACtB,MAAM,EAAE,CAAC;IACT,QAAQ,EAAE,QAAQ;IAClB,QAAQ,EAAE,UAAU;IACpB,MAAM,EAAE,CAAC;IACT,IAAI,EAAE,CAAC;IACP,UAAU,EAAE,QAAQ;IACpB,KAAK,EAAE,CAAC;CACT,CAAC,CAAC;AAEU,QAAA,gBAAgB,GAAG,IAAA,wBAAS,EAAC,CAAC,KAAgE,EAAE,EAAE;IAC7G,MAAM,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IAC5D,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,IAAA,kDAAsB,EAAC;QACxD,KAAK,EAAE,kBAAkB;QACzB,OAAO;KACR,CAAC,CAAC;IAEH,OAAO,CACL,8BAAC,0CAAkB,IAAC,KAAK,EAAE,KAAK,CAAC,KAAK;QACpC,8BAAC,iBAAM,IAAC,SAAS,EAAC,OAAO,EAAC,OAAO,EAAC,WAAW;YAC1C,KAAK,CAAC,KAAK,IAAI,QAAQ,CAAC,IAAI;;YAAG,QAAQ,CAAC,wBAAwB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI;YAC9E,8BAAC,mBAAmB,IAClB,IAAI,EAAC,MAAM,EACX,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;oBAClB,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACxD,KAAK,YAAY,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7C,CAAC;gBACH,CAAC,GACD,CACK,CACU,CACtB,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { Button, styled } from \"@mui/material\";\nimport React from \"react\";\nimport type { Control } from \"../../../useActionForm.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useFileInputController } from \"../../hooks/useFileInputController.js\";\nimport { MUIAutoFormControl } from \"./MUIAutoFormControl.js\";\n\nexport interface MUIFileInputProps {\n  label?: string;\n  value?: File;\n  onChange: (value: File) => void;\n}\nconst VisuallyHiddenInput = styled(\"input\")({\n  clip: \"rect(0 0 0 0)\",\n  clipPath: \"inset(50%)\",\n  height: 1,\n  overflow: \"hidden\",\n  position: \"absolute\",\n  bottom: 0,\n  left: 0,\n  whiteSpace: \"nowrap\",\n  width: 1,\n});\n\nexport const MUIAutoFileInput = autoInput((props: { field: string; control?: Control<any>; label?: string }) => {\n  const { field: fieldApiIdentifier, control, label } = props;\n  const { onFileUpload, metadata } = useFileInputController({\n    field: fieldApiIdentifier,\n    control,\n  });\n\n  return (\n    <MUIAutoFormControl field={props.field}>\n      <Button component=\"label\" variant=\"contained\">\n        {props.label ?? metadata.name} {metadata.requiredArgumentForInput ? \"*\" : null}\n        <VisuallyHiddenInput\n          type=\"file\"\n          onChange={(event) => {\n            if (event.target.files && event.target.files.length > 0) {\n              void onFileUpload([event.target.files[0]]);\n            }\n          }}\n        />\n      </Button>\n    </MUIAutoFormControl>\n  );\n});\n"]}
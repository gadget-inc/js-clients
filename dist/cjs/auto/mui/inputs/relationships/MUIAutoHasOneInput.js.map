{"version":3,"file":"MUIAutoHasOneInput.js","sourceRoot":"","sources":["../../../../../../src/auto/mui/inputs/relationships/MUIAutoHasOneInput.tsx"],"names":[],"mappings":";;;;AAAA,4CAAyE;AACzE,0DAA0B;AAC1B,4FAAsF;AAGtF;;GAEG;AACH,MAAM,wCAAwC,GAAG,KAAK,CAAC;AAEhD,MAAM,kBAAkB,GAAG,CAAC,KAAiC,EAAE,EAAE;IACtE,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IACxB,MAAM,EACJ,aAAa,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EACjC,mBAAmB,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,EACpD,cAAc,EACd,cAAc,EACd,cAAc,GACf,GAAG,IAAA,sDAAwB,EAAC,KAAK,CAAC,CAAC;IAEpC,OAAO,CACL,8BAAC,uBAAY,IACX,YAAY,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC9B,MAAM,gBAAgB,GAAG,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC;YAClD,MAAM,UAAU,GAAG,cAAc,EAAE,EAAE,KAAK,MAAM,CAAC,QAAQ,CAAC;YAC1D,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CACzB,8BAAC,cAAG,IAAC,SAAS,EAAC,IAAI,KAAK,KAAK;gBAC1B,UAAU,IAAI,KAAK;gBACnB,MAAM,CAAC,KAAK,CACT,CACP,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAC3B,8BAAC,cAAG,OACE,KAAK,EACT,SAAS,EAAC,IAAI,EACd,OAAO,EAAE,GAAG,EAAE,CAAC,SAAS,EACxB,WAAW,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE;gBAM5C,8BAAC,qBAAU,IAAC,KAAK,EAAE,MAAM,IAAG,mBAAmB,CAAC,KAAK,CAAc,CAC/D,CACP,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,0BAA0B;QACtC,CAAC,EACD,OAAO,EAAE,CAAC,GAAG,OAAO,EAAE,mBAAmB,CAAC,EAC1C,QAAQ,EAAE,CAAC,CAAC,EAAE,aAAa,EAAE,EAAE,CAAC,cAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,EACtE,OAAO,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,EAC3B,WAAW,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CACvB,8BAAC,oBAAS,OAAK,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,IAAI,GAAI,CAC9H,GACa,CACjB,CAAC;AACJ,CAAC,CAAC;AA3CW,QAAA,kBAAkB,sBA2C7B;AAEF,MAAM,mBAAmB,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC","sourcesContent":["import { Autocomplete, Box, TextField, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { useHasOneInputController } from \"../../../hooks/useHasOneInputController.js\";\nimport type { AutoRelationshipInputProps } from \"../../../interfaces/AutoRelationshipInputProps.js\";\n\n/**\n * TODO - Enable when API level 1-1 relationship mappings are maintained by calling updates on other records\n */\nconst showErrorBannerWhenTooManyRelatedRecords = false;\n\nexport const MUIAutoHasOneInput = (props: AutoRelationshipInputProps) => {\n  const { field } = props;\n  const {\n    fieldMetadata: { path, metadata },\n    relatedModelOptions: { options, search, pagination },\n    selectedRecord,\n    onSelectRecord,\n    onRemoveRecord,\n  } = useHasOneInputController(props);\n\n  return (\n    <Autocomplete\n      renderOption={(props, option) => {\n        const isShowMoreButton = option.recordId === \"-1\";\n        const isSelected = selectedRecord?.id === option.recordId;\n        return !isShowMoreButton ? (\n          <Box component=\"li\" {...props}>\n            {isSelected && `✔️ `}\n            {option.label}\n          </Box>\n        ) : pagination.hasNextPage ? (\n          <Box\n            {...props}\n            component=\"li\"\n            onClick={() => undefined} // Overriding the default onClick makes this un-selectable\n            onMouseOver={() => pagination.loadNextPage()}\n          >\n            {/* TODO \n              - Implement a ListBox type of component that automatically loads more records when scrolled to the bottom\n              - Currently using a `hover to show more` approach since scroll controls need debouncing and scroll position tracking systems\n            */}\n            <Typography color={\"blue\"}>{showMoreHoverOption.label}</Typography>\n          </Box>\n        ) : null; // No more records to load\n      }}\n      options={[...options, showMoreHoverOption]}\n      onChange={(e, selectedValue) => onSelectRecord(selectedValue.recordId)}\n      onClose={() => search.set()}\n      renderInput={(params) => (\n        <TextField {...params} value={search.value} label={metadata.name} onChange={(e) => search.set(e.target.value)} name={path} />\n      )}\n    ></Autocomplete>\n  );\n};\n\nconst showMoreHoverOption = { recordId: \"-1\", label: \"Show more\" };\n"]}
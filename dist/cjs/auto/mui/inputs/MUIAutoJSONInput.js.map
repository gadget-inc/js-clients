{"version":3,"file":"MUIAutoJSONInput.js","sourceRoot":"","sources":["../../../../../src/auto/mui/inputs/MUIAutoJSONInput.tsx"],"names":[],"mappings":";;;;AACA,4CAA0C;AAC1C,0DAA0B;AAE1B,sDAAgD;AAChD,qDAA+C;AAC/C,qFAA+E;AAElE,QAAA,gBAAgB,GAAG,IAAA,wBAAS,EACvC,CACE,KAG6C,EAC7C,EAAE;IACF,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,IAAA,sBAAQ,GAAE,CAAC;IAC3C,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,WAAW,EAAE,GAAG,KAAK,CAAC;IACnE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,UAAU,EAAE,GAAG,IAAA,kDAAsB,EAAC,KAAK,CAAC,CAAC;IAEnF,MAAM,YAAY,GAAG,CAAC,SAAS,IAAI,CAAC,CAAC,YAAY,CAAC;IAClD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC;IAC9C,OAAO,CACL,8BAAC,oBAAS,IACR,SAAS,QACT,OAAO,EAAE,CAAC,EACV,UAAU,EAAE,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,EAClD,KAAK,EAAE,YAAY,EACnB,UAAU,EAAE,YAAY,IAAI,iBAAiB,YAAY,EAAE,KACvD,UAAU,KACV,UAAU,KACV,WAAW,EACf,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,GAC5D,CACH,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["import type { TextFieldProps } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport React from \"react\";\nimport type { Control } from \"../../../useActionForm.js\";\nimport { useFocus } from \"../../../useFocus.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useJSONInputController } from \"../../hooks/useJSONInputController.js\";\n\nexport const MUIAutoJSONInput = autoInput(\n  (\n    props: {\n      field: string; // The field API identifier\n      control?: Control<any>;\n    } & Partial<Omit<TextFieldProps, \"onChange\">>\n  ) => {\n    const [isFocused, focusProps] = useFocus();\n    const { field: _field, control: _control, ...restOfProps } = props;\n    const { type: _type, errorMessage, ...controller } = useJSONInputController(props);\n\n    const inErrorState = !isFocused && !!errorMessage;\n    const label = props.label ?? controller.label;\n    return (\n      <TextField\n        multiline\n        maxRows={4}\n        inputProps={{ style: { fontFamily: \"monospace\" } }}\n        error={inErrorState}\n        helperText={inErrorState && `Invalid JSON: ${errorMessage}`}\n        {...controller}\n        {...focusProps}\n        {...restOfProps}\n        label={label}\n        onChange={(event) => controller.onChange(event.target.value)}\n      />\n    );\n  }\n);\n"]}
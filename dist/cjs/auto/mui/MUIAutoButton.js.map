{"version":3,"file":"MUIAutoButton.js","sourceRoot":"","sources":["../../../../src/auto/mui/MUIAutoButton.tsx"],"names":[],"mappings":";;;;AACA,kCAAgD;AAEhD,8EAA8C;AAE9C,uDAAwC;AAGxC,oFAA8E;AAE9E,MAAM,YAAY,GAAG,kBAAe,CAAC,CAAC,oEAAoE;AAE1G;;GAEG;AACI,MAAM,aAAa,GAAG,CAK3B,KAAgG,EAChG,EAAE;IACF,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,IAAA,oDAAuB,EAAC;QAC5F,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE;YACrB,WAAW,CAAC;gBACV,IAAI,EAAE,IAAI;gBACV,gBAAgB,EAAE,IAAI;gBACtB,OAAO,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC;gBAChC,QAAQ,EAAE,8BAAC,WAAK,IAAC,QAAQ,EAAC,SAAS;oBAAE,KAAK;kCAAoB;aAC/D,CAAC,CAAC;QACL,CAAC;QACD,OAAO,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YAC1B,WAAW,CAAC;gBACV,IAAI,EAAE,IAAI;gBACV,gBAAgB,EAAE,IAAI;gBACtB,OAAO,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC;gBAChC,QAAQ,EAAE,CACR,8BAAC,WAAK,IAAC,QAAQ,EAAC,OAAO;oBACpB,KAAK;;oBAAyB,KAAK,CAAC,OAAO,CACtC,CACT;aACF,CAAC,CAAC;QACL,CAAC;QACD,GAAG,KAAK;KACT,CAAC,CAAC;IACH,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,IAAA,gBAAQ,EAAuB,IAAI,CAAC,CAAC;IAErE,OAAO,CACL;QACE,8BAAC,mBAAa,IAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,EAAE,GAAG,KAAM,WAAW,IAC3H,KAAK,EAAE,QAAQ,IAAI,KAAK,CACX;QACf,QAAQ,IAAI,8BAAC,YAAY,OAAK,QAAQ,GAAI,CAC1C,CACJ,CAAC;AACJ,CAAC,CAAC;AAxCW,QAAA,aAAa,iBAwCxB","sourcesContent":["import type { ActionFunction, GlobalActionFunction } from \"@gadgetinc/api-client-core\";\nimport { Alert, LoadingButton } from \"@mui/lab\";\nimport type { SnackbarProps } from \"@mui/material/Snackbar\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport type { ComponentProps } from \"react\";\nimport React, { useState } from \"react\";\nimport type { OptionsType } from \"../../utils.js\";\nimport type { AutoButtonProps } from \"../hooks/useAutoButtonController.js\";\nimport { useAutoButtonController } from \"../hooks/useAutoButtonController.js\";\n\nconst SnackbarHack = Snackbar as any; // types in MUI for this component are wrong, it is a default export\n\n/**\n * Render a button that invokes an action when clicked, and shows a snackbar notification when the action succeeds or encounters an error by default.\n */\nexport const MUIAutoButton = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>\n>(\n  props: AutoButtonProps<GivenOptions, SchemaT, ActionFunc> & ComponentProps<typeof LoadingButton>\n) => {\n  const { fetching, running, isDestructive, run, label, buttonProps } = useAutoButtonController({\n    onSuccess: (_result) => {\n      setSnackbar({\n        open: true,\n        autoHideDuration: 3000,\n        onClose: () => setSnackbar(null),\n        children: <Alert severity=\"success\">{label} succeeded.</Alert>,\n      });\n    },\n    onError: (error, _result) => {\n      setSnackbar({\n        open: true,\n        autoHideDuration: 3000,\n        onClose: () => setSnackbar(null),\n        children: (\n          <Alert severity=\"error\">\n            {label} encountered an error: {error.message}\n          </Alert>\n        ),\n      });\n    },\n    ...props,\n  });\n  const [snackbar, setSnackbar] = useState<SnackbarProps | null>(null);\n\n  return (\n    <>\n      <LoadingButton loading={running} disabled={fetching} color={isDestructive ? \"error\" : undefined} onClick={run} {...buttonProps}>\n        {props?.children ?? label}\n      </LoadingButton>\n      {snackbar && <SnackbarHack {...snackbar} />}\n    </>\n  );\n};\n"]}
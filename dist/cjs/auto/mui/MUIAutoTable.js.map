{"version":3,"file":"MUIAutoTable.js","sourceRoot":"","sources":["../../../../src/auto/mui/MUIAutoTable.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,4CAAoD;AAEpD,kDAA4C;AAC5C,+CAAuC;AACvC,mDAA6C;AAG7C,6DAAuD;AAEvD;;GAEG;AACI,MAAM,YAAY,GAAG,CAM1B,KAAqF,EACrF,EAAE;IACF,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,OAAO,CAAC,GAAG,IAAA,sBAAQ,EAAiD,KAAK,CAAC,OAAO,EAAE;QAClI,MAAM,EAAE,KAAK,CAAC,MAAM;KACd,CAAC,CAAC;IAEV,MAAM,UAAU,GAAiB,IAAA,eAAO,EAAC,GAAG,EAAE;QAC5C,IAAI,CAAC,OAAO;YAAE,OAAO,EAAE,CAAC;QACxB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAC9B,KAAK,EAAE,MAAM,CAAC,aAAa;YAC3B,UAAU,EAAE,MAAM,CAAC,IAAI;YACvB,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAC,CAAC;IACN,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,IAAI,KAAK,EAAE;QACT,OAAO,8BAAC,oCAAe,IAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,GAAI,CAAC;KAC1D;IAED,OAAO,CACL,8BAAC,sBAAQ,IACP,OAAO,EAAE,QAAQ,EACjB,cAAc,EAAC,QAAQ,EACvB,IAAI,EAAE,IAAI,IAAI,EAAE,EAChB,OAAO,EAAE,UAAU,EACnB,iBAAiB,QACjB,0BAA0B,QAC1B,KAAK,EAAE;YACL,MAAM,EAAE,GAAG,EAAE;gBACX,OAAO,CACL,8BAAC,cAAG,IAAC,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE;oBACxD,8BAAC,yBAAc,IACb,IAAI,EAAC,UAAU,iBACH,eAAe,EAC3B,QAAQ,EAAE,CAAC,IAAI,CAAC,eAAe,EAC/B,OAAO,EAAE,IAAI,CAAC,gBAAgB,GAC9B;oBACF,8BAAC,yBAAc,IAAC,IAAI,EAAC,MAAM,iBAAa,WAAW,EAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,IAAI,CAAC,YAAY,GAAI,CAC3G,CACP,CAAC;YACJ,CAAC;YACD,GAAG,KAAK,CAAC,KAAK;SACf,KACI,KAAa,GAClB,CACH,CAAC;AACJ,CAAC,CAAC;AApDW,QAAA,YAAY,gBAoDvB","sourcesContent":["import type { FindManyFunction } from \"@gadgetinc/api-client-core\";\nimport { Box, PaginationItem } from \"@mui/material\";\nimport type { DataGridProps, GridColDef } from \"@mui/x-data-grid\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useMemo } from \"react\";\nimport { useTable } from \"../../useTable.js\";\nimport type { OptionsType } from \"../../utils\";\nimport type { AutoTableProps } from \"../AutoTable\";\nimport { MUIErrorDisplay } from \"./MUIErrorDisplay.js\";\n\n/**\n * Renders a table of records from the backend automatically for a given model using MUI\n */\nexport const MUIAutoTable = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n  Options extends FinderFunction[\"optionsType\"]\n>(\n  props: AutoTableProps<GivenOptions, SchemaT, FinderFunction, Options> & DataGridProps\n) => {\n  const [{ rows, columns, page, fetching, error }, refresh] = useTable<GivenOptions, SchemaT, FinderFunction, Options>(props.manager, {\n    select: props.select,\n  } as any);\n\n  const muiColumns: GridColDef[] = useMemo(() => {\n    if (!columns) return [];\n    return columns.map((column) => ({\n      field: column.apiIdentifier,\n      headerName: column.name,\n      editable: false,\n    }));\n  }, [columns]);\n\n  if (error) {\n    return <MUIErrorDisplay error={error} retry={refresh} />;\n  }\n\n  return (\n    <DataGrid\n      loading={fetching}\n      paginationMode=\"server\"\n      rows={rows || []}\n      columns={muiColumns}\n      checkboxSelection\n      disableRowSelectionOnClick\n      slots={{\n        footer: () => {\n          return (\n            <Box sx={{ display: \"flex\", flexDirection: \"row\", gap: 2 }}>\n              <PaginationItem\n                type=\"previous\"\n                data-testid=\"previous-page\"\n                disabled={!page.hasPreviousPage}\n                onClick={page.goToPreviousPage}\n              />\n              <PaginationItem type=\"next\" data-testid=\"next-page\" disabled={!page.hasNextPage} onClick={page.goToNextPage} />\n            </Box>\n          );\n        },\n        ...props.slots,\n      }}\n      {...(props as any)}\n    />\n  );\n};\n"]}
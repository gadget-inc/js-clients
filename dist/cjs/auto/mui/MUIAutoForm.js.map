{"version":3,"file":"MUIAutoForm.js","sourceRoot":"","sources":["../../../../src/auto/mui/MUIAutoForm.tsx"],"names":[],"mappings":";;;;AACA,kCAAyC;AAEzC,4CAAsD;AACtD,0DAA0B;AAC1B,qDAA+C;AAC/C,mDAAsD;AACtD,6DAAuD;AAGvD,gDAAsE;AACtE,8DAAgE;AAChE,6DAAuD;AACvD,8DAAwD;AAEjD,MAAM,eAAe,GAAG,GAAG,EAAE,CAAC,CACnC;IACE,8BAAC,mBAAQ,IAAC,SAAS,EAAC,MAAM,GAAG;IAC7B,8BAAC,mBAAQ,IAAC,SAAS,EAAC,MAAM,GAAG,CAC5B,CACJ,CAAC;AALW,QAAA,eAAe,mBAK1B;AASF;;GAEG;AACI,MAAM,WAAW,GAAG,CAMzB,KAAmE,EACnE,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IAElD,6EAA6E;IAC7E,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,IAAA,+BAAiB,EAAC,MAAM,CAAC,CAAC;IAEjG,6EAA6E;IAC7E,MAAM,MAAM,GAAG,IAAA,2BAAa,EAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAE9C,sCAAsC;IACtC,MAAM,EACJ,MAAM,EACN,KAAK,EAAE,SAAS,EAChB,SAAS,EAAE,EAAE,SAAS,EAAE,kBAAkB,EAAE,EAC5C,mBAAmB,GACpB,GAAG,IAAA,gCAAa,EAAC,MAAM,EAAE;QACxB,aAAa,EAAE,EAAE,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,KAAK,CAAC,MAAM,EAAE;QAC5D,MAAM;QACN,QAAQ,EAAE,IAAA,mCAAqB,EAAC,QAAQ,CAAC;QACzC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC;KACrC,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG,SAAS,IAAI,aAAa,CAAC;IACzC,IAAI,KAAK,IAAI,CAAE,KAAsB,CAAC,gBAAgB,EAAE,CAAC;QACvD,OAAO,8BAAC,oCAAe,IAAC,KAAK,EAAE,KAAK,GAAI,CAAC;IAC3C,CAAC;IAED,IAAI,kBAAkB,EAAE,CAAC;QACvB,OAAO,KAAK,CAAC,cAAc,IAAI,8BAAC,gBAAK,IAAC,QAAQ,EAAC,SAAS;;YAAQ,QAAQ,EAAE,IAAI;4BAAsB,CAAC;IACvG,CAAC;IAED,OAAO,CACL,8BAAC,4CAAuB,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE;QAC3D,8BAAC,8BAAY,OAAK,mBAAmB;YACnC,8BAAC,eAAI,IAAC,SAAS,QAAC,SAAS,EAAC,MAAM,EAAC,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,MAAM,KAAM,IAAI;gBACpE,gBAAgB,IAAI,8BAAC,uBAAe,OAAG;gBACvC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAC5B,8BAAC,eAAI,IAAC,IAAI,QAAC,GAAG,EAAE,QAAQ,CAAC,aAAa,EAAE,EAAE,EAAE,EAAE;oBAC5C,8BAAC,8BAAY,IAAC,KAAK,EAAE,QAAQ,CAAC,aAAa,GAAI,CAC1C,CACR,CAAC;gBACF,8BAAC,eAAI,IAAC,IAAI,QAAC,EAAE,EAAE,EAAE;oBACf,8BAAC,mBAAa,IAAC,OAAO,EAAE,SAAS,EAAE,IAAI,EAAC,QAAQ,IAC5C,KAAK,CAAC,WAAmB,IAAI,QAAQ,CACzB,CACX,CACF,CACM,CACkB,CACpC,CAAC;AACJ,CAAC,CAAC;AAzDW,QAAA,WAAW,eAyDtB","sourcesContent":["import type { ActionFunction } from \"@gadgetinc/api-client-core\";\nimport { LoadingButton } from \"@mui/lab\";\nimport type { GridProps } from \"@mui/material\";\nimport { Alert, Grid, Skeleton } from \"@mui/material\";\nimport React from \"react\";\nimport { FormProvider } from \"react-hook-form\";\nimport { useActionMetadata } from \"../../metadata.js\";\nimport { useActionForm } from \"../../useActionForm.js\";\nimport type { ErrorWrapper, OptionsType } from \"../../utils.js\";\nimport type { AutoFormProps } from \"../AutoForm.js\";\nimport { useFormFields, useValidationResolver } from \"../AutoForm.js\";\nimport { AutoFormMetadataContext } from \"../AutoFormContext.js\";\nimport { MUIErrorDisplay } from \"./MUIErrorDisplay.js\";\nimport { MUIAutoInput } from \"./inputs/MUIAutoInput.js\";\n\nexport const MUIFormSkeleton = () => (\n  <>\n    <Skeleton animation=\"wave\" />\n    <Skeleton animation=\"wave\" />\n  </>\n);\n\nexport type MUIAutoFormProps<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"]\n> = AutoFormProps<GivenOptions, SchemaT, ActionFunc, Options> & GridProps;\n\n/**\n * Renders a form for an action on a model automatically using MUI\n */\nexport const MUIAutoForm = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"]\n>(\n  props: MUIAutoFormProps<GivenOptions, SchemaT, ActionFunc, Options>\n) => {\n  const { action, record, findBy, ...rest } = props;\n\n  // fetch metadata describing this actions inputs and outputs from the backend\n  const { metadata, fetching: fetchingMetadata, error: metadataError } = useActionMetadata(action);\n\n  // filter down the fields to render only what we want to render for this form\n  const fields = useFormFields(metadata, props);\n\n  // setup the form state for the action\n  const {\n    submit,\n    error: formError,\n    formState: { isLoading, isSubmitSuccessful },\n    originalFormMethods,\n  } = useActionForm(action, {\n    defaultValues: { [action.modelApiIdentifier]: props.record },\n    findBy,\n    resolver: useValidationResolver(metadata),\n    send: fields.map(({ path }) => path),\n  });\n\n  const error = formError ?? metadataError;\n  if (error && !(error as ErrorWrapper).validationErrors) {\n    return <MUIErrorDisplay error={error} />;\n  }\n\n  if (isSubmitSuccessful) {\n    return props.successContent ?? <Alert severity=\"success\">Saved {metadata?.name} successfully</Alert>;\n  }\n\n  return (\n    <AutoFormMetadataContext.Provider value={{ submit, metadata }}>\n      <FormProvider {...originalFormMethods}>\n        <Grid container component=\"form\" spacing={2} onSubmit={submit} {...rest}>\n          {fetchingMetadata && <MUIFormSkeleton />}\n          {fields.map(({ metadata }) => (\n            <Grid item key={metadata.apiIdentifier} xs={12}>\n              <MUIAutoInput field={metadata.apiIdentifier} />\n            </Grid>\n          ))}\n          <Grid item xs={12}>\n            <LoadingButton loading={isLoading} type=\"submit\">\n              {(props.submitLabel as any) ?? \"Submit\"}\n            </LoadingButton>\n          </Grid>\n        </Grid>\n      </FormProvider>\n    </AutoFormMetadataContext.Provider>\n  );\n};\n"]}
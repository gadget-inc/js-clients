{"version":3,"file":"MUIJSONInput.js","sourceRoot":"","sources":["../../../../src/auto/mui/MUIJSONInput.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,4CAA0C;AAE1C,+CAAqD;AACrD,mDAA6C;AAEtC,MAAM,YAAY,GAAG,CAAC,KAAkG,EAAE,EAAE;IACjI,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IAC3C,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,IAAA,gBAAQ,EAAM,KAAK,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAAgB,KAAK,CAAC,CAAC;IACzD,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,IAAA,gBAAQ,EAAS,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5E,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,IAAA,sBAAQ,GAAE,CAAC;IAE3C,MAAM,cAAc,GAAG,IAAA,mBAAW,EAChC,CAAC,KAA0D,EAAE,EAAE;QAC7D,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QACrC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrB,IAAI;YACF,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACtC,OAAO,CAAC,OAAO,CAAC,CAAC;YACjB,QAAQ,CAAC,KAAK,CAAC,CAAC;YAChB,QAAQ,CAAC,OAAO,CAAC,CAAC;SACnB;QAAC,OAAO,KAAU,EAAE;YACnB,QAAQ,CAAC,KAAK,CAAC,CAAC;SACjB;IACH,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,MAAM,YAAY,GAAG,CAAC,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC;IAE3C,OAAO,CACL,8BAAC,oBAAS,IACR,SAAS,QACT,OAAO,EAAE,CAAC,EACV,UAAU,EAAE,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,EAClD,KAAK,EAAE,MAAM,EACb,QAAQ,EAAE,cAAc,EACxB,KAAK,EAAE,YAAY,EACnB,UAAU,EAAE,YAAY,IAAI,iBAAiB,KAAK,CAAC,OAAO,EAAE,KACxD,UAAU,KACV,IAAI,GACR,CACH,CAAC;AACJ,CAAC,CAAC;AAtCW,QAAA,YAAY,gBAsCvB","sourcesContent":["import type { TextFieldProps } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport type { ChangeEvent } from \"react\";\nimport React, { useCallback, useState } from \"react\";\nimport { useFocus } from \"../../useFocus.js\";\n\nexport const MUIJSONInput = (props: Omit<TextFieldProps, \"value\" | \"onChange\"> & { value: any; onChange: (value: any) => void }) => {\n  const { value, onChange, ...rest } = props;\n  const [json, setJSON] = useState<any>(value);\n  const [error, setError] = useState<Error | false>(false);\n  const [string, setString] = useState<string>(JSON.stringify(json, null, 2));\n  const [isFocused, focusProps] = useFocus();\n\n  const onStringChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const newString = event.target.value;\n      setString(newString);\n      try {\n        const newJSON = JSON.parse(newString);\n        setJSON(newJSON);\n        setError(false);\n        onChange(newJSON);\n      } catch (error: any) {\n        setError(error);\n      }\n    },\n    [onChange]\n  );\n\n  const inErrorState = !isFocused && !!error;\n\n  return (\n    <TextField\n      multiline\n      maxRows={4}\n      inputProps={{ style: { fontFamily: \"monospace\" } }}\n      value={string}\n      onChange={onStringChange}\n      error={inErrorState}\n      helperText={inErrorState && `Invalid JSON: ${error.message}`}\n      {...focusProps}\n      {...rest}\n    />\n  );\n};\n"]}
{"version":3,"file":"useFieldMetadata.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useFieldMetadata.tsx"],"names":[],"mappings":";;;AACA,8DAA4D;AAC5D,4EAAyE;AAElE,MAAM,qBAAqB,GAAG,CAAC,kBAA0B,EAAE,EAAE;IAClE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,wCAAmB,GAAE,CAAC;IACzC,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,WAAW,CAAC,kBAAkB,CAAC,CAAC;IAE/D,MAAM,mBAAmB,GAAG,MAAM,CAAC,IAAI,CACrC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,IAAI,+BAA+B,CAAC,kBAAkB,EAAE,KAAK,CAAC,CACrG,CAAC;IAEF,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,mBAAmB,EAAE,QAAQ,EAAE,CAAC;AAC3D,CAAC,CAAC;AATW,QAAA,qBAAqB,yBAShC;AAEK,MAAM,gBAAgB,GAAG,CAAC,kBAA0B,EAAE,EAAE;IAC7D,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAA,6BAAqB,EAAC,kBAAkB,CAAC,CAAC;IAErE,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,UAAU,kBAAkB,yBAAyB,CAAC,CAAC;IACzE,CAAC;IAED,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;AAC5B,CAAC,CAAC;AARW,QAAA,gBAAgB,oBAQ3B;AAEF,MAAM,WAAW,GAAG,CAAC,kBAA0B,EAAE,EAAE;IACjD,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,wCAAmB,GAAE,CAAC;IAExC,MAAM,mBAAmB,GAAG,IAAA,+CAAsB,GAAE,CAAC;IAErD,IAAI,mBAAmB,IAAI,KAAK,EAAE,CAAC;QACjC,MAAM,IAAI,GAAG,KAAK,CAAC,aAAa,GAAG,GAAG,GAAG,mBAAmB,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QAC/F,MAAM,YAAY,GAAG,mBAAmB,EAAE,qBAAqB;YAC7D,CAAC,CAAC,KAAK,CAAC,aAAa,GAAG,GAAG,GAAG,mBAAmB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC;YAC3F,CAAC,CAAC,IAAI,CAAC;QAET,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;IAChC,CAAC;IAED,mBAAmB;IACnB,MAAM,aAAa,GAAG,KAAK,IAAI,KAAK,CAAC,aAAa,CAAC;IACnD,MAAM,IAAI,GAAG,aAAa;QACxB,CAAC,CAAC,KAAK,CAAC,aAAa,GAAG,GAAG,GAAG,kBAAkB,CAAC,eAAe;QAChE,CAAC,CAAC,kBAAkB,CAAC,CAAC,gBAAgB;IAExC,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;AACtC,CAAC,CAAC;AAEF,MAAM,+BAA+B,GAAG,CACtC,kBAA0B,EAC1B,cAGC,EACD,EAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,KAAK,kBAAkB,IAAI,cAAc,CAAC,IAAI,KAAK,kBAAkB,CAAC","sourcesContent":["import { type FieldMetadata } from \"../../metadata.js\";\nimport { useAutoFormMetadata } from \"../AutoFormContext.js\";\nimport { useRelationshipContext } from \"../hooks/useAutoRelationship.js\";\n\nexport const useMaybeFieldMetadata = (fieldApiIdentifier: string) => {\n  const { fields } = useAutoFormMetadata();\n  const { path, metaDataPath } = useGetPaths(fieldApiIdentifier);\n\n  const targetFieldMetadata = fields.find(\n    (field) => field.path === metaDataPath || isFieldCustomParamOnModelAction(fieldApiIdentifier, field)\n  );\n\n  return { path, metadata: targetFieldMetadata?.metadata };\n};\n\nexport const useFieldMetadata = (fieldApiIdentifier: string) => {\n  const { path, metadata } = useMaybeFieldMetadata(fieldApiIdentifier);\n\n  if (!metadata) {\n    throw new Error(`Field \"${fieldApiIdentifier}\" not found in metadata`);\n  }\n\n  return { path, metadata };\n};\n\nconst useGetPaths = (fieldApiIdentifier: string) => {\n  const { model } = useAutoFormMetadata();\n\n  const relationshipContext = useRelationshipContext();\n\n  if (relationshipContext && model) {\n    const path = model.apiIdentifier + \".\" + relationshipContext.transformPath(fieldApiIdentifier);\n    const metaDataPath = relationshipContext?.transformMetadataPath\n      ? model.apiIdentifier + \".\" + relationshipContext.transformMetadataPath(fieldApiIdentifier)\n      : path;\n\n    return { path, metaDataPath };\n  }\n\n  // Non-relationship\n  const isModelAction = model && model.apiIdentifier;\n  const path = isModelAction\n    ? model.apiIdentifier + \".\" + fieldApiIdentifier // Model action\n    : fieldApiIdentifier; // Global action\n\n  return { path, metaDataPath: path };\n};\n\nconst isFieldCustomParamOnModelAction = (\n  fieldApiIdentifier: string,\n  fieldCandidate: {\n    path: string;\n    metadata: FieldMetadata;\n  }\n) => fieldCandidate.metadata.__typename !== \"GadgetModelField\" && fieldCandidate.path === fieldApiIdentifier;\n"]}
{"version":3,"file":"usePasswordController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/usePasswordController.tsx"],"names":[],"mappings":";;;AAAA,iCAA8C;AAC9C,8DAAgE;AAChE,6DAAuD;AACvD,8DAA4D;AAE5D,+DAAyD;AACzD,yCAA6C;AAEtC,MAAM,qBAAqB,GAAG,CAAC,KAA6B,EAAE,EAAE;IACrE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,wCAAmB,GAAE,CAAC;IACzC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAA,sCAAgB,EAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAEzD,IAAA,0BAAe,EAAC;QACd,kBAAkB,EAAE,KAAK,CAAC,KAAK;QAC/B,eAAe,EAAE,QAAQ,CAAC,SAAS;QACnC,iBAAiB,EAAE,4BAAe,CAAC,QAAQ;KAC5C,CAAC,CAAC;IAEH,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAA,gCAAa,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAE5D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAC,CAAC,MAAM,CAAC,CAAC;IAEpD,MAAM,QAAQ,GAAG,IAAA,mBAAW,EAC1B,CAAC,GAAG,IAAW,EAAE,EAAE;QACjB,UAAU,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;QAC7B,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;IAC/B,CAAC,EACD,CAAC,UAAU,EAAE,KAAK,CAAC,WAAW,CAAC,CAChC,CAAC;IAEF,MAAM,YAAY,GAAG,IAAA,mBAAW,EAAC,GAAG,EAAE;QACpC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,sCAAsC;QACpD,YAAY,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,OAAO;QACL,SAAS;QACT,YAAY;QACZ,UAAU,EAAE,EAAE,GAAG,UAAU,EAAE,QAAQ,EAAE;KACxC,CAAC;AACJ,CAAC,CAAC;AAhCW,QAAA,qBAAqB,yBAgChC;AAEF;;;GAGG;AACU,QAAA,2BAA2B,GAAG,UAAU,CAAC","sourcesContent":["import { useCallback, useState } from \"react\";\nimport { GadgetFieldType } from \"../../internal/gql/graphql.js\";\nimport { useController } from \"../../useActionForm.js\";\nimport { useAutoFormMetadata } from \"../AutoFormContext.js\";\nimport { type AutoPasswordInputProps } from \"../shared/AutoInputTypes.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\nimport { assertFieldType } from \"./utils.js\";\n\nexport const usePasswordController = (props: AutoPasswordInputProps) => {\n  const { findBy } = useAutoFormMetadata();\n  const { path, metadata } = useFieldMetadata(props.field);\n\n  assertFieldType({\n    fieldApiIdentifier: props.field,\n    actualFieldType: metadata.fieldType,\n    expectedFieldType: GadgetFieldType.Password,\n  });\n\n  const { field: fieldProps } = useController({ name: path });\n\n  const [isEditing, setIsEditing] = useState(!findBy);\n\n  const onChange = useCallback(\n    (...args: any[]) => {\n      fieldProps.onChange(...args);\n      props.afterChange?.(...args);\n    },\n    [fieldProps, props.afterChange]\n  );\n\n  const startEditing = useCallback(() => {\n    onChange(\"\"); // Touch the field to mark it as dirty\n    setIsEditing(true);\n  }, [onChange]);\n\n  return {\n    isEditing,\n    startEditing,\n    fieldProps: { ...fieldProps, onChange },\n  };\n};\n\n/**\n * The salted password hash is not retrieved from the DB\n * Regardless of the password is defined or not, this placeholder is shown as exposing an unset password is a security risk\n */\nexport const existingPasswordPlaceholder = \"********\";\n"]}
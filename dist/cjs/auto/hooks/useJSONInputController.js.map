{"version":3,"file":"useJSONInputController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useJSONInputController.tsx"],"names":[],"mappings":";;;AAAA,iCAAyD;AAEzD,+EAAyE;AAElE,MAAM,sBAAsB,GAAG,CAAC,KAGtC,EAAE,EAAE;IACH,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IACjC,MAAM,qBAAqB,GAAG,IAAA,sDAAwB,EAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;IAE3E,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,GAAqB,CAAC;IACxD,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAM,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAC7E,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,IAAA,gBAAQ,EAAS,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAE3F,MAAM,mBAAmB,GAAG,IAAA,mBAAW,EACrC,CAAC,SAAiB,EAAE,EAAE;QACpB,cAAc,CAAC,SAAS,CAAC,CAAC;QAC1B,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACtC,YAAY,CAAC,OAAO,CAAC,CAAC;YACtB,QAAQ,CAAC,SAAS,CAAC,CAAC;YACpB,qBAAqB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,SAAS,KAAK,EAAE,EAAE,CAAC;gBACrB,QAAQ,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC;iBAAM,CAAC;gBACN,QAAQ,CAAC,SAAS,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;IACH,CAAC,EACD,CAAC,qBAAqB,CAAC,CACxB,CAAC;IAEF,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,OAAO,WAAW,KAAK,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC;YAC7F,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QACvE,CAAC;IACH,CAAC,EAAE,CAAC,WAAW,EAAE,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC;IAE/C,OAAO;QACL,mBAAmB;QACnB,KAAK;QACL,WAAW;QACX,SAAS;QACT,kBAAkB,EAAE,qBAAqB;KAC1C,CAAC;AACJ,CAAC,CAAC;AA3CW,QAAA,sBAAsB,0BA2CjC","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { type Control } from \"react-hook-form\";\nimport { useStringInputController } from \"./useStringInputController.js\";\n\nexport const useJSONInputController = (props: {\n  field: string; // The field API identifier\n  control?: Control<any>;\n}) => {\n  const { field, control } = props;\n  const stringInputController = useStringInputController({ field, control });\n\n  const [error, setError] = useState<Error | undefined>();\n  const [jsonValue, setJSONValue] = useState<any>(stringInputController.value);\n  const [stringValue, setStringValue] = useState<string>(JSON.stringify(jsonValue, null, 2));\n\n  const onStringValueChange = useCallback(\n    (newString: string) => {\n      setStringValue(newString);\n      try {\n        const newJSON = JSON.parse(newString);\n        setJSONValue(newJSON);\n        setError(undefined);\n        stringInputController.onChange(newJSON);\n      } catch (error: any) {\n        if (newString !== \"\") {\n          setError(error);\n        } else {\n          setError(undefined);\n        }\n      }\n    },\n    [stringInputController]\n  );\n\n  useEffect(() => {\n    if (typeof stringValue === \"undefined\" && JSON.stringify(stringInputController.value) !== \"\") {\n      setStringValue(JSON.stringify(stringInputController.value, null, 2));\n    }\n  }, [stringValue, stringInputController.value]);\n\n  return {\n    onStringValueChange,\n    error,\n    stringValue,\n    jsonValue,\n    originalController: stringInputController,\n  };\n};\n"]}
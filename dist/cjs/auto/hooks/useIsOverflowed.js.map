{"version":3,"file":"useIsOverflowed.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useIsOverflowed.tsx"],"names":[],"mappings":";;;AAAA,iCAAiE;AAE1D,MAAM,eAAe,GAAG,GAAG,EAAE;IAClC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IACtD,MAAM,eAAe,GAAG,IAAA,cAAM,EAAiB,IAAI,CAAC,CAAC;IACrD,MAAM,YAAY,GAAG,IAAA,cAAM,EAAiB,IAAI,CAAC,CAAC;IAElD,MAAM,aAAa,GAAG,IAAA,mBAAW,EAAC,GAAG,EAAE;QACrC,MAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC;QACvC,MAAM,YAAY,GAAG,eAAe,CAAC,OAAO,CAAC;QAC7C,IAAI,CAAC,SAAS,IAAI,CAAC,YAAY,EAAE,CAAC;YAChC,OAAO;QACT,CAAC;QACD,MAAM,WAAW,GAAG,SAAS,CAAC,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC;QAErE,aAAa,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC,EAAE,CAAC,YAAY,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC,CAAC;IAEnD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,aAAa,EAAE,CAAC,CAAC,gBAAgB;IACnC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IAEpB,OAAO;QACL,YAAY;QACZ,eAAe;QACf,YAAY;QACZ,aAAa;KACd,CAAC;AACJ,CAAC,CAAC;AA1BW,QAAA,eAAe,mBA0B1B","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport const useIsOverflowed = () => {\n  const [isOverflowed, setIsOverflow] = useState(false);\n  const childElementRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const checkOverflow = useCallback(() => {\n    const container = containerRef.current;\n    const childElement = childElementRef.current;\n    if (!container || !childElement) {\n      return;\n    }\n    const hasOverflow = container.offsetWidth < childElement.offsetWidth;\n\n    setIsOverflow(hasOverflow);\n  }, [containerRef, childElementRef, setIsOverflow]);\n\n  useEffect(() => {\n    checkOverflow(); // Initial check\n  }, [checkOverflow]);\n\n  return {\n    isOverflowed,\n    childElementRef,\n    containerRef,\n    checkOverflow,\n  };\n};\n"]}
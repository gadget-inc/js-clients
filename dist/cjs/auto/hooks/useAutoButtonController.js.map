{"version":3,"file":"useAutoButtonController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useAutoButtonController.tsx"],"names":[],"mappings":";;;AACA,iCAAoC;AACpC,mDAA6E;AAC7E,qDAA+C;AAC/C,iEAA2D;AAyBpD,MAAM,uBAAuB,GAAG,CAKrC,KAAyD,EACzD,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,WAAW,EAAE,GAAG,KAAK,CAAC;IACxE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,IAAA,+BAAiB,EAAC,MAAM,CAAC,CAAC;IAEjG,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,oBAAoB,EAAE,KAAK,EAAE,EAAE,SAAS,CAAC;IACxE,sDAAsD;IACtD,MAAM,CAAC,IAAI,IAAI,cAAc,CAAC,CAAC,CAAC,IAAA,oCAAe,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAA,wBAAS,EAAC,MAAM,CAAC,CAAC;IAE9E,IAAI,KAAK,CAAC;IACV,IAAI,aAAa,GAAG,KAAK,CAAC;IAC1B,IAAI,QAAQ,EAAE,CAAC;QACb,IAAI,IAAA,mCAAqB,EAAC,QAAQ,CAAC,EAAE,CAAC;YACpC,KAAK,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;YACnD,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC;QACjD,CAAC;aAAM,CAAC;YACN,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC;QACxB,CAAC;IACH,CAAC;SAAM,CAAC;QACN,KAAK,GAAG,YAAY,CAAC;IACvB,CAAC;IAED,MAAM,GAAG,GAAG,IAAA,mBAAW,EAAC,KAAK,IAAI,EAAE;QACjC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,SAAS,CAAC,CAAC;QAC1C,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;YACjB,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAClC,CAAC;aAAM,CAAC;YACN,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC;IACH,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,CAAe,CAAC;IAE7D,OAAO;QACL,MAAM;QACN,QAAQ,EAAE,gBAAgB,IAAI,oBAAoB;QAClD,OAAO,EAAE,oBAAoB;QAC7B,KAAK,EAAE,aAAa,IAAI,KAAK;QAC7B,KAAK;QACL,aAAa;QACb,GAAG;QACH,WAAW;KACZ,CAAC;AACJ,CAAC,CAAC;AA9CW,QAAA,uBAAuB,2BA8ClC","sourcesContent":["import type { ActionFunction, GlobalActionFunction } from \"@gadgetinc/api-client-core\";\nimport { useCallback } from \"react\";\nimport { isModelActionMetadata, useActionMetadata } from \"../../metadata.js\";\nimport { useAction } from \"../../useAction.js\";\nimport { useGlobalAction } from \"../../useGlobalAction.js\";\nimport type { ActionHookState } from \"../../utils.js\";\nimport { type OptionsType } from \"../../utils.js\";\n\nexport type AutoButtonProps<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>\n> = {\n  /** Which action this button will run */\n  action: ActionFunc;\n  /** The variables to pass to the action when run */\n  variables?: ActionFunc[\"variablesType\"];\n  /**\n   * Callback function to run when the button succeeded at running the action\n   * Overrides the default behavior of rendering a message to the user to display success\n   **/\n  onSuccess?: (result: ActionHookState<any, ActionFunc[\"variablesType\"]>) => void;\n  /**\n   * Callback function to run when the button failed at running the action with an error\n   * Overrides the default behavior of rendering a message to the user to display the error\n   **/\n  onError?: (error: Error, result: ActionHookState<any, ActionFunc[\"variablesType\"]>) => void;\n};\n\nexport const useAutoButtonController = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any> | GlobalActionFunction<any>\n>(\n  props: AutoButtonProps<GivenOptions, SchemaT, ActionFunc>\n) => {\n  const { action, variables, onSuccess, onError, ...buttonProps } = props;\n  const { metadata, fetching: fetchingMetadata, error: metadataError } = useActionMetadata(action);\n\n  const [{ data: result, fetching: fetchingActionResult, error }, runAction] =\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    action.type == \"globalAction\" ? useGlobalAction(action) : useAction(action);\n\n  let label;\n  let isDestructive = false;\n  if (metadata) {\n    if (isModelActionMetadata(metadata)) {\n      label = `${metadata.action.name} ${metadata.name}`;\n      isDestructive = metadata.action.isDeleteAction;\n    } else {\n      label = metadata.name;\n    }\n  } else {\n    label = \"loading...\";\n  }\n\n  const run = useCallback(async () => {\n    const result = await runAction(variables);\n    if (result.error) {\n      onError?.(result.error, result);\n    } else {\n      onSuccess?.(result);\n    }\n  }, [runAction, variables, onSuccess, onError]) as () => void;\n\n  return {\n    result,\n    fetching: fetchingMetadata || fetchingActionResult,\n    running: fetchingActionResult,\n    error: metadataError || error,\n    label,\n    isDestructive,\n    run,\n    buttonProps,\n  };\n};\n"]}
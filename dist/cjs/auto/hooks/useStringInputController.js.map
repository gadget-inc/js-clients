{"version":3,"file":"useStringInputController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useStringInputController.tsx"],"names":[],"mappings":";;;AACA,qDAAgD;AAEhD,mDAA8C;AAC9C,+DAAyD;AAE5C,QAAA,oBAAoB,GAA6C;IAC5E,CAAC,uBAAS,CAAC,MAAM,CAAC,EAAE,QAAQ;IAC5B,CAAC,uBAAS,CAAC,KAAK,CAAC,EAAE,OAAO;IAC1B,CAAC,uBAAS,CAAC,QAAQ,CAAC,EAAE,UAAU;IAChC,CAAC,uBAAS,CAAC,eAAe,CAAC,EAAE,UAAU;CAC/B,CAAC;AAEX,MAAM,iBAAiB,GAA6C;IAClE,CAAC,uBAAS,CAAC,MAAM,CAAC,EAAE,YAAY;IAChC,CAAC,uBAAS,CAAC,MAAM,CAAC,EAAE,cAAc;IAClC,CAAC,uBAAS,CAAC,KAAK,CAAC,EAAE,mBAAmB;IACtC,CAAC,uBAAS,CAAC,QAAQ,CAAC,EAAE,OAAO;IAC7B,CAAC,uBAAS,CAAC,eAAe,CAAC,EAAE,YAAY;IACzC,CAAC,uBAAS,CAAC,KAAK,CAAC,EAAE,aAAa;IAChC,CAAC,uBAAS,CAAC,GAAG,CAAC,EAAE,aAAa;CACtB,CAAC;AAEJ,MAAM,wBAAwB,GAAG,CACtC,KAEoC,EACpC,EAAE;IACF,MAAM,EAAE,KAAK,EAAE,kBAAkB,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IACrD,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAA,sCAAgB,EAAC,kBAAkB,CAAC,CAAC;IAEhE,MAAM,EACJ,KAAK,EAAE,eAAe,EACtB,UAAU,EAAE,EAAE,KAAK,EAAE,GACtB,GAAG,IAAA,+BAAa,EAAC;QAChB,IAAI,EAAE,IAAI;QACV,GAAG,IAAI;KACR,CAAC,CAAC;IAEH,MAAM,WAAW,GAAG,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAE1D,OAAO;QACL,KAAK,EAAE,QAAQ,CAAC,IAAI;QACpB,IAAI,EAAE,4BAAoB,CAAC,QAAQ,CAAC,SAAS,CAAC;QAC9C,OAAO,EAAE,CAAC,CAAC,KAAK;QAChB,YAAY,EAAE,KAAK,EAAE,OAAO;QAC5B,YAAY,EAAE,KAAK;QACnB,WAAW;QACX,QAAQ;QACR,GAAG,eAAe;KACnB,CAAC;AACJ,CAAC,CAAC;AA5BW,QAAA,wBAAwB,4BA4BnC","sourcesContent":["import type { UseControllerProps } from \"react-hook-form\";\nimport { useController } from \"react-hook-form\";\nimport type { GadgetFieldType } from \"../../internal/gql/graphql.js\";\nimport { FieldType } from \"../../metadata.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\n\nexport const FieldTypeToInputType: Partial<Record<GadgetFieldType, string>> = {\n  [FieldType.Number]: \"number\",\n  [FieldType.Email]: \"email\",\n  [FieldType.Password]: \"password\",\n  [FieldType.EncryptedString]: \"password\",\n} as const;\n\nconst PlaceholderValues: Partial<Record<GadgetFieldType, string>> = {\n  [FieldType.String]: \"Enter text\",\n  [FieldType.Number]: \"Enter number\",\n  [FieldType.Email]: \"example@email.com\",\n  [FieldType.Password]: \"Value\",\n  [FieldType.EncryptedString]: \"Enter text\",\n  [FieldType.Color]: \"Enter color\",\n  [FieldType.Url]: \"example.com\",\n} as const;\n\nexport const useStringInputController = (\n  props: {\n    field: string; // The field API identifier\n  } & Omit<UseControllerProps, \"name\">\n) => {\n  const { field: fieldApiIdentifier, ...rest } = props;\n  const { path, metadata } = useFieldMetadata(fieldApiIdentifier);\n\n  const {\n    field: fieldProperties,\n    fieldState: { error },\n  } = useController({\n    name: path,\n    ...rest,\n  });\n\n  const placeholder = PlaceholderValues[metadata.fieldType];\n\n  return {\n    label: metadata.name,\n    type: FieldTypeToInputType[metadata.fieldType],\n    isError: !!error,\n    errorMessage: error?.message,\n    autoComplete: \"off\",\n    placeholder,\n    metadata,\n    ...fieldProperties,\n  };\n};\n"]}
{"version":3,"file":"useEnumInputController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useEnumInputController.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useState } from \"react\";\nimport { useController, type Control } from \"../../useActionForm.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\n\nexport const useEnumInputController = (props: {\n  field: string; // The field API identifier\n  control?: Control<any>;\n}) => {\n  const { field: fieldApiIdentifier, control } = props;\n  const { path, metadata } = useFieldMetadata(fieldApiIdentifier);\n\n  const config = metadata.configuration;\n  if (config.__typename !== \"GadgetEnumConfig\") {\n    throw new Error(\"Field is not an enum type\");\n  }\n\n  const {\n    field: fieldProps,\n    fieldState: { error },\n  } = useController({\n    control,\n    name: path,\n  });\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const selectedOptions = useMemo(\n    () => (typeof fieldProps.value === \"string\" ? [fieldProps.value] : fieldProps.value ?? []) as string[],\n    [fieldProps.value]\n  );\n  const providedOptions = useMemo(() => config.options.map((option) => option.name), [config.options]);\n  const allOptions = useMemo(() => [...new Set([...selectedOptions, ...providedOptions])], [providedOptions, selectedOptions]);\n  const filteredOptions = useMemo(\n    () =>\n      allOptions.filter((option) => {\n        return !searchValue || option.toLocaleLowerCase().includes(searchValue.trim().toLocaleLowerCase());\n      }),\n    [allOptions, searchValue]\n  );\n\n  const onSelectionChange = useCallback(\n    (selected: string | null) => {\n      setSearchValue(\"\");\n      if (config.allowMultiple) {\n        if (selected === null) {\n          fieldProps.onChange([]);\n          return;\n        }\n\n        const nextSelectedTags = new Set([...selectedOptions]);\n        if (nextSelectedTags.has(selected)) {\n          nextSelectedTags.delete(selected);\n        } else {\n          nextSelectedTags.add(selected);\n        }\n\n        fieldProps.onChange([...nextSelectedTags]);\n      } else {\n        if (selected === null || selectedOptions.includes(selected)) {\n          fieldProps.onChange(null);\n        } else {\n          fieldProps.onChange(selected);\n        }\n      }\n    },\n    [config.allowMultiple, fieldProps, selectedOptions]\n  );\n\n  return {\n    allowMultiple: config.allowMultiple,\n    allowOther: config.allowOther,\n    /** The list of selected options. */\n    selectedOptions,\n    /** The list of options that are provided by the configuration. */\n    providedOptions,\n    /** The list of options that are currently visible based on the search query. */\n    filteredOptions,\n    /** The list of all options that are available to select by combining the selected and provided options. */\n    allOptions,\n    searchQuery: {\n      value: searchValue,\n      setValue: setSearchValue,\n    },\n    /** The callback to handle the selection change */\n    onSelectionChange,\n    label: metadata.name,\n    metadata,\n    fieldProps,\n    isError: !!error,\n    errorMessage: error?.message,\n  };\n};\n"]}
{"version":3,"file":"useModelManager.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useModelManager.tsx"],"names":[],"mappings":";;;AAAA,+DAAiD;AACjD,6CAAiD;AAE1C,MAAM,eAAe,GAAG,CAAC,KAAsE,EAAE,EAAE;IACxG,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;IAE3C,MAAM,GAAG,GAAG,IAAA,0BAAM,GAAE,CAAC;IACrB,MAAM,YAAY,GAAG,IAAA,0BAAe,EAAC,GAAG,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;IAEpE,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,2BAA2B,GAAG,CAAC,GAAG,CAAC,SAAS,IAAI,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpF,MAAM,IAAI,KAAK,CAAC,yBAAyB,2BAA2B,6BAA6B,CAAC,CAAC;IACrG,CAAC;IAED,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AAZW,QAAA,eAAe,mBAY1B","sourcesContent":["import { useApi } from \"../../GadgetProvider.js\";\nimport { getModelManager } from \"../../utils.js\";\n\nexport const useModelManager = (props: { apiIdentifier: string; namespace?: string[] | string | null }) => {\n  const { apiIdentifier, namespace } = props;\n\n  const api = useApi();\n  const modelManager = getModelManager(api, apiIdentifier, namespace);\n\n  if (!modelManager) {\n    const relatedModelNamespacedApiId = [...(namespace ?? []), apiIdentifier].join(\".\");\n    throw new Error(`no model manager for \"${relatedModelNamespacedApiId}\" found for action function`);\n  }\n\n  return modelManager;\n};\n"]}
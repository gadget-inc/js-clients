{"version":3,"file":"useRoleInputController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useRoleInputController.tsx"],"names":[],"mappings":";;;AAAA,iCAAqD;AACrD,qDAAyD;AACzD,mDAAqD;AACrD,+DAAyD;AAElD,MAAM,sBAAsB,GAAG,CAAC,KAGtC,EAAE,EAAE;IACH,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IACjC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAA,sCAAgB,EAAC,KAAK,CAAC,CAAC;IAEnD,MAAM,EACJ,KAAK,EAAE,UAAU,EACjB,UAAU,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,GAClC,GAAG,IAAA,+BAAa,EAAC;QAChB,OAAO;QACP,IAAI,EAAE,IAAI;KACX,CAAC,CAAC;IAEH,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAAG,IAAA,gBAAQ,EAAW,EAAE,CAAC,CAAC;IAEvE,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;gBACtB,OAAO;YACT,CAAC;YAED,MAAM,eAAe,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAA8B,EAAE,EAAE;gBAC9E,2GAA2G;gBAC3G,wGAAwG;gBACxG,OAAO,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;YACpD,CAAC,CAAC,CAAC;YACH,mBAAmB,CAAC,eAAe,CAAC,CAAC;YACrC,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QACvC,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEvC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAA,8BAAgB,GAAE,CAAC;IAElE,MAAM,OAAO,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QAC3B,IAAI,CAAC,KAAK;YAAE,OAAO,EAAE,CAAC;QACtB,OAAO,KAAK;aACT,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC1D,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACd,KAAK,EAAE,IAAI,CAAC,GAAG;YACf,KAAK,EAAE,IAAI,CAAC,IAAI;YAChB,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;SAC9C,CAAC,CAAC,CAAC;IACR,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,MAAM,OAAO,GAAG,QAAQ,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,kEAAkE;IAEpH,OAAO;QACL,gBAAgB;QAChB,QAAQ;QACR,OAAO;QACP,UAAU;QACV,OAAO;QACP,UAAU;QACV,UAAU;KACX,CAAC;AACJ,CAAC,CAAC;AAzDW,QAAA,sBAAsB,0BAyDjC;AAEF,MAAM,oBAAoB,GAAG,CAAC,UAAU,CAAC,CAAC","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { Control, useController } from \"react-hook-form\";\nimport { useRolesMetadata } from \"../../metadata.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\n\nexport const useRoleInputController = (props: {\n  field: string; // Field API identifier\n  control?: Control<any>;\n}) => {\n  const { field, control } = props;\n  const { path, metadata } = useFieldMetadata(field);\n\n  const {\n    field: fieldProps,\n    fieldState: { error: fieldError },\n  } = useController({\n    control,\n    name: path,\n  });\n\n  const [selectedRoleKeys, setSelectedRoleKeys] = useState<string[]>([]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (!fieldProps.value) {\n        return;\n      }\n\n      const updatedRoleKeys = fieldProps.value.map((role: string | { key: string }) => {\n        // When retrieved from an existing value, fieldProps.value is an array of {key:string, name:string} objects\n        // In order to send the roles to the Gadget app, useController must have them as an array of string keys\n        return typeof role === \"string\" ? role : role.key;\n      });\n      setSelectedRoleKeys(updatedRoleKeys);\n      fieldProps.onChange(updatedRoleKeys);\n    }, 5000);\n  }, [JSON.stringify(fieldProps.value)]);\n\n  const { roles, fetching, error: rolesError } = useRolesMetadata();\n\n  const options = useMemo(() => {\n    if (!roles) return [];\n    return roles\n      .filter((role) => !unselectableRoleKeys.includes(role.key))\n      .map((role) => ({\n        value: role.key,\n        label: role.name,\n        selected: selectedRoleKeys.includes(role.key),\n      }));\n  }, [roles]);\n\n  const loading = fetching || options.length === 0; // There must always be at least one role option `unauthenticated`\n\n  return {\n    selectedRoleKeys,\n    metadata,\n    options,\n    fieldProps,\n    loading,\n    rolesError,\n    fieldError,\n  };\n};\n\nconst unselectableRoleKeys = [\"sysadmin\"];\n"]}
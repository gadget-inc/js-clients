{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/auto/hooks/utils.ts"],"names":[],"mappings":";;;AAEA,yDAAyD;AAClD,MAAM,QAAQ,GAAG,CAAI,GAAG,IAAyC,EAAE,EAAE;IAC1E,OAAO,CAAC,KAAQ,EAAE,EAAE;QAClB,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,IAAI,GAAG,EAAE,CAAC;gBACR,IAAI,OAAO,GAAG,IAAI,UAAU,EAAE,CAAC;oBAC7B,GAAG,CAAC,KAAK,CAAC,CAAC;gBACb,CAAC;qBAAM,CAAC;oBACL,GAAW,CAAC,OAAO,GAAG,KAAK,CAAC;gBAC/B,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAZW,QAAA,QAAQ,YAYnB;AAEK,MAAM,eAAe,GAAG,CAAC,KAI/B,EAAE,EAAE;IACH,MAAM,EAAE,kBAAkB,EAAE,eAAe,EAAE,iBAAiB,EAAE,GAAG,KAAK,CAAC;IAEzE,IAAI,eAAe,KAAK,iBAAiB,EAAE,CAAC;QAC1C,MAAM,IAAI,KAAK,CACb,UAAU,kBAAkB,cAAc,iBAAiB,gBAAgB,iBAAiB,2CAA2C,CACxI,CAAC;IACJ,CAAC;AACH,CAAC,CAAC;AAZW,QAAA,eAAe,mBAY1B","sourcesContent":["import { type GadgetFieldType } from \"../../internal/gql/graphql.js\";\n\n/** Allows the use of multiple refs with one component */\nexport const multiref = <T>(...refs: (React.Ref<T> | null | undefined)[]) => {\n  return (value: T) => {\n    for (const ref of refs) {\n      if (ref) {\n        if (typeof ref == \"function\") {\n          ref(value);\n        } else {\n          (ref as any).current = value;\n        }\n      }\n    }\n  };\n};\n\nexport const assertFieldType = (props: {\n  fieldApiIdentifier: string;\n  actualFieldType: GadgetFieldType;\n  expectedFieldType: GadgetFieldType;\n}) => {\n  const { fieldApiIdentifier, actualFieldType, expectedFieldType } = props;\n\n  if (actualFieldType !== expectedFieldType) {\n    throw new Error(\n      `Field \"${fieldApiIdentifier}\" is not a ${expectedFieldType} field. Only ${expectedFieldType} fields are supported for this input type`\n    );\n  }\n};\n"]}
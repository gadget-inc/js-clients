{"version":3,"file":"useHasOneController.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useHasOneController.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useMemo } from \"react\";\nimport type { GadgetHasOneConfig } from \"../../internal/gql/graphql.js\";\nimport { useController } from \"../../useActionForm.js\";\nimport type { AutoRelationshipInputProps } from \"../interfaces/AutoRelationshipInputProps.js\";\nimport { useFieldMetadata } from \"./useFieldMetadata.js\";\nimport { useRelatedModelOptions } from \"./useRelatedModel.js\";\n\nexport const useHasOneInputController = (props: AutoRelationshipInputProps) => {\n  const { field, control } = props;\n  const fieldMetadata = useFieldMetadata(field);\n  const { metadata, path } = fieldMetadata;\n\n  const {\n    field: fieldProps,\n    fieldState: { error: fieldError },\n  } = useController({\n    name: path,\n    control,\n  });\n\n  const value: Record<string, any> | undefined = fieldProps.value;\n\n  const selectedRecord = useMemo(() => {\n    if (!value) {\n      return undefined;\n    }\n\n    return \"_unlink\" in value && value._unlink ? undefined : value;\n  }, [value]);\n\n  console.log({ metadata, path, value, selectedRecord });\n\n  const inverseFieldApiIdentifier = useMemo(() => {\n    return (metadata.configuration as GadgetHasOneConfig).inverseField?.apiIdentifier;\n  }, [metadata.configuration]);\n\n  const relatedModelOptions = useRelatedModelOptions(props);\n  const { options, pagination, search, relatedModel } = relatedModelOptions;\n\n  const errorMessage = fieldError?.message || relatedModel.error?.message;\n  const isLoading = relatedModel.fetching;\n\n  const onSelectRecord = useCallback(\n    (record: Record<string, any>) => {\n      const isAlreadySelected = value?.id === record.id;\n\n      if (value && isAlreadySelected) {\n        if (\"_unlink\" in value && value._unlink) {\n          const { _unlink, ...rest } = value;\n          fieldProps.onChange(rest);\n        } else {\n          fieldProps.onChange({ ...value, _unlink: { id: record.id, inverseFieldApiIdentifier } });\n        }\n      } else {\n        fieldProps.onChange({ ...record, _link: record.id });\n      }\n    },\n    [value, inverseFieldApiIdentifier, fieldProps]\n  );\n\n  const onRemoveRecord = useCallback(\n    (record: Record<string, any>) => {\n      if (value && \"_unlink\" in value && value._unlink) {\n        const { _unlink, ...rest } = value;\n        fieldProps.onChange(rest);\n      } else {\n        fieldProps.onChange({ ...value, _unlink: { id: record.id, inverseFieldApiIdentifier } });\n      }\n    },\n    [value, inverseFieldApiIdentifier, fieldProps]\n  );\n\n  return {\n    fieldMetadata,\n    relatedModelOptions,\n    selectedRecord,\n    errorMessage,\n    isLoading,\n    onSelectRecord,\n    onRemoveRecord,\n  };\n};\n"]}
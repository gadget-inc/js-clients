{"version":3,"file":"useTableBulkActions.js","sourceRoot":"","sources":["../../../../src/auto/hooks/useTableBulkActions.tsx"],"names":[],"mappings":";;;;AAAA,uDAAuC;AACvC,oFAA2C;AAC3C,6CAAmD;AAE5C,MAAM,mBAAmB,GAAG,CAAC,KAAqB,EAAE,EAAE;IAC3D,MAAM,CAAC,0BAA0B,EAAE,6BAA6B,CAAC,GAAG,eAAK,CAAC,QAAQ,CAAiC,SAAS,CAAC,CAAC;IAC9H,MAAM,sBAAsB,GAAG,uBAAuB,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;IAE/E,MAAM,iBAAiB,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACrC,OAAO,sBAAsB;aAC1B,MAAM,CACL,CAAC,aAAa,EAAE,EAAE;QAChB,iEAAiE;QACjE,aAAa,CAAC,MAAM;YACpB,CAAC,aAAa,CAAC,iBAAiB,IAAI,6EAA6E;YACjH,IAAA,4BAAS,EAAC,aAAa,CAAC,SAAS,EAAE,6BAA6B,CAAC,CACpE;aACA,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;YACvB,aAAa,EAAE,IAAA,4BAAiB,EAAC,aAAa,CAAC,aAAa,CAAC;YAC7D,iBAAiB,EAAE,GAAG,EAAE,CAAC,6BAA6B,CAAC,aAAa,CAAC,EAAE,kCAAkC;SAC1G,CAAC,CAAC,CAAC;IACR,CAAC,EAAE,CAAC,sBAAsB,CAAC,CAAC,CAAC;IAE7B,OAAO,EAAE,0BAA0B,EAAE,iBAAiB,EAAE,CAAC;AAC3D,CAAC,CAAC;AApBW,QAAA,mBAAmB,uBAoB9B;AAWF;;GAEG;AACH,MAAM,uBAAuB,GAAG,CAAC,KAAqB,EAAE,EAAE;IACxD,MAAM,YAAY,GAAyB,EAAE,CAAC;IAE9C,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC1D,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC;QAC9C,MAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC;QACvD,IAAI,QAAQ,EAAE,CAAC;YACb,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAED,MAAM,UAAU,GAAG,CAAC,IAAS,EAAsB,EAAE,CAAC,CAAC;QACrD,aAAa,EAAE,IAAI,CAAC,YAAY;QAChC,aAAa,EAAE,IAAI,CAAC,aAAa;QACjC,SAAS,EAAE,IAAI,CAAC,SAAS;QACzB,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;QACzC,SAAS,EAAE,IAAI,CAAC,SAAS;KAC1B,CAAC,CAAC;IAEH,OAAO,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,gDAAgD;AAChD,MAAM,6BAA6B,GAAG;IACpC,GAAG,EAAE;QACH,QAAQ,EAAE,IAAI;QACd,IAAI,EAAE,aAAa;KACpB;CACF,CAAC","sourcesContent":["import React, { useMemo } from \"react\";\nimport deepEqual from \"react-fast-compare\";\nimport { humanizeCamelCase } from \"../../utils.js\";\n\nexport const useTableBulkActions = (props: { model: any }) => {\n  const [selectedModelActionDetails, setSelectedModelActionDetails] = React.useState<ModelActionDetails | undefined>(undefined);\n  const allModelActionsDetails = getModelActionsForTable({ model: props.model });\n\n  const bulkActionOptions = useMemo(() => {\n    return allModelActionsDetails\n      .filter(\n        (actionDetails) =>\n          // Only bulk actions that accept only IDs are currently supported\n          actionDetails.isBulk &&\n          !actionDetails.acceptsModelInput && // Accepting modelInput guarantees that the action accepts more than just IDs\n          deepEqual(actionDetails.variables, OnlyIdsAcceptedInputVariables)\n      )\n      .map((actionDetails) => ({\n        humanizedName: humanizeCamelCase(actionDetails.apiIdentifier),\n        selectModelAction: () => setSelectedModelActionDetails(actionDetails), // To open the corresponding modal\n      }));\n  }, [allModelActionsDetails]);\n\n  return { selectedModelActionDetails, bulkActionOptions };\n};\n\nexport type ModelActionDetails = {\n  apiIdentifier: string;\n  operationName: string;\n  isDeleter: boolean;\n  isBulk: boolean;\n  acceptsModelInput: boolean;\n  variables: any;\n};\n\n/**\n * Returns a list of ModelActionDetail objects for given model\n */\nconst getModelActionsForTable = (props: { model: any }) => {\n  const modelActions: ModelActionDetails[] = [];\n\n  const modelPrototype = Object.getPrototypeOf(props.model);\n  for (const key of Object.keys(modelPrototype)) {\n    const isAction = modelPrototype[key].type === \"action\";\n    if (isAction) {\n      modelActions.push(modelPrototype[key]);\n    }\n  }\n\n  const funcMapper = (func: any): ModelActionDetails => ({\n    apiIdentifier: func.functionName,\n    operationName: func.operationName,\n    isDeleter: func.isDeleter,\n    isBulk: func.isBulk,\n    acceptsModelInput: func.acceptsModelInput,\n    variables: func.variables,\n  });\n\n  return modelActions.map(funcMapper);\n};\n\n// Expected variables for supported bulk actions\nconst OnlyIdsAcceptedInputVariables = {\n  ids: {\n    required: true,\n    type: \"[GadgetID!]\",\n  },\n};\n"]}
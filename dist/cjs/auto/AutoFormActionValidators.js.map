{"version":3,"file":"AutoFormActionValidators.js","sourceRoot":"","sources":["../../../src/auto/AutoFormActionValidators.ts"],"names":[],"mappings":";;;AAGO,MAAM,qBAAqB,GAAG,CAAC,MAA2E,EAAE,EAAE;IACnH,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACjE,CAAC;AACH,CAAC,CAAC;AAJW,QAAA,qBAAqB,yBAIhC;AAEF,MAAM,sBAAsB,GAAG,4BAA4B,CAAC;AAC/C,QAAA,qCAAqC,GAAG,oFAAoF,CAAC;AAC1I,MAAM,gBAAgB,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;AAE7C,MAAM,6BAA6B,GAAG,CAAC,MAA2E,EAAE,EAAE;IAC3H,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;QAC5C,wGAAwG;QACxG,qHAAqH;QACrH,MAAM,IAAI,KAAK,CAAC,6CAAqC,CAAC,CAAC;IACzD,CAAC;AACH,CAAC,CAAC;AANW,QAAA,6BAA6B,iCAMxC;AAEK,MAAM,4BAA4B,GAAG,CAAC,QAAgD,EAAE,EAAE;IAC/F,IAAI,QAAQ,EAAE,CAAC;QACb,8KAA8K;QAE9K,MAAM,eAAe,GACnB,CAAC,QAAQ,CAAC,UAAU,KAAK,oBAAoB;YAC3C,CAAC,CAAC,QAAQ,CAAC,QAAQ;YACnB,CAAC,CAAC,QAAQ,CAAC,UAAU,KAAK,aAAa;gBACvC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ;gBAC1B,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;QAEhB,MAAM,aAAa,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,sBAAsB,CAAC,CAAC;QACnG,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,6CAAqC,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;AACH,CAAC,CAAC;AAhBW,QAAA,4BAA4B,gCAgBvC","sourcesContent":["import type { ActionFunction, GlobalActionFunction } from \"@gadgetinc/api-client-core\";\nimport type { ActionMetadata, GlobalActionMetadata } from \"../metadata.js\";\n\nexport const validateNonBulkAction = (action: ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>) => {\n  if (action.isBulk) {\n    throw new Error(\"Bulk actions are not supported in AutoForms\");\n  }\n};\n\nconst GadgetApiTriggerSpecId = \"gadget/trigger/graphql_api\";\nexport const TriggerableActionRequiredErrorMessage = `\"action\" must be a valid Gadget action with an API trigger to be used in AutoForms`;\nconst validActionTypes = [\"globalAction\", \"action\"];\n\nexport const validateTriggersFromApiClient = (action: ActionFunction<any, any, any, any, any> | GlobalActionFunction<any>) => {\n  if (!validActionTypes.includes(action.type)) {\n    // When the API client is built with an action without the API trigger, the type will be \"stubbedAction\"\n    // action.type === \"globalAction\" | \"action\" // Only when the action has the API trigger when the api client is built\n    throw new Error(TriggerableActionRequiredErrorMessage);\n  }\n};\n\nexport const validateTriggersFromMetadata = (metadata?: ActionMetadata | GlobalActionMetadata) => {\n  if (metadata) {\n    // When an action's API trigger is removed but the referenced API client still uses the old api-triggered action, the presence of the trigger shall be checked in the metadata\n\n    const triggersAsArray =\n      (metadata.__typename === \"GadgetGlobalAction\"\n        ? metadata.triggers\n        : metadata.__typename === \"GadgetModel\"\n        ? metadata.action.triggers\n        : []) ?? [];\n\n    const hasApiTrigger = triggersAsArray.some((trigger) => trigger.specID === GadgetApiTriggerSpecId);\n    if (!hasApiTrigger) {\n      throw new Error(TriggerableActionRequiredErrorMessage);\n    }\n  }\n};\n"]}
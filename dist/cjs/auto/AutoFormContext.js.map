{"version":3,"file":"AutoFormContext.js","sourceRoot":"","sources":["../../../src/auto/AutoFormContext.tsx"],"names":[],"mappings":";;;;AAAA,uDAAmE;AAyBnE;;GAEG;AACU,QAAA,uBAAuB,GAAG,eAAK,CAAC,aAAa,CAAsC,SAAS,CAAC,CAAC;AAE3G;;;IAGI;AACG,MAAM,mBAAmB,GAAG,GAAG,EAAE;IACtC,MAAM,eAAe,GAAG,IAAA,kBAAU,EAAC,+BAAuB,CAAC,CAAC;IAC5D,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CACb;;;;yGAImG,CACpG,CAAC;IACJ,CAAC;IAED,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAbW,QAAA,mBAAmB,uBAa9B;AAEK,MAAM,mCAAmC,GAAG,GAAG,EAAE;IACtD,MAAM,eAAe,GAAG,IAAA,kBAAU,EAAC,+BAAuB,CAAC,CAAC;IAE5D,IAAI,eAAe,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;IACxF,CAAC;AACH,CAAC,CAAC;AANW,QAAA,mCAAmC,uCAM9C;AAEK,MAAM,4BAA4B,GAAG,GAAG,EAAE;IAC/C,MAAM,eAAe,GAAG,IAAA,kBAAU,EAAC,gDAAwC,CAAC,CAAC;IAC7E,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CACb;;;;yGAImG,CACpG,CAAC;IACJ,CAAC;IACD,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAZW,QAAA,4BAA4B,gCAYvC;AAEW,QAAA,wCAAwC,GAAG,eAAK,CAAC,aAAa,CAAgD,SAAS,CAAC,CAAC;AAE/H,MAAM,yCAAyC,GAAG,CAAC,EACxD,QAAQ,EACR,qBAAqB,GAItB,EAAE,EAAE;IACH,MAAM,yBAAyB,GAAG,sCAAsC,CAAC,qBAAqB,CAAC,CAAC;IAChG,OAAO,CACL,8BAAC,gDAAwC,CAAC,QAAQ,IAAC,KAAK,EAAE,yBAAyB,IAChF,QAAQ,CACyC,CACrD,CAAC;AACJ,CAAC,CAAC;AAbW,QAAA,yCAAyC,6CAapD;AAEF,MAAM,eAAe,GAAG,CAAC,KAAkB,EAAE,MAAyC,EAAe,EAAE;IACrG,OAAO,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC;AAEF,MAAM,sCAAsC,GAAG,CAAC,qBAA8B,EAAqC,EAAE;IACnH,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,IAAA,kBAAU,EAAC,eAAe,EAAE,IAAI,GAAG,EAAU,CAAC,CAAC;IAE5E,MAAM,cAAc,GAAG,IAAA,mBAAW,EAChC,CAAC,MAAgB,EAAE,EAAE;QACnB,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC3B,OAAO,CAAC,kEAAkE;QAC5E,CAAC;QACD,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IACpC,CAAC,EACD,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAClC,CAAC;IAEF,OAAO;QACL,qBAAqB;QACrB,QAAQ;QACR,cAAc;KACf,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React, { useCallback, useContext, useReducer } from \"react\";\nimport type { FieldMetadata, GlobalActionMetadata, ModelWithOneActionMetadata } from \"../metadata.js\";\nimport type { RecordIdentifier, UseActionFormSubmit } from \"../use-action-form/types.js\";\n\nexport interface AutoFormSubmitResult {\n  isSuccessful?: boolean;\n  error?: Error;\n  isSubmitting?: boolean;\n}\n\nexport interface AutoFormMetadataContext {\n  findBy?: RecordIdentifier;\n  metadata: ModelWithOneActionMetadata | GlobalActionMetadata | undefined;\n  submit: UseActionFormSubmit<any>;\n  submitResult: AutoFormSubmitResult;\n  model?: {\n    namespace?: string | string[] | null;\n    apiIdentifier?: string;\n  };\n  fields: readonly {\n    path: string;\n    metadata: FieldMetadata;\n  }[];\n}\n\n/**\n * React context that stores an instance of the metadata loaded for a particular form action\n */\nexport const AutoFormMetadataContext = React.createContext<AutoFormMetadataContext | undefined>(undefined);\n\n/**\n * Get the current `metadata` object and `submit` function from React context\n * Must be called within a component wrapped by the `<AutoForm>` component.\n **/\nexport const useAutoFormMetadata = () => {\n  const autoFormContext = useContext(AutoFormMetadataContext);\n  if (!autoFormContext) {\n    throw new Error(\n      `useAutoFormMetadata hook called in context where no AutoFormMetadata context is available. Please ensure you are wrapping this hook with the <AutoForm/> component from @gadgetinc/react.\n\n    Possible remedies:\n      - ensuring you have the <AutoForm/> component wrapped around your hook invocation\n      - ensuring your @gadget-client/<your-app> package and your @gadgetinc/react package are up to date`\n    );\n  }\n\n  return autoFormContext;\n};\n\nexport const useAssertNotNestedInAnotherAutoForm = () => {\n  const autoFormContext = useContext(AutoFormMetadataContext);\n\n  if (autoFormContext) {\n    throw new Error(`<AutoForm/> cannot be nested within another <AutoForm/> component.`);\n  }\n};\n\nexport const useFieldsFromChildComponents = () => {\n  const autoFormContext = useContext(AutoFormFieldsFromChildComponentsContext);\n  if (!autoFormContext) {\n    throw new Error(\n      `useFieldsFromChildComponents hook called in context where no AutoFormFieldsFromChildComponents context is available. Please ensure you are wrapping this hook with the <AutoForm/> component from @gadgetinc/react.\n\n    Possible remedies:\n      - ensuring you have the <AutoForm/> component wrapped around your hook invocation\n      - ensuring your @gadget-client/<your-app> package and your @gadgetinc/react package are up to date`\n    );\n  }\n  return autoFormContext;\n};\n\nexport const AutoFormFieldsFromChildComponentsContext = React.createContext<AutoFormFieldsFromChildComponents | undefined>(undefined);\n\nexport const AutoFormFieldsFromChildComponentsProvider = ({\n  children,\n  hasCustomFormChildren,\n}: {\n  children: React.ReactNode;\n  hasCustomFormChildren: boolean;\n}) => {\n  const fieldsFromChildComponents = useInitializeFieldsFromChildComponents(hasCustomFormChildren);\n  return (\n    <AutoFormFieldsFromChildComponentsContext.Provider value={fieldsFromChildComponents}>\n      {children}\n    </AutoFormFieldsFromChildComponentsContext.Provider>\n  );\n};\n\nconst fieldSetReducer = (state: Set<string>, action: { type: \"add\"; fields: string[] }): Set<string> => {\n  return new Set([...state, ...action.fields]);\n};\n\nconst useInitializeFieldsFromChildComponents = (hasCustomFormChildren: boolean): AutoFormFieldsFromChildComponents => {\n  const [fieldSet, dispatch] = useReducer(fieldSetReducer, new Set<string>());\n\n  const registerFields = useCallback(\n    (fields: string[]) => {\n      if (!hasCustomFormChildren) {\n        return; // Registration is only necessary with custom children in the form\n      }\n      dispatch({ type: \"add\", fields });\n    },\n    [hasCustomFormChildren, dispatch]\n  );\n\n  return {\n    hasCustomFormChildren,\n    fieldSet,\n    registerFields,\n  };\n};\n\nexport interface AutoFormFieldsFromChildComponents {\n  hasCustomFormChildren: boolean;\n  fieldSet: Set<string>;\n  registerFields: (fields: string[]) => void;\n}\n"]}
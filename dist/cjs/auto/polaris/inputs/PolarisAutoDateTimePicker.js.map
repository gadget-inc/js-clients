{"version":3,"file":"PolarisAutoDateTimePicker.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/inputs/PolarisAutoDateTimePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { DatePickerProps, TextFieldProps } from \"@shopify/polaris\";\nimport { DatePicker, Icon, InlineStack, Popover, TextField } from \"@shopify/polaris\";\nimport { CalendarIcon } from \"@shopify/polaris-icons\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport {\n  copyTime,\n  formatShortDateString,\n  getDateTimeObjectFromDate,\n  isValidDate,\n  utcToZonedTime,\n  zonedTimeToUtc,\n} from \"../../../dateTimeUtils.js\";\nimport type { GadgetDateTimeConfig } from \"../../../internal/gql/graphql.js\";\nimport { useController } from \"../../../useActionForm.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\nimport PolarisAutoTimePicker from \"./PolarisAutoTimePicker.js\";\n\nexport const PolarisAutoDateTimePicker = autoInput(\n  (props: {\n    field: string;\n    id?: string;\n    value?: Date;\n    onChange?: (value: Date) => void;\n    error?: string;\n    includeTime?: boolean;\n    hideTimePopover?: boolean;\n    label?: string;\n    datePickerProps?: Partial<DatePickerProps>;\n    timePickerProps?: Partial<TextFieldProps>;\n  }) => {\n    const { path, metadata } = useFieldMetadata(props.field);\n\n    const { field: fieldProps, fieldState } = useController({ name: path });\n\n    const { onChange, value } = props;\n    const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const localTime = useMemo(() => {\n      return value ? value : isValidDate(new Date(fieldProps.value)) ? new Date(fieldProps.value) : undefined;\n    }, [value, fieldProps.value]);\n\n    const [datePopoverActive, setDatePopoverActive] = useState(false);\n\n    const [popoverMonth, setPopoverMonth] = useState(getDateTimeObjectFromDate(localTime ?? utcToZonedTime(new Date(), localTz)).month);\n    const [popoverYear, setPopoverYear] = useState(getDateTimeObjectFromDate(localTime ?? utcToZonedTime(new Date(), localTz)).year);\n\n    const config = metadata.configuration;\n\n    const onDateChange = useCallback<Exclude<DatePickerProps[\"onChange\"], undefined>>(\n      (range) => {\n        (fieldProps || value) && copyTime(range.start, zonedTimeToUtc(range.start, localTz));\n        const dateOverride = value ?? new Date(fieldProps.value);\n        if (isValidDate(dateOverride)) {\n          range.start.setHours(dateOverride.getHours());\n          range.start.setMinutes(dateOverride.getMinutes());\n          range.start.setSeconds(dateOverride.getSeconds());\n          range.start.setMilliseconds(dateOverride.getMilliseconds());\n        }\n        onChange?.(zonedTimeToUtc(range.start, localTz));\n        fieldProps.onChange(zonedTimeToUtc(range.start, localTz));\n        setDatePopoverActive(false);\n      },\n      [fieldProps, value, localTz, onChange]\n    );\n\n    const toggleDatePopoverActive = useCallback(() => {\n      setPopoverMonth(getDateTimeObjectFromDate(isValidDate(localTime) && localTime ? localTime : new Date()).month);\n      setPopoverYear(getDateTimeObjectFromDate(isValidDate(localTime) && localTime ? localTime : new Date()).year);\n      setDatePopoverActive((active) => !active);\n    }, [localTime]);\n\n    const handleMonthChange = useCallback((month: number, year: number) => {\n      setPopoverMonth(month);\n      setPopoverYear(year);\n    }, []);\n\n    return (\n      <InlineStack gap=\"400\">\n        <Popover\n          preferredPosition=\"above\"\n          active={datePopoverActive}\n          activator={\n            <TextField\n              id={props.id ? `${props.id}-date` : undefined}\n              label={props.label ?? metadata.name ?? \"Date\"}\n              prefix={<Icon source={CalendarIcon} />}\n              autoComplete=\"off\"\n              value={localTime ? formatShortDateString(localTime) : \"\"}\n              onFocus={toggleDatePopoverActive}\n              requiredIndicator={metadata.requiredArgumentForInput}\n              error={props.error ?? fieldState.error?.message}\n            />\n          }\n          onClose={toggleDatePopoverActive}\n        >\n          <div style={{ padding: \"16px\" }}>\n            <DatePicker\n              month={popoverMonth}\n              year={popoverYear}\n              allowRange={false}\n              onChange={onDateChange}\n              onMonthChange={handleMonthChange}\n              selected={localTime ?? new Date()}\n              {...props.datePickerProps}\n            />\n          </div>\n        </Popover>\n        {(props.includeTime ?? (config as GadgetDateTimeConfig).includeTime) && (\n          <div style={{ width: \"130px\" }}>\n            <PolarisAutoTimePicker\n              fieldProps={fieldProps}\n              id={props.id}\n              localTime={localTime}\n              onChange={onChange}\n              hideTimePopover={props.hideTimePopover}\n              localTz={localTz}\n              timePickerProps={props.timePickerProps}\n              value={value}\n            />\n          </div>\n        )}\n      </InlineStack>\n    );\n  }\n);\n"]}
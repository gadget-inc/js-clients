{"version":3,"file":"PolarisAutoJSONInput.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/inputs/PolarisAutoJSONInput.tsx"],"names":[],"mappings":";;;;AACA,8CAA6C;AAC7C,0DAA0B;AAC1B,sDAAgD;AAChD,gDAAuD;AACvD,qDAA+C;AAC/C,qFAA+E;AAK/E;;;;;;;;;;;GAWG;AACU,QAAA,oBAAoB,GAAG,IAAA,wBAAS,EAAC,CAAC,KAAgC,EAAE,EAAE;IACjF,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,IAAA,sBAAQ,GAAE,CAAC;IAC3C,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,WAAW,EAAE,GAAG,KAAK,CAAC;IACnE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,UAAU,EAAE,GAAG,IAAA,kDAAsB,EAAC,KAAK,CAAC,CAAC;IAEnF,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC;IAC9C,OAAO,CACL;QACE,8BAAC,mBAAS,IACR,SAAS,EAAE,CAAC,EACZ,UAAU,QACV,iBAAiB,EAAE,UAAU,CAAC,QAAQ,CAAC,wBAAwB,EAC/D,KAAK,EAAE,CAAC,SAAS,IAAI,YAAY,IAAI,iBAAiB,YAAY,EAAE,KAChE,IAAA,6BAAkB,EAAC,UAAU,CAAC,KAC9B,IAAA,6BAAkB,EAAC,UAAU,CAAC,KAC9B,WAAW,EACf,KAAK,EAAE,KAAK,GACZ,CACD,CACJ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import type { TextFieldProps } from \"@shopify/polaris\";\nimport { TextField } from \"@shopify/polaris\";\nimport React from \"react\";\nimport { useFocus } from \"../../../useFocus.js\";\nimport { getPropsWithoutRef } from \"../../../utils.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useJSONInputController } from \"../../hooks/useJSONInputController.js\";\nimport { type AutoJSONInputProps } from \"../../shared/AutoInputTypes.js\";\n\ntype PolarisAutoJSONInputProps = AutoJSONInputProps & Partial<Omit<TextFieldProps, \"onChange\">>;\n\n/**\n * A JSON editor within AutoForm.\n * @example\n * ```tsx\n * <AutoForm action={api.modelA.create}>\n *   <AutoJSONInput field=\"fieldA\" label=\"Field A\" />\n * </AutoForm>\n * ```\n * @param props.field - The JSON field API identifier.\n * @param props.label - Label of the JSON editor.\n * @returns The AutoJSONInput component\n */\nexport const PolarisAutoJSONInput = autoInput((props: PolarisAutoJSONInputProps) => {\n  const [isFocused, focusProps] = useFocus();\n  const { field: _field, control: _control, ...restOfProps } = props;\n  const { type: _type, errorMessage, ...controller } = useJSONInputController(props);\n\n  const label = props.label ?? controller.label;\n  return (\n    <>\n      <TextField\n        multiline={4}\n        monospaced\n        requiredIndicator={controller.metadata.requiredArgumentForInput}\n        error={!isFocused && errorMessage && `Invalid JSON: ${errorMessage}`}\n        {...getPropsWithoutRef(controller)}\n        {...getPropsWithoutRef(focusProps)}\n        {...restOfProps}\n        label={label}\n      />\n    </>\n  );\n});\n"]}
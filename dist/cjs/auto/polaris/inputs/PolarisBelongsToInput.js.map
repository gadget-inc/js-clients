{"version":3,"file":"PolarisBelongsToInput.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/inputs/PolarisBelongsToInput.tsx"],"names":[],"mappings":";;;;AAAA,iEAA+D;AAC/D,gEAAoD;AACpD,8CAA0C;AAC1C,kEAAoD;AACpD,0DAA0B;AAC1B,mDAAkD;AAClD,4DAAsD;AAEtD,qDAAgD;AAKzC,MAAM,qBAAqB,GAAG,CAAC,KAAwB,EAAE,EAAE;IAChE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAA,wCAAmB,GAAE,CAAC;IAC3C,MAAM,GAAG,GAAG,IAAA,0BAAM,GAAE,CAAC;IACrB,MAAM,MAAM,GAAG,IAAA,2BAAa,EAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAE3C,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC;IAErF,IAAI,CAAC,aAAa,EAAE,CAAC;QACnB,MAAM,IAAI,KAAK,CAAC,SAAS,KAAK,CAAC,KAAK,wBAAwB,CAAC,CAAC;IAChE,CAAC;IAED,MAAM,IAAI,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAM,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IAEhC,MAAM,EACJ,KAAK,EAAE,UAAU,EACjB,UAAU,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,GAClC,GAAG,IAAA,+BAAa,EAAC;QAChB,IAAI,EAAE,IAAI,GAAG,KAAK;QAClB,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,wBAAwB,EAAE;KACrD,CAAC,CAAC;IAEH,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,KAAK,EAAE,GAAG,UAAU,CAAC;IAC3C,MAAM,MAAM,GAAG,MAAM,CAAC,aAAsC,CAAA;IAE5D,IAAG,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;QACnC,MAAM,IAAI,KAAK,CAAC,SAAS,KAAK,CAAC,KAAK,wBAAwB,CAAC,CAAC;IAChE,CAAC;IAED,MAAM,YAAY,GAAG,IAAA,wBAAM,EACxB,GAAW,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAoB,EAClE,4CAA4C,CAC7C,CAAC;IAEF,MAAM,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,QAAQ,CAAC,GAAG,IAAA,4BAAW,EAAC,YAAmB,EAAE,EAAC,KAAK,EAAE,EAAE,EAAC,CAAC,CAAC;IAE5F,IAAG,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;QACrB,OAAO,sDAAiB,CAAA;IAC1B,CAAC;IAED,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,MAA2B,EAAE,EAAE,GAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,EAAE,EAAC,CAAA,CAAA,CAAC,CAAC,CAAA;IAE3G,OAAO,CACL,8BAAC,gBAAM,IACL,KAAK,EAAE,MAAM,CAAC,IAAI,EAClB,OAAO,EAAE,OAAO,KACZ,KAAK,EACT,KAAK,EAAE,UAAU,EAAE,OAAO,GAC1B,CACH,CAAC;AACJ,CAAC,CAAC;AAlDW,QAAA,qBAAqB,yBAkDhC","sourcesContent":["import { useAutoFormMetadata } from \"../../AutoFormContext.js\";\nimport { assert } from \"@gadgetinc/api-client-core\";\nimport { Select } from \"@shopify/polaris\";\nimport { useApi } from \"../../../GadgetProvider.js\";\nimport React from \"react\";\nimport { useFormFields } from \"../../AutoForm.js\";\nimport { useFindMany } from \"../../../useFindMany.js\";\nimport { AnyModelManager } from \"@gadgetinc/api-client-core\";\nimport { useController } from \"react-hook-form\";\nimport { GadgetBelongsToConfig } from \"src/internal/gql/graphql.js\";\n\n\n\nexport const PolarisBelongsToInput = (props: { field: string }) => {\n  const { metadata } = useAutoFormMetadata();\n  const api = useApi();\n  const fields = useFormFields(metadata, {});\n\n  const fieldMetadata = fields.find((field) => field[1].apiIdentifier === props.field);\n\n  if (!fieldMetadata) {\n    throw new Error(`Field ${props.field} not found in metadata`);\n  }\n\n  const path = fieldMetadata[0];\n  const _field = fieldMetadata[1];\n\n  const {\n    field: fieldProps,\n    fieldState: { error: fieldError },\n  } = useController({\n    name: path + \".id\",\n    rules: { required: _field.requiredArgumentForInput },\n  });\n\n  const { ref: _ref, ...field } = fieldProps;\n  const config = _field.configuration as GadgetBelongsToConfig\n\n  if(!config || !config.relatedModel) {\n    throw new Error(`Field ${props.field} not found in metadata`);\n  }\n\n  const modelManager = assert(\n    (api as any)[config.relatedModel.apiIdentifier] as AnyModelManager,\n    \"no model manager found for action function\"\n  );\n\n  const [{ data, fetching, error }, _refetch] = useFindMany(modelManager as any, {first: 25});\n\n  if(fetching || !data) {\n    return <p>Loading...</p>\n  }\n\n  const options = data.map((record: Record<string, any>) => {return { label: record.name, value: record.id}})\n\n  return (\n    <Select\n      label={_field.name}\n      options={options}\n      {...field}\n      error={fieldError?.message}\n    />\n  );\n};\n"]}
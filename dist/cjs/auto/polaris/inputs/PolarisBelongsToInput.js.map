{"version":3,"file":"PolarisBelongsToInput.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/inputs/PolarisBelongsToInput.tsx"],"names":[],"mappings":";;;;AAAA,gEAAoD;AACpD,8CAA0C;AAC1C,0DAA0B;AAC1B,qDAAgD;AAEhD,kEAAoD;AACpD,4DAAsD;AACtD,gDAAoD;AACpD,yEAAmE;AAE5D,MAAM,qBAAqB,GAAG,CAAC,KAAwB,EAAE,EAAE;IAChE,MAAM,GAAG,GAAG,IAAA,0BAAM,GAAE,CAAC;IACrB,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,IAAA,sCAAgB,EAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAE9D,MAAM,EACJ,KAAK,EAAE,UAAU,EACjB,UAAU,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,GAClC,GAAG,IAAA,+BAAa,EAAC;QAChB,IAAI,EAAE,IAAI,GAAG,KAAK;QAClB,KAAK,EAAE,EAAE,QAAQ,EAAE,aAAa,CAAC,wBAAwB,EAAE;KAC5D,CAAC,CAAC;IAEH,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,KAAK,EAAE,GAAG,UAAU,CAAC;IAC3C,MAAM,MAAM,GAAG,aAAa,CAAC,aAAsC,CAAC;IAEpE,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;QACpC,MAAM,IAAI,KAAK,CAAC,SAAS,KAAK,CAAC,KAAK,wBAAwB,CAAC,CAAC;IAChE,CAAC;IAED,MAAM,YAAY,GAAG,IAAA,wBAAM,EACzB,IAAA,0BAAe,EAAC,GAAG,EAAE,MAAM,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,EACtF,4CAA4C,CAC7C,CAAC;IAEF,MAAM,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,QAAQ,CAAC,GAAG,IAAA,4BAAW,EAAC,YAAmB,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;IAE9F,IAAI,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;QACtB,OAAO,sDAAiB,CAAC;IAC3B,CAAC;IAED,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,MAA2B,EAAE,EAAE;QACvD,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,OAAO,8BAAC,gBAAM,IAAC,KAAK,EAAE,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,KAAM,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,GAAI,CAAC;AACxG,CAAC,CAAC;AAnCW,QAAA,qBAAqB,yBAmChC","sourcesContent":["import { assert } from \"@gadgetinc/api-client-core\";\nimport { Select } from \"@shopify/polaris\";\nimport React from \"react\";\nimport { useController } from \"react-hook-form\";\nimport type { GadgetBelongsToConfig } from \"src/internal/gql/graphql.js\";\nimport { useApi } from \"../../../GadgetProvider.js\";\nimport { useFindMany } from \"../../../useFindMany.js\";\nimport { getModelManager } from \"../../../utils.js\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\n\nexport const PolarisBelongsToInput = (props: { field: string }) => {\n  const api = useApi();\n  const { path, fieldMetadata } = useFieldMetadata(props.field);\n\n  const {\n    field: fieldProps,\n    fieldState: { error: fieldError },\n  } = useController({\n    name: path + \".id\",\n    rules: { required: fieldMetadata.requiredArgumentForInput },\n  });\n\n  const { ref: _ref, ...field } = fieldProps;\n  const config = fieldMetadata.configuration as GadgetBelongsToConfig;\n\n  if (!config || !config.relatedModel) {\n    throw new Error(`Field ${props.field} not found in metadata`);\n  }\n\n  const modelManager = assert(\n    getModelManager(api, config.relatedModel.apiIdentifier, config.relatedModel.namespace),\n    \"no model manager found for action function\"\n  );\n\n  const [{ data, fetching, error }, _refetch] = useFindMany(modelManager as any, { first: 25 });\n\n  if (fetching || !data) {\n    return <p>Loading...</p>;\n  }\n\n  const options = data.map((record: Record<string, any>) => {\n    return { label: record.name, value: record.id };\n  });\n\n  return <Select label={fieldMetadata.name} options={options} {...field} error={fieldError?.message} />;\n};\n"]}
{"version":3,"file":"PolarisAutoBooleanInput.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/inputs/PolarisAutoBooleanInput.tsx"],"names":[],"mappings":";;;;AACA,8CAA4C;AAC5C,uDAAyC;AAEzC,gEAA0E;AAC1E,gDAAwC;AACxC,qDAA+C;AAC/C,yEAAmE;AAEtD,QAAA,uBAAuB,GAAG,IAAA,wBAAS,EAAC,CAAC,KAAyE,EAAE,EAAE;IAC7H,MAAM,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IAE9D,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAA,sCAAgB,EAAC,kBAAkB,CAAC,CAAC;IAEhE,MAAM,EACJ,KAAK,EAAE,UAAU,EACjB,UAAU,EAAE,EAAE,KAAK,EAAE,GACtB,GAAG,IAAA,gCAAa,EAAC;QAChB,OAAO;QACP,IAAI,EAAE,IAAI;KACX,CAAC,CAAC;IAEH,MAAM,EACJ,SAAS,EAAE,EAAE,aAAa,EAAE,GAC7B,GAAG,IAAA,iCAAc,GAAE,CAAC;IAErB,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,QAAQ,CAAC,wBAAwB,EAAE,CAAC;YACtC,qEAAqE;YACrE,uFAAuF;YACvF,MAAM,YAAY,GAAG,IAAA,cAAG,EAAC,aAAa,IAAI,EAAE,EAAE,IAAI,CAAC,IAAI,KAAK,CAAC;YAC7D,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACpC,CAAC;IACH,CAAC,EAAE,CAAC,QAAQ,CAAC,wBAAwB,EAAE,aAAa,CAAC,CAAC,CAAC;IAEvD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,QAAQ,CAAC,IAAI,CAAC;IAC3C,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,cAAc,EAAE,GAAG,UAAU,CAAC;IAExD,OAAO,8BAAC,kBAAQ,OAAK,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,KAAM,IAAI,EAAE,KAAK,EAAE,KAAK,GAAI,CAAC;AACtH,CAAC,CAAC,CAAC","sourcesContent":["import type { CheckboxProps } from \"@shopify/polaris\";\nimport { Checkbox } from \"@shopify/polaris\";\nimport React, { useEffect } from \"react\";\nimport type { Control } from \"../../../useActionForm.js\";\nimport { useController, useFormContext } from \"../../../useActionForm.js\";\nimport { get } from \"../../../utils.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\n\nexport const PolarisAutoBooleanInput = autoInput((props: { field: string; control?: Control<any> } & Partial<CheckboxProps>) => {\n  const { field: fieldApiIdentifier, control, ...rest } = props;\n\n  const { path, metadata } = useFieldMetadata(fieldApiIdentifier);\n\n  const {\n    field: fieldProps,\n    fieldState: { error },\n  } = useController({\n    control,\n    name: path,\n  });\n\n  const {\n    formState: { defaultValues },\n  } = useFormContext();\n\n  useEffect(() => {\n    if (metadata.requiredArgumentForInput) {\n      // when the field is required, this defaults to false to match the UI\n      // When not required, the field will have a null value unless it is touched by the user\n      const defaultValue = get(defaultValues ?? {}, path) ?? false;\n      fieldProps.onChange(defaultValue);\n    }\n  }, [metadata.requiredArgumentForInput, defaultValues]);\n\n  const label = props.label ?? metadata.name;\n  const { value: _value, ...restFieldProps } = fieldProps;\n\n  return <Checkbox {...restFieldProps} checked={!!fieldProps.value} error={error?.message} {...rest} label={label} />;\n});\n"]}
{"version":3,"file":"PolarisAutoHasManyForm.js","sourceRoot":"","sources":["../../../../../../src/auto/polaris/inputs/relationships/PolarisAutoHasManyForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import { BlockStack, Box, Button, Icon, InlineStack, ResourceItem, Text } from \"@shopify/polaris\";\nimport { PlusCircleIcon } from \"@shopify/polaris-icons\";\nimport React, { useState } from \"react\";\nimport { useFormContext } from \"../../../../useActionForm.js\";\nimport { autoInput } from \"../../../AutoInput.js\";\nimport { RelationshipContext, useAutoRelationship, useRelationshipContext } from \"../../../hooks/useAutoRelationship.js\";\nimport { useHasManyController } from \"../../../hooks/useHasManyController.js\";\nimport { getRecordAsOption, useOptionLabelForField } from \"../../../hooks/useRelatedModel.js\";\nimport type { OptionLabel } from \"../../../interfaces/AutoRelationshipInputProps.js\";\nimport { renderOptionLabel } from \"./utils.js\";\n\nexport const PolarisAutoHasManyForm = autoInput(\n  (props: {\n    field: string;\n    children: React.ReactNode;\n    primaryLabel?: OptionLabel;\n    secondaryLabel?: OptionLabel;\n    tertiaryLabel?: OptionLabel;\n  }) => {\n    const { metadata } = useAutoRelationship({ field: props.field });\n    const { getValues } = useFormContext();\n    const { fieldArray, fieldArrayPath } = useHasManyController({ field: props.field });\n    const { fields, append, remove } = fieldArray;\n    const relationshipContext = useRelationshipContext();\n\n    if (metadata.configuration.__typename !== \"GadgetHasManyConfig\") {\n      throw new Error(\"PolarisAutoHasManyForm can only be used for HasMany fields\");\n    }\n\n    const modelName = metadata.configuration.relatedModel?.name;\n\n    const primaryLabel = useOptionLabelForField(props.field, props.primaryLabel);\n\n    const [editingIndex, setEditingIndex] = useState<number | null>(null);\n\n    return (\n      <Box borderColor=\"border\" borderWidth=\"025\" borderRadius=\"200\">\n        <BlockStack as=\"ul\">\n          {fields.flatMap((field, idx) => {\n            // since we don't put full data in the field array when we append, we need to\n            // get the value directly from the form state\n            const record = getValues(`${fieldArrayPath}.${idx}`);\n\n            if (!record) {\n              return [];\n            }\n\n            const option = getRecordAsOption(record, primaryLabel, props.secondaryLabel, props.tertiaryLabel);\n\n            const pathPrefix = relationshipContext?.transformPath ? relationshipContext.transformPath(props.field) : props.field;\n            const metadataPathPrefix = relationshipContext?.transformMetadataPath\n              ? relationshipContext.transformMetadataPath(props.field)\n              : props.field;\n\n            return (\n              <Box key={field._fieldArrayKey} borderColor=\"border\" borderBlockEndWidth=\"025\">\n                {editingIndex == idx ? (\n                  <Box padding=\"300\">\n                    <BlockStack gap=\"300\">\n                      <RelationshipContext.Provider\n                        value={{\n                          transformPath: (path) => `${pathPrefix}.${idx}.${path}`,\n                          transformMetadataPath: (path) => `${metadataPathPrefix}.${path}`,\n                          fieldArray,\n                        }}\n                      >\n                        {props.children}\n                      </RelationshipContext.Provider>\n                      <InlineStack align=\"space-between\">\n                        <Button tone=\"critical\" onClick={() => remove(idx)}>\n                          Delete\n                        </Button>\n                        <Button variant=\"primary\" onClick={() => setEditingIndex(null)}>\n                          Confirm\n                        </Button>\n                      </InlineStack>\n                    </BlockStack>\n                  </Box>\n                ) : (\n                  <ResourceItem id={option.id} name={option.label?.toString() ?? option.id} onClick={() => setEditingIndex(idx)}>\n                    {option.label ? (\n                      <InlineStack align=\"space-between\">\n                        <BlockStack gap=\"200\">\n                          {renderOptionLabel(option.label, \"primary\")}\n                          {option.secondaryLabel && renderOptionLabel(option.secondaryLabel, \"secondary\")}\n                        </BlockStack>\n                        {option.tertiaryLabel && renderOptionLabel(option.tertiaryLabel, \"tertiary\")}\n                      </InlineStack>\n                    ) : (\n                      <Text variant=\"bodyMd\" as=\"h3\" tone=\"subdued\">\n                        Click to edit...\n                      </Text>\n                    )}\n                  </ResourceItem>\n                )}\n              </Box>\n            );\n          })}\n          <Box>\n            <ResourceItem\n              id=\"add\"\n              name=\"Add\"\n              onClick={() => {\n                append({});\n                setEditingIndex(fields.length);\n              }}\n            >\n              <InlineStack align=\"start\" gap=\"200\">\n                <Box>\n                  <Icon source={PlusCircleIcon} />\n                </Box>\n                <Text as=\"p\" variant=\"bodyMd\" fontWeight=\"semibold\">\n                  Add {modelName}\n                </Text>\n              </InlineStack>\n            </ResourceItem>\n          </Box>\n        </BlockStack>\n      </Box>\n    );\n  }\n);\n"]}
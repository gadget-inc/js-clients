{"version":3,"file":"PolarisAutoHasManyForm.js","sourceRoot":"","sources":["../../../../../../src/auto/polaris/inputs/relationships/PolarisAutoHasManyForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import { BlockStack, Box, Button, Icon, InlineStack, ResourceItem, Text } from \"@shopify/polaris\";\nimport { PlusCircleIcon } from \"@shopify/polaris-icons\";\nimport React, { useState } from \"react\";\nimport { useFormContext } from \"../../../../useActionForm.js\";\nimport { autoRelationshipForm } from \"../../../AutoInput.js\";\nimport { RelationshipContext, useAutoRelationship, useRelationshipContext } from \"../../../hooks/useAutoRelationship.js\";\nimport { useHasManyController } from \"../../../hooks/useHasManyController.js\";\nimport { getRecordAsOption, useOptionLabelForField } from \"../../../hooks/useRelatedModel.js\";\nimport { useRequiredChildComponentsValidator } from \"../../../hooks/useRequiredChildComponentsValidator.js\";\nimport type { AutoRelationshipFormProps } from \"../../../interfaces/AutoRelationshipInputProps.js\";\nimport { getRecordLabelObject } from \"../../../interfaces/AutoRelationshipInputProps.js\";\nimport { EditableOptionLabelButton } from \"./EditableOptionLabelButton.js\";\n\ntype HasManyFormProps = Omit<AutoRelationshipFormProps, \"recordFilter\">;\n\nconst useRecordLabelObjectFromProps = (props: HasManyFormProps) => {\n  const recordLabelObject = getRecordLabelObject(props.recordLabel);\n  const primaryLabel = useOptionLabelForField(props.field, recordLabelObject?.primary);\n  return { ...recordLabelObject, primary: primaryLabel };\n};\n\nexport const PolarisAutoHasManyForm = autoRelationshipForm((props: HasManyFormProps) => {\n  useRequiredChildComponentsValidator(props, \"AutoHasManyForm\");\n  const { metadata } = useAutoRelationship({ field: props.field });\n  const { getValues } = useFormContext();\n\n  const { fieldArray, fieldArrayPath } = useHasManyController({ field: props.field });\n  const { fields, append, remove } = fieldArray;\n  const relationshipContext = useRelationshipContext();\n\n  if (metadata.configuration.__typename !== \"GadgetHasManyConfig\") {\n    throw new Error(\"PolarisAutoHasManyForm can only be used for HasMany fields\");\n  }\n\n  const modelName = metadata.configuration.relatedModel?.name;\n\n  const recordLabel = useRecordLabelObjectFromProps(props);\n\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\n\n  return (\n    <>\n      <div style={{ marginBottom: \"8px\" }}>\n        {props.label ?? (\n          <Text as=\"h2\" variant=\"headingSm\">\n            {metadata.name}\n          </Text>\n        )}\n      </div>\n      <Box borderColor=\"border\" borderWidth=\"025\" borderRadius=\"200\">\n        <BlockStack as=\"ul\">\n          {fields.flatMap((field, idx) => {\n            // since we don't put full data in the field array when we append, we need to\n            // get the value directly from the form state\n            const record = getValues(`${fieldArrayPath}.${idx}`);\n\n            if (!record) {\n              return [];\n            }\n\n            const option = getRecordAsOption(record, recordLabel);\n\n            const pathPrefix = relationshipContext?.transformPath ? relationshipContext.transformPath(props.field) : props.field;\n            const metadataPathPrefix = relationshipContext?.transformMetadataPath\n              ? relationshipContext.transformMetadataPath(props.field)\n              : props.field;\n\n            return (\n              <Box key={field._fieldArrayKey} borderColor=\"border\" borderBlockEndWidth=\"025\" id={`${pathPrefix}.${idx}`}>\n                {editingIndex == idx ? (\n                  <Box padding=\"300\">\n                    <BlockStack gap=\"300\">\n                      <RelationshipContext.Provider\n                        value={{\n                          transformPath: (path) => `${pathPrefix}.${idx}.${path}`,\n                          transformMetadataPath: (path) => `${metadataPathPrefix}.${path}`,\n                          fieldArray,\n                        }}\n                      >\n                        {props.children}\n                      </RelationshipContext.Provider>\n                      <InlineStack align=\"space-between\">\n                        <Button tone=\"critical\" onClick={() => remove(idx)} id={`deleteButton_${metadataPathPrefix}.${idx}`}>\n                          Delete\n                        </Button>\n                        <Button variant=\"primary\" onClick={() => setEditingIndex(null)} id={`confirmButton_${metadataPathPrefix}.${idx}`}>\n                          Confirm\n                        </Button>\n                      </InlineStack>\n                    </BlockStack>\n                  </Box>\n                ) : (\n                  <ResourceItem id={option.id} name={option.primary?.toString() ?? option.id} onClick={() => setEditingIndex(idx)}>\n                    <EditableOptionLabelButton option={option} />\n                  </ResourceItem>\n                )}\n              </Box>\n            );\n          })}\n          <Box>\n            <ResourceItem\n              id=\"add\"\n              name=\"Add\"\n              onClick={() => {\n                append({});\n                setEditingIndex(fields.length);\n              }}\n            >\n              <InlineStack align=\"start\" gap=\"200\">\n                <Box>\n                  <Icon source={PlusCircleIcon} />\n                </Box>\n                <Text as=\"p\" variant=\"bodyMd\" fontWeight=\"semibold\">\n                  Add {modelName}\n                </Text>\n              </InlineStack>\n            </ResourceItem>\n          </Box>\n        </BlockStack>\n      </Box>\n    </>\n  );\n});\n"]}
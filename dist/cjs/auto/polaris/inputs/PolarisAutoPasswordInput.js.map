{"version":3,"file":"PolarisAutoPasswordInput.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/inputs/PolarisAutoPasswordInput.tsx"],"names":[],"mappings":";;;;AACA,8CAA0C;AAC1C,0DAAkD;AAClD,uDAAwC;AAExC,iEAA+D;AAC/D,6FAAuF;AAEvF;;;GAGG;AACH,MAAM,2BAA2B,GAAG,UAAU,CAAC;AAExC,MAAM,wBAAwB,GAAG,CACtC,KAG2B,EAC3B,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,wCAAmB,GAAE,CAAC;IACzC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAC,CAAC,MAAM,CAAC,CAAC;IAEpD,MAAM,kBAAkB,GAAG,CACzB,uCAAK,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;QAC7B,8BAAC,gBAAM,IAAC,OAAO,EAAC,OAAO,EAAC,IAAI,EAAC,MAAM,EAAC,IAAI,EAAE,wBAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,KAAK,oBAAoB,GAAI,CAC/H,CACP,CAAC;IAEF,OAAO,CACL,8BAAC,oEAA+B,OAC1B,CAAC,SAAS;YACZ,CAAC,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE;YAC7B,CAAC,CAAC;gBACE,WAAW,EAAE,2BAA2B;gBACxC,MAAM,EAAE,kBAAkB;gBAC1B,QAAQ,EAAE,IAAI;aACf,CAAC,KACF,KAAK,GACT,CACH,CAAC;AACJ,CAAC,CAAC;AA3BW,QAAA,wBAAwB,4BA2BnC","sourcesContent":["import type { TextFieldProps } from \"@shopify/polaris\";\nimport { Button } from \"@shopify/polaris\";\nimport { EditIcon } from \"@shopify/polaris-icons\";\nimport React, { useState } from \"react\";\nimport type { Control } from \"react-hook-form\";\nimport { useAutoFormMetadata } from \"../../AutoFormContext.js\";\nimport { PolarisAutoEncryptedStringInput } from \"./PolarisAutoEncryptedStringInput.js\";\n\n/**\n * The salted password hash is not retrieved from the DB\n * Regardless of the password is defined or not, this placeholder is shown as exposing an unset password is a security risk\n */\nconst existingPasswordPlaceholder = \"********\";\n\nexport const PolarisAutoPasswordInput = (\n  props: {\n    field: string; // The field API identifier\n    control?: Control<any>;\n  } & Partial<TextFieldProps>\n) => {\n  const { findBy } = useAutoFormMetadata();\n  const [isEditing, setIsEditing] = useState(!findBy);\n\n  const startEditingButton = (\n    <div style={{ display: \"flex\" }}>\n      <Button variant=\"plain\" size=\"slim\" icon={EditIcon} onClick={() => setIsEditing(true)} role={`${props.field}EditPasswordButton`} />\n    </div>\n  );\n\n  return (\n    <PolarisAutoEncryptedStringInput\n      {...(isEditing\n        ? { placeholder: \"Password\" }\n        : {\n            placeholder: existingPasswordPlaceholder,\n            suffix: startEditingButton,\n            disabled: true,\n          })}\n      {...props}\n    />\n  );\n};\n"]}
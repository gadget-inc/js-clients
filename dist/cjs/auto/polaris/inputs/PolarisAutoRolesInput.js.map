{"version":3,"file":"PolarisAutoRolesInput.js","sourceRoot":"","sources":["../../../../../src/auto/polaris/inputs/PolarisAutoRolesInput.tsx"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAE1B,gDAAuD;AACvD,qDAA+C;AAC/C,qFAA+E;AAE/E,sFAAgF;AAEnE,QAAA,qBAAqB,GAAG,IAAA,wBAAS,EAC5C,CACE,KAGkD,EAClD,EAAE;IACF,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,gBAAgB,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,IAAA,kDAAsB,EAAC,KAAK,CAAC,CAAC;IAE3H,IAAI,UAAU,EAAE,CAAC;QACf,MAAM,UAAU,CAAC;IACnB,CAAC;IACD,IAAI,UAAU,EAAE,CAAC;QACf,MAAM,UAAU,CAAC;IACnB,CAAC;IAED,IAAI,OAAO,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAChD,yGAAyG;QACzG,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,CACL,8BAAC,4DAA2B,IAC1B,OAAO,EAAE,OAAO,EAChB,aAAa,QACb,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,QAAQ,CAAC,IAAI,KAC/B,IAAA,6BAAkB,EAAC,UAAU,CAAC,EAClC,KAAK,EAAE,gBAAgB,GACvB,CACH,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["import React from \"react\";\nimport type { Control } from \"../../../useActionForm.js\";\nimport { getPropsWithoutRef } from \"../../../utils.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useRoleInputController } from \"../../hooks/useRoleInputController.js\";\nimport type { PolarisFixedOptionsMultiComboboxProps } from \"../PolarisFixedOptionsCombobox.js\";\nimport { PolarisFixedOptionsCombobox } from \"../PolarisFixedOptionsCombobox.js\";\n\nexport const PolarisAutoRolesInput = autoInput(\n  (\n    props: {\n      field: string; // Field API identifier\n      control?: Control<any>;\n    } & Partial<PolarisFixedOptionsMultiComboboxProps>\n  ) => {\n    const { options, loading, rolesError, fieldError, selectedRoleKeys, fieldProps, metadata } = useRoleInputController(props);\n\n    if (rolesError) {\n      throw rolesError;\n    }\n    if (fieldError) {\n      throw fieldError;\n    }\n\n    if (loading || !options || options.length === 0) {\n      // Don't render until role options exist. There must always be at least one role option `unauthenticated`\n      return null;\n    }\n\n    return (\n      <PolarisFixedOptionsCombobox\n        options={options}\n        allowMultiple\n        label={props.label ?? metadata.name}\n        {...getPropsWithoutRef(fieldProps)}\n        value={selectedRoleKeys}\n      />\n    );\n  }\n);\n"]}
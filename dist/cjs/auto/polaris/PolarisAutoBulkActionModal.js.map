{"version":3,"file":"PolarisAutoBulkActionModal.js","sourceRoot":"","sources":["../../../../src/auto/polaris/PolarisAutoBulkActionModal.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Banner, Button, ButtonGroup, Modal, Spinner, Text } from \"@shopify/polaris\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useBulkAction } from \"../../useBulkAction.js\";\nimport { humanizeCamelCase } from \"../../utils.js\";\nimport { ModelActionDetails } from \"../hooks/useModelActionsForTable.js\";\n\nexport const PolarisAutoBulkActionModal = (props: { model: any; modelActionDetails?: ModelActionDetails; ids: string[] }) => {\n  const { model, modelActionDetails, ids } = props;\n\n  const [showModal, setShowModal] = React.useState(!!modelActionDetails);\n  const [actionName, setActionName] = React.useState(modelActionDetails?.apiIdentifier);\n\n  useEffect(() => {\n    if (!modelActionDetails) {\n      return;\n    }\n    setShowModal(true);\n    setActionName(modelActionDetails.apiIdentifier);\n  }, [modelActionDetails]);\n\n  const actionIsLoaded = modelActionDetails && actionName && model[actionName];\n  const isBulkAction = actionIsLoaded && modelActionDetails.isBulk;\n\n  const modalTitle = useMemo(() => humanizeCamelCase(actionName ?? \"\"), [actionName]);\n\n  if (!actionIsLoaded) {\n    return null;\n  }\n\n  return (\n    <>\n      <Modal onClose={() => setShowModal(false)} title={modalTitle} open={showModal}>\n        {\n          isBulkAction ? (\n            <BulkActionModalContent model={model} modelActionDetails={modelActionDetails} ids={ids} close={() => setShowModal(false)} />\n          ) : null\n          // TODO - Decide on support for non-bulk actions\n          // <PolarisAutoForm action={model[actionName]} />\n        }\n      </Modal>\n    </>\n  );\n};\n\n/**\n * Modal content for executing bulk actions\n */\nconst BulkActionModalContent = (props: { model: any; modelActionDetails: ModelActionDetails; ids: string[]; close: () => void }) => {\n  const { model, modelActionDetails, ids, close } = props;\n\n  const [hasRun, setHasRun] = React.useState(false);\n\n  // eslint-disable-next-line\n  // @ts-ignore:next-line\n  const [{ fetching, data, error }, runBulkAction] = useBulkAction(model[modelActionDetails.apiIdentifier], {});\n\n  const hasError = !!(error || (data && (data as any).success === false));\n  const errorMessage = error\n    ? error.message\n    : data && (data as any)?.success === false\n    ? (data as any)?.errors?.map((e: { message: string }) => e.message).join(\", \")\n    : \"\";\n\n  const initialMessage = useMemo(\n    () => <Text as=\"p\">{`Are you sure you want to run this action on ${ids.length} record${ids.length === 1 ? \"\" : `s`}?`}</Text>,\n    [ids.length]\n  );\n\n  const actionResultBanner = useMemo(\n    () => (hasError ? <Banner title={errorMessage} tone=\"critical\" /> : <Banner title={ActionSuccessMessage} tone=\"success\" />),\n    [hasError, errorMessage]\n  );\n\n  const runAction = useCallback(() => {\n    void runBulkAction(ids);\n    setHasRun(true);\n  }, [runBulkAction, setHasRun]);\n\n  return (\n    <>\n      <Modal.Section>\n        {fetching && <CenteredSpinner />}\n        {!fetching && (hasRun ? actionResultBanner : initialMessage)}\n      </Modal.Section>\n      <Modal.Section>\n        <div style={{ float: \"right\", paddingBottom: \"16px\" }}>\n          <ButtonGroup>\n            <Button variant=\"secondary\" onClick={close}>\n              Close\n            </Button>\n            <Button disabled={hasError || hasRun} variant=\"primary\" onClick={runAction} loading={fetching}>\n              Run\n            </Button>\n          </ButtonGroup>\n        </div>\n      </Modal.Section>\n    </>\n  );\n};\n\nconst CenteredSpinner = () => (\n  <div style={{ textAlign: \"center\" }}>\n    <Spinner accessibilityLabel=\"Spinner example\" size=\"large\" />\n  </div>\n);\nconst ActionSuccessMessage = `Action completed successfully`;\n"]}
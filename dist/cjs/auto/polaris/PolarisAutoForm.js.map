{"version":3,"file":"PolarisAutoForm.js","sourceRoot":"","sources":["../../../../src/auto/polaris/PolarisAutoForm.tsx"],"names":[],"mappings":";;;;;;AAEA,8CAA2G;AAC3G,kDAA0B;AAC1B,mDAAsD;AACtD,6DAAuD;AAGvD,gDAAsE;AACtE,qEAA+D;AAC/D,+DAAyD;AAElD,MAAM,mBAAmB,GAAG,GAAG,EAAE,CAAC,CACvC;IACE,8BAAC,6BAAmB,IAAC,IAAI,EAAC,QAAQ,GAAG;IACrC,8BAAC,0BAAgB,OAAG,CACnB,CACJ,CAAC;AALW,QAAA,mBAAmB,uBAK9B;AAEF;;GAEG;AACI,MAAM,eAAe,GAAG,CAM7B,KAAqF,EACrF,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IAEpH,6EAA6E;IAC7E,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,IAAA,+BAAiB,EAAC,MAAM,CAAC,CAAC;IAEjG,6EAA6E;IAC7E,MAAM,MAAM,GAAG,IAAA,2BAAa,EAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAE9C,sCAAsC;IACtC,MAAM,EACJ,MAAM,EACN,OAAO,EACP,KAAK,EAAE,SAAS,EAChB,QAAQ,EAAE,YAAY,EACtB,mBAAmB,GACpB,GAAG,IAAA,gCAAa,EAAC,MAAM,EAAE;QACxB,MAAM,EAAE,KAAK,CAAC,MAAM;QACpB,QAAQ,EAAE,IAAA,mCAAqB,EAAC,QAAQ,CAAC;QACzC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;KACnC,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG,SAAS,IAAI,aAAa,CAAC;IACzC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;QACpC,OAAO,8BAAC,4CAAmB,IAAC,KAAK,EAAE,KAAK,GAAI,CAAC;KAC9C;IAED,IAAI,mBAAmB,EAAE;QACvB,OAAO,KAAK,CAAC,cAAc,IAAI,8BAAC,gBAAM,IAAC,KAAK,EAAE,SAAS,QAAQ,EAAE,IAAI,gBAAgB,EAAE,MAAM,EAAC,SAAS,GAAG,CAAC;KAC5G;IAED,OAAO,CACL,8BAAC,cAAI,OAAK,IAAI,EAAE,QAAQ,EAAE,MAAM;QAC9B,8BAAC,oBAAU;YACR,gBAAgB,IAAI,8BAAC,2BAAmB,OAAG;YAC3C,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAC7B,8BAAC,sCAAgB,IAAC,GAAG,EAAE,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,GAAI,CAC3F,CAAC;YACF,8BAAC,gBAAM,IAAC,OAAO,EAAE,YAAY,EAAE,MAAM,QAAC,OAAO,EAAE,MAAM,IACjD,KAAK,CAAC,WAAmB,IAAI,QAAQ,CAChC,CACE,CACR,CACR,CAAC;AACJ,CAAC,CAAC;AAnDW,QAAA,eAAe,mBAmD1B","sourcesContent":["import type { ActionFunction } from \"@gadgetinc/api-client-core\";\nimport type { FormProps } from \"@shopify/polaris\";\nimport { Banner, Button, Form, FormLayout, SkeletonBodyText, SkeletonDisplayText } from \"@shopify/polaris\";\nimport React from \"react\";\nimport { useActionMetadata } from \"../../metadata.js\";\nimport { useActionForm } from \"../../useActionForm.js\";\nimport type { OptionsType } from \"../../utils\";\nimport type { AutoFormProps } from \"../AutoForm\";\nimport { useFormFields, useValidationResolver } from \"../AutoForm.js\";\nimport { PolarisErrorDisplay } from \"./PolarisErrorDisplay.js\";\nimport { PolarisFormInput } from \"./PolarisFormInput.js\";\n\nexport const PolarisFormSkeleton = () => (\n  <>\n    <SkeletonDisplayText size=\"medium\" />\n    <SkeletonBodyText />\n  </>\n);\n\n/**\n * Renders a form for an action on a model automatically using Polaris\n */\nexport const PolarisAutoForm = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"]\n>(\n  props: AutoFormProps<GivenOptions, SchemaT, ActionFunc, Options> & Partial<FormProps>\n) => {\n  const { action, include: _include, exclude: _exclude, fields: _fields, submitLabel: _submitLabel, ...rest } = props;\n\n  // fetch metadata describing this actions inputs and outputs from the backend\n  const { metadata, fetching: fetchingMetadata, error: metadataError } = useActionMetadata(action);\n\n  // filter down the fields to render only what we want to render for this form\n  const fields = useFormFields(metadata, props);\n\n  // setup the form state for the action\n  const {\n    submit,\n    control,\n    error: formError,\n    fetching: formFetching,\n    submissionCompleted,\n  } = useActionForm(action, {\n    record: props.record,\n    resolver: useValidationResolver(metadata),\n    send: fields.map(([path]) => path),\n  });\n\n  const error = formError ?? metadataError;\n  if (error && !error.validationErrors) {\n    return <PolarisErrorDisplay error={error} />;\n  }\n\n  if (submissionCompleted) {\n    return props.successContent ?? <Banner title={`Saved ${metadata?.name} successfully.`} status=\"success\" />;\n  }\n\n  return (\n    <Form {...rest} onSubmit={submit}>\n      <FormLayout>\n        {fetchingMetadata && <PolarisFormSkeleton />}\n        {fields.map(([path, field]) => (\n          <PolarisFormInput key={field.apiIdentifier} path={path} field={field} control={control} />\n        ))}\n        <Button loading={formFetching} submit onClick={submit}>\n          {(props.submitLabel as any) ?? \"Submit\"}\n        </Button>\n      </FormLayout>\n    </Form>\n  );\n};\n"]}
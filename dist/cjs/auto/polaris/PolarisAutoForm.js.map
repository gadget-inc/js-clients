{"version":3,"file":"PolarisAutoForm.js","sourceRoot":"","sources":["../../../../src/auto/polaris/PolarisAutoForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { ActionFunction } from \"@gadgetinc/api-client-core\";\nimport type { FormProps } from \"@shopify/polaris\";\nimport { Banner, Button, Form, FormLayout, SkeletonBodyText, SkeletonDisplayText } from \"@shopify/polaris\";\nimport React from \"react\";\nimport { useActionMetadata } from \"../../metadata.js\";\nimport { useActionForm } from \"../../useActionForm.js\";\nimport type { OptionsType } from \"../../utils.js\";\nimport type { AutoFormProps } from \"../AutoForm.js\";\nimport { useFormFields, useValidationResolver } from \"../AutoForm.js\";\nimport { PolarisErrorDisplay } from \"./PolarisErrorDisplay.js\";\nimport { PolarisFormInput } from \"./PolarisFormInput.js\";\nimport { AutoFormMetadataContext } from \"../AutoFormContext.js\";\nimport { FormProvider } from \"react-hook-form\";\n\nexport const PolarisFormSkeleton = () => (\n  <>\n    <SkeletonDisplayText size=\"medium\" />\n    <SkeletonBodyText />\n  </>\n);\n\n/**\n * Renders a form for an action on a model automatically using Polaris\n */\nexport const PolarisAutoForm = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"]\n>(\n  //polaris form props also take an 'action' property, which we need to omit here. \n  props: AutoFormProps<GivenOptions, SchemaT, ActionFunc, Options> & Omit<Partial<FormProps>, 'action'>\n) => {\n  const { action, include: _include, exclude: _exclude, fields: _fields, submitLabel: _submitLabel, record, findBy, ...rest } = props;\n\n  // fetch metadata describing this actions inputs and outputs from the backend\n  const { metadata, fetching: fetchingMetadata, error: metadataError } = useActionMetadata(action);\n\n  // filter down the fields to render only what we want to render for this form\n  const fields = useFormFields(metadata, props);\n\n  // setup the form state for the action\n  const {\n    submit,\n    error: formError,\n    formState: {isSubmitSuccessful, isLoading},\n    originalFormMethods,\n  } = useActionForm(action, {\n    defaultValues: { [action.modelApiIdentifier]: record },\n    findBy,\n    resolver: useValidationResolver(metadata),\n    send: fields.map(([path]) => path),\n  });\n\n  console.log(\"form data...\", originalFormMethods.getValues())\n\n  const error = formError ?? metadataError;\n  if (error && !(error as any).valiationErrors) {\n    return <PolarisErrorDisplay error={error} />;\n  }\n\n  if (isSubmitSuccessful) {\n    return props.successContent ?? <Banner title={`Saved ${metadata?.name} successfully.`} tone=\"success\" />;\n  }\n\n  if(fetchingMetadata) return (\n    <Form {...rest} onSubmit={submit}>\n      <FormLayout>\n        <PolarisFormSkeleton />;\n      </FormLayout>\n    </Form>\n  )\n\n  if(props.children) return (\n    <AutoFormMetadataContext.Provider value={{ submit, metadata }}>\n      <FormProvider {...originalFormMethods}>\n        <Form {...rest} onSubmit={submit}>\n          <FormLayout>\n            {props.children}\n          </FormLayout>\n        </Form>\n      </FormProvider>\n    </AutoFormMetadataContext.Provider> \n  )\n\n\n  return (\n    <AutoFormMetadataContext.Provider value={{ submit, metadata }}>\n      <FormProvider {...originalFormMethods}>\n        <Form {...rest} onSubmit={submit}>\n          <FormLayout>\n            {fields.map(([path, field]) => (\n              <PolarisFormInput key={field.apiIdentifier} path={path} field={field} control={originalFormMethods.control} />\n            ))}\n            <Button loading={isLoading} submit onClick={async () => {submit}}>\n              {(props.submitLabel as any) ?? \"Submit\"}\n            </Button>\n          </FormLayout>\n        </Form>\n      </FormProvider>\n    </AutoFormMetadataContext.Provider>\n  );\n};\n"]}
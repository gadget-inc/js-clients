{"version":3,"file":"PolarisAutoTable.js","sourceRoot":"","sources":["../../../../src/auto/polaris/PolarisAutoTable.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { FindManyFunction, GadgetRecord, SortOrder } from \"@gadgetinc/api-client-core\";\nimport type { IndexTableProps } from \"@shopify/polaris\";\nimport {\n  Banner,\n  BlockStack,\n  Box,\n  DataTable,\n  EmptySearchResult,\n  IndexFilters,\n  IndexTable,\n  SkeletonBodyText,\n  useSetIndexFiltersMode,\n} from \"@shopify/polaris\";\nimport pluralize from \"pluralize\";\nimport type { ReactNode } from \"react\";\nimport React, { useCallback, useMemo } from \"react\";\nimport type { TableColumn, TableRow } from \"../../use-table/types.js\";\nimport { useTable } from \"../../useTable.js\";\nimport type { ColumnValueType, OptionsType } from \"../../utils.js\";\nimport type { AutoTableProps } from \"../AutoTable.js\";\nimport { AutoTableContext } from \"../AutoTableContext.js\";\nimport { validateAutoTableProps } from \"../AutoTableValidators.js\";\nimport type { BulkActionOption } from \"../hooks/useTableBulkActions.js\";\nimport { useTableBulkActions } from \"../hooks/useTableBulkActions.js\";\nimport { PolarisAutoBulkActionModal } from \"./PolarisAutoBulkActionModal.js\";\nimport { PolarisAutoTableCellRenderer } from \"./tableCells/PolarisAutoTableCellRenderer.js\";\n\nconst PolarisSkeletonTable = (props: { columns: number }) => {\n  const count = Array.from(Array(props.columns));\n  return (\n    <DataTable\n      columnContentTypes={count.map(() => \"text\")}\n      headings={count.map((i) => (\n        <Box width=\"100px\" key={i}>\n          <SkeletonBodyText lines={1} />\n        </Box>\n      ))}\n      rows={Array.from(Array(3)).map((_) => count.map((i) => <SkeletonBodyText key={i} lines={1} />))}\n    />\n  );\n};\nconst gadgetToPolarisDirection = (direction?: SortOrder) => {\n  if (direction === \"Ascending\") {\n    return \"ascending\";\n  } else if (direction === \"Descending\") {\n    return \"descending\";\n  }\n  return undefined;\n};\n\nconst getColumnIndex = (columns: TableColumn[], apiIdentifier: string | undefined) => {\n  return columns.findIndex((column) => column.field === apiIdentifier);\n};\n\n/**\n * Renders a table of records from the backend automatically for a given model using Polaris\n */\nexport const PolarisAutoTable = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n  Options extends FinderFunction[\"optionsType\"]\n>(\n  props: AutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>\n) => {\n  const { model } = props;\n\n  validateAutoTableProps(props.model);\n\n  const componentKey = `${[model.findMany.namespace, model.findMany.modelApiIdentifier].join(\"_\")}AutoTable`;\n\n  return <PolarisAutoTableComponent key={componentKey} {...props} />;\n};\n\nconst PolarisAutoTableComponent = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n  Options extends FinderFunction[\"optionsType\"]\n>(\n  props: AutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>\n) => {\n  const { onClick } = props;\n  const searchable = props.searchable ?? true;\n  const paginate = props.paginate ?? true;\n\n  const [methods, refresh] = useTable<GivenOptions, SchemaT, FinderFunction, Options>(props.model, {\n    select: props.select,\n    columns: props.columns,\n    excludeColumns: props.excludeColumns,\n    pageSize: props.pageSize,\n    live: props.live,\n    initialSort: props.initialSort,\n    filter: props.filter,\n    search: props.searchValue,\n  } as any);\n\n  const { columns, rows, page, fetching, error, search, selection, sort, metadata, data: rawRecords } = methods;\n\n  const handleColumnSort = (headingIndex: number) => {\n    if (columns) {\n      const columnApiIdentifier = columns[headingIndex].field;\n      sort.handleColumnSort(columnApiIdentifier);\n    }\n  };\n\n  const onClickCallback = useCallback(\n    (row: TableRow, rawRecord: GadgetRecord<any>) => {\n      return () => onClick?.(row, rawRecord);\n    },\n    [onClick]\n  );\n\n  const { mode, setMode } = useSetIndexFiltersMode();\n\n  const polarisTableProps = useMemo(() => {\n    const headings = [] as unknown as IndexTableProps[\"headings\"];\n    const sortable: boolean[] = [];\n\n    if (columns) {\n      for (const column of columns) {\n        headings.push({ title: column.header });\n        sortable.push(column.sortable);\n      }\n    }\n\n    return { headings, sortable };\n  }, [columns]);\n\n  const { bulkActionOptions, selectedModelActionDetails } = useTableBulkActions({\n    model: props.model,\n    actions: props.actions,\n    excludeActions: props.excludeActions,\n  });\n\n  const resourceName = props.resourceName ?? {\n    singular: metadata?.name ?? \"\",\n    plural: metadata ? pluralize(metadata.name) : \"\",\n  };\n\n  const selectedRows = (rows ?? []).filter((row) => selection.recordIds.includes(row.id as string));\n\n  const promotedBulkActions = useMemo(\n    () => bulkActionOptions.filter((option) => option.promoted).map(bulkActionOptionMapper(selectedRows, selection.clearAll)),\n    [bulkActionOptions, selectedRows]\n  );\n\n  const bulkActions = useMemo(\n    () => bulkActionOptions.filter((option) => !option.promoted).map(bulkActionOptionMapper(selectedRows, selection.clearAll)),\n    [bulkActionOptions, selectedRows]\n  );\n\n  if (!error && ((fetching && !rows) || !columns)) {\n    return <PolarisSkeletonTable columns={3} />;\n  }\n\n  return (\n    <AutoTableContext.Provider value={[methods, refresh]}>\n      <BlockStack>\n        <PolarisAutoBulkActionModal\n          model={props.model}\n          modelActionDetails={selectedModelActionDetails}\n          ids={selection.recordIds}\n          selectedRows={selectedRows}\n          clearSelection={selection.clearAll}\n        />\n        {searchable && (\n          <IndexFilters\n            mode={mode}\n            setMode={setMode}\n            appliedFilters={[]}\n            filters={[]}\n            onClearAll={() => undefined}\n            tabs={[]}\n            canCreateNewView={false}\n            selected={1}\n            loading={fetching}\n            cancelAction={{ onAction: () => search.clear() }}\n            disabled={!!error}\n            // Search\n            queryValue={search.value}\n            onQueryChange={search.set}\n            onQueryClear={search.clear}\n          />\n        )}\n\n        {error && (\n          <Box paddingBlockStart=\"200\" paddingBlockEnd=\"1000\">\n            <Banner title={error.message} tone=\"critical\" />\n          </Box>\n        )}\n\n        <IndexTable\n          selectedItemsCount={selection.recordIds.length}\n          {...disablePaginatedSelectAllButton}\n          onSelectionChange={selection.onSelectionChange}\n          {...polarisTableProps}\n          promotedBulkActions={promotedBulkActions.length ? promotedBulkActions : undefined}\n          bulkActions={bulkActions.length ? bulkActions : undefined}\n          resourceName={resourceName}\n          emptyState={props.emptyState ?? <EmptySearchResult title={`No ${resourceName.plural} yet`} description={\"\"} withIllustration />}\n          loading={fetching}\n          hasMoreItems={page.hasNextPage}\n          itemCount={\n            error\n              ? 1 // Don't show the empty state if there's an error\n              : rows?.length ?? 0\n          }\n          pagination={\n            paginate\n              ? {\n                  hasNext: page.hasNextPage,\n                  hasPrevious: page.hasPreviousPage,\n                  onNext: page.goToNextPage,\n                  onPrevious: page.goToPreviousPage,\n                }\n              : undefined\n          }\n          sortDirection={gadgetToPolarisDirection(sort.direction)}\n          sortColumnIndex={columns ? getColumnIndex(columns, sort.column) : undefined}\n          onSort={(headingIndex) => handleColumnSort(headingIndex)}\n          selectable={props.selectable === undefined ? bulkActionOptions.length !== 0 : props.selectable}\n          lastColumnSticky={props.lastColumnSticky}\n          hasZebraStriping={props.hasZebraStriping}\n          condensed={props.condensed}\n        >\n          <PolarisIndexTableCellStyleOverride />\n\n          {rows &&\n            columns &&\n            rows.map((row, index) => {\n              const rawRecord = rawRecords?.[index];\n              return (\n                <IndexTable.Row\n                  key={row.id as string}\n                  id={row.id as string}\n                  position={index}\n                  onClick={onClick ? onClickCallback(row, rawRecord) : undefined}\n                  selected={selection.recordIds.includes(row.id as string)}\n                >\n                  {columns.map((column) => (\n                    <IndexTable.Cell key={column.identifier} className=\"Gadget_PolarisAutoTable_IndexTableCell\">\n                      <div style={{ ...defaultCellStyle, ...column.style }}>\n                        {column.type == \"CustomRenderer\" ? (\n                          (row[column.identifier] as ReactNode)\n                        ) : (\n                          <PolarisAutoTableCellRenderer column={column} value={row[column.identifier] as ColumnValueType} />\n                        )}\n                      </div>\n                    </IndexTable.Cell>\n                  ))}\n                </IndexTable.Row>\n              );\n            })}\n        </IndexTable>\n      </BlockStack>\n      <PolarisIndexTableCellStyleOverride />\n    </AutoTableContext.Provider>\n  );\n};\n\nconst defaultCellStyle: React.CSSProperties = {\n  maxWidth: \"200px\",\n  padding: \"0.375rem\",\n  overflow: \"hidden\",\n  textOverflow: \"ellipsis\",\n  whiteSpace: \"nowrap\",\n} as const;\n\nconst PolarisIndexTableCellStyleOverride = () => {\n  // !important to override the default padding from a class that gets applied afterwards\n  const css = /*css*/ `\n  .Gadget_PolarisAutoTable_IndexTableCell {\n    padding: 0px !important; \n  }\n`;\n  return <style>{css}</style>;\n};\n\nconst disablePaginatedSelectAllButton = {\n  paginatedSelectAllActionText: \"\", // Empty string to hide the select all button. We only allow selection on the current page\n};\n\nconst bulkActionOptionMapper = (selectedRows: TableRow[], clearSelection: () => void) => {\n  return (option: BulkActionOption) => ({\n    id: option.humanizedName,\n    destructive: \"isDeleter\" in option ? option.isDeleter : false,\n    content: option.humanizedName,\n    onAction: option.action\n      ? () => {\n          option.action?.(selectedRows);\n          clearSelection();\n        }\n      : option.selectModelAction ?? (() => undefined),\n  });\n};\n"]}
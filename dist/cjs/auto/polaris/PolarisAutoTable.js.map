{"version":3,"file":"PolarisAutoTable.js","sourceRoot":"","sources":["../../../../src/auto/polaris/PolarisAutoTable.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { FindManyFunction } from \"@gadgetinc/api-client-core\";\nimport type { IndexTableProps } from \"@shopify/polaris\";\nimport {\n  Banner,\n  BlockStack,\n  Box,\n  DataTable,\n  EmptySearchResult,\n  IndexFilters,\n  IndexTable,\n  SkeletonBodyText,\n  useSetIndexFiltersMode,\n} from \"@shopify/polaris\";\nimport pluralize from \"pluralize\";\nimport React, { useCallback, useMemo } from \"react\";\nimport { useTable } from \"../../useTable.js\";\nimport type { ColumnValueType, OptionsType } from \"../../utils.js\";\nimport type { AutoTableProps } from \"../AutoTable.js\";\nimport { PolarisAutoTableCellRenderer } from \"./tableCells/PolarisAutoTableCellRenderer.js\";\n\nconst PolarisSkeletonTable = (props: { columns: number }) => {\n  const count = Array.from(Array(props.columns));\n  return (\n    <DataTable\n      columnContentTypes={count.map(() => \"text\")}\n      headings={count.map((i) => (\n        <Box width=\"100px\" key={i}>\n          <SkeletonBodyText lines={1} />\n        </Box>\n      ))}\n      rows={Array.from(Array(3)).map((_) => count.map((i) => <SkeletonBodyText key={i} lines={1} />))}\n    />\n  );\n};\n\n/**\n * Renders a table of records from the backend automatically for a given model using Polaris\n */\nexport const PolarisAutoTable = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n  Options extends FinderFunction[\"optionsType\"]\n>(\n  props: AutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>\n) => {\n  const { onClick } = props;\n\n  const [{ rows, columns, metadata, fetching, error, page, search }, refresh] = useTable<GivenOptions, SchemaT, FinderFunction, Options>(\n    props.model,\n    {\n      select: props.select,\n      columns: props.columns,\n      pageSize: props.pageSize,\n      live: props.live,\n    } as any\n  );\n\n  const onClickCallback = useCallback(\n    (row: Record<string, ColumnValueType>) => {\n      return () => onClick?.(row);\n    },\n    [onClick]\n  );\n\n  const { mode, setMode } = useSetIndexFiltersMode();\n\n  const polarisTableProps = useMemo(() => {\n    const headings = [] as unknown as IndexTableProps[\"headings\"];\n    const sortable: boolean[] = [];\n\n    if (columns) {\n      for (const column of columns) {\n        headings.push({ title: column.name });\n        sortable.push(column.sortable);\n      }\n    }\n\n    return { headings, sortable };\n  }, [columns]);\n\n  if (!error && ((fetching && !rows) || !columns)) {\n    return <PolarisSkeletonTable columns={3} />;\n  }\n\n  const resourceName = {\n    singular: metadata?.name ?? \"\",\n    plural: metadata ? pluralize(metadata.name) : \"\",\n  };\n\n  return (\n    <BlockStack>\n      <IndexFilters\n        filteringAccessibilityTooltip=\"Search and filter (F)\"\n        mode={mode}\n        setMode={setMode}\n        appliedFilters={[]}\n        filters={[]}\n        onClearAll={() => undefined}\n        tabs={[]}\n        selected={1}\n        loading={fetching}\n        cancelAction={{\n          onAction: () => search.clear(),\n        }}\n        // Search\n        queryValue={search.value}\n        onQueryChange={search.set}\n        onQueryClear={search.clear}\n        disabled={!!error}\n      />\n\n      {error && (\n        <Box paddingBlockStart=\"200\" paddingBlockEnd=\"1000\">\n          <Banner title={error.message} tone=\"critical\" />\n        </Box>\n      )}\n\n      <IndexTable\n        {...polarisTableProps}\n        resourceName={resourceName}\n        emptyState={<EmptySearchResult title={`No ${resourceName.plural} yet`} description={\"\"} withIllustration />}\n        loading={fetching}\n        hasMoreItems={page.hasNextPage}\n        itemCount={\n          error\n            ? 1 // Don't show the empty state if there's an error\n            : rows?.length ?? 0\n        }\n        pagination={{\n          hasNext: page.hasNextPage,\n          hasPrevious: page.hasPreviousPage,\n          onNext: page.goToNextPage,\n          onPrevious: page.goToPreviousPage,\n        }}\n      >\n        {rows &&\n          columns &&\n          rows.map((row, index) => (\n            <IndexTable.Row\n              key={row.id as string}\n              id={row.id as string}\n              position={index}\n              onClick={onClick ? onClickCallback(row) : undefined}\n            >\n              {columns.map((column) => (\n                <IndexTable.Cell key={column.apiIdentifier}>\n                  <div style={{ maxWidth: \"200px\" }}>\n                    <PolarisAutoTableCellRenderer column={column} value={row[column.apiIdentifier]} />\n                  </div>\n                </IndexTable.Cell>\n              ))}\n            </IndexTable.Row>\n          ))}\n      </IndexTable>\n    </BlockStack>\n  );\n};\n"]}
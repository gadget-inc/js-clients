{"version":3,"file":"AutoForm.js","sourceRoot":"","sources":["../../../src/auto/AutoForm.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ActionFunction, GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport type { ReactNode } from \"react\";\nimport { useMemo } from \"react\";\nimport type { RecordIdentifier } from \"src/use-action-form/types.js\";\nimport type { GadgetObjectFieldConfig } from \"../internal/gql/graphql.js\";\nimport type { ActionMetadata, FieldMetadata } from \"../metadata.js\";\nimport { filterFieldList, useActionMetadata } from \"../metadata.js\";\nimport { useActionForm } from \"../useActionForm.js\";\nimport { get, type OptionsType } from \"../utils.js\";\nimport { validationSchema } from \"../validationSchema.js\";\n\n/** The props that any <AutoForm/> component accepts */\nexport type AutoFormProps<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"]\n> = {\n  /** Which action this fom will run on submit */\n  action: ActionFunc;\n  /** How to find the record this form will act on */\n  findBy?: RecordIdentifier;\n  /** A record for this form to act on */\n  record?: GadgetRecord<any>;\n  /** An allowlist of fields to render within the form. Only these fields will be rendered as inputs. */\n  include?: string[];\n  /** An allowlist of fields to render within the form. Only these fields will be rendered as inputs. */\n  fields?: string[];\n  /** A denylist of fields to render within the form. Every field except these fields will be rendered as inputs. */\n  exclude?: string[];\n  /** The label to use for the submit button at the bottom of the form */\n  submitLabel?: ReactNode;\n  /** What to show the user once the form has been submitted successfully */\n  successContent?: ReactNode;\n};\n\n/**\n * React hook for getting the validation schema for a list of fields\n */\nexport const useValidationResolver = (metadata: ActionMetadata | undefined) => {\n  return useMemo(() => {\n    if (!metadata) return undefined;\n    return yupResolver(validationSchema(metadata.action.inputFields));\n  }, [metadata]);\n};\n\n/**\n * React hook for getting a list of fields to use in a form (given include/exclude options)\n */\nexport const useFormFields = (\n  metadata: ActionMetadata | undefined | null,\n  options: { include?: string[]; exclude?: string[] }\n): readonly { path: string; metadata: FieldMetadata }[] => {\n  return useMemo(() => {\n    if (!metadata) return [];\n    const objectFields = metadata.action.inputFields.filter((field) => field.configuration.__typename === \"GadgetObjectFieldConfig\");\n    const nonObjectFields = metadata.action.inputFields.filter((field) => field.configuration.__typename !== \"GadgetObjectFieldConfig\");\n\n    const includedRootLevelFields = filterFieldList(nonObjectFields, options as any).map(\n      (field) =>\n        ({\n          path: field.apiIdentifier,\n          metadata: field,\n        } as const)\n    );\n\n    const includedObjectFields = objectFields.flatMap((objectField) =>\n      filterFieldList((objectField.configuration as unknown as GadgetObjectFieldConfig).fields as any, options as any).map(\n        (innerField) =>\n          ({\n            path: `${objectField.apiIdentifier}.${innerField.apiIdentifier}`,\n            metadata: innerField,\n          } as const)\n      )\n    );\n\n    return [...includedObjectFields, ...includedRootLevelFields];\n  }, [metadata, options]);\n};\n\n/**\n * Internal React hook for sharing logic between different `AutoForm` components.\n * @internal\n */\nexport const useAutoForm = <\n  GivenOptions extends OptionsType,\n  SchemaT,\n  ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends ActionFunc[\"optionsType\"]\n>(\n  props: AutoFormProps<GivenOptions, SchemaT, ActionFunc, Options>\n) => {\n  const { action, record, findBy } = props;\n\n  const { metadata, fetching: fetchingMetadata, error: metadataError } = useActionMetadata(props.action);\n\n  // filter down the fields to render only what we want to render for this form\n  const fields = useFormFields(metadata, props);\n  const operatesWithRecordId = !!metadata?.action.operatesWithRecordIdentity;\n\n  // setup the form state for the action\n  const {\n    submit,\n    error: formError,\n    formState: { isSubmitSuccessful, isLoading, dirtyFields },\n    originalFormMethods,\n  } = useActionForm(action, {\n    defaultValues: {\n      [action.modelApiIdentifier]: record,\n      id: \"0\", // The ID value will be replaced when sending the form to use the record found by `findBy`\n    },\n    findBy,\n    resolver: useValidationResolver(metadata),\n    send: () => {\n      const fieldsToSend = fields\n        .map(({ path }) => path)\n        .filter((item) => {\n          const isDirty = get(dirtyFields, item);\n          return isDirty;\n        });\n\n      if (operatesWithRecordId) {\n        fieldsToSend.push(\"id\");\n      }\n      return fieldsToSend;\n    },\n  });\n\n  return {\n    metadata,\n    fetchingMetadata,\n    metadataError,\n    fields,\n    submit,\n    formError,\n    isSubmitSuccessful,\n    isLoading,\n    originalFormMethods,\n  };\n};\n"]}
{"version":3,"file":"AutoRichTextInput.js","sourceRoot":"","sources":["../../../../src/auto/shared/AutoRichTextInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { ForwardedRef } from \"react\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport type { Control } from \"react-hook-form\";\nimport { useFormContext } from \"react-hook-form\";\nimport { get } from \"../../utils.js\";\nimport { useStringInputController } from \"../hooks/useStringInputController.js\";\nimport { multiref } from \"../hooks/utils.js\";\n\ninterface MDXEditorMethods {\n  setMarkdown: (markdown: string) => void;\n}\n\ninterface AutoRichTextInputProps {\n  field: string;\n  control?: Control<any>;\n  editorRef?: ForwardedRef<MDXEditorMethods> | null;\n  label?: string;\n}\n\nconst AutoRichTextInput: React.FC<AutoRichTextInputProps> = (props) => {\n  const { formState } = useFormContext();\n  const { field, control, editorRef, ...rest } = props;\n  const controller = useStringInputController({ field, control });\n  const innerRef = useRef<MDXEditorMethods>(null);\n  const [isEditorLoaded, setIsEditorLoaded] = useState(false);\n  const [mdxModule, setMdxModule] = useState<any>(null);\n\n  useEffect(() => {\n    const loadEditor = async () => {\n      try {\n        const module = await import(\"@mdxeditor/editor\");\n        await import(\"@mdxeditor/editor/style.css\");\n        setMdxModule(module);\n        setIsEditorLoaded(true);\n      } catch (error) {\n        console.warn(\"Optional dependency not found, some features may not be available.\");\n      }\n    };\n\n    void loadEditor();\n  }, []);\n\n  useEffect(() => {\n    if (innerRef.current && isEditorLoaded) {\n      innerRef.current.setMarkdown(controller.value?.markdown ?? \"\");\n    }\n  }, [controller.value, isEditorLoaded]);\n\n  if (!isEditorLoaded || !mdxModule) {\n    return <div>Loading editor...</div>;\n  }\n\n  const {\n    MDXEditor,\n    BoldItalicUnderlineToggles,\n    ListsToggle,\n    CodeToggle,\n    CreateLink,\n    headingsPlugin,\n    listsPlugin,\n    quotePlugin,\n    thematicBreakPlugin,\n    markdownShortcutPlugin,\n    linkDialogPlugin,\n    diffSourcePlugin,\n    toolbarPlugin,\n    DiffSourceToggleWrapper,\n    UndoRedo,\n    BlockTypeSelect,\n    Separator,\n  } = mdxModule;\n\n  return (\n    <MDXEditor\n      plugins={[\n        headingsPlugin(),\n        listsPlugin(),\n        quotePlugin(),\n        thematicBreakPlugin(),\n        markdownShortcutPlugin(),\n        linkDialogPlugin(),\n        diffSourcePlugin({\n          diffMarkdown: get(formState.defaultValues, field)?.markdown ?? \"\",\n          viewMode: \"rich-text\",\n          readOnlyDiff: true,\n        }),\n        toolbarPlugin({\n          toolbarContents: () => (\n            <DiffSourceToggleWrapper>\n              <UndoRedo />\n              <BlockTypeSelect />\n              <Separator />\n              <BoldItalicUnderlineToggles />\n              <ListsToggle />\n              <CodeToggle />\n              <CreateLink />\n            </DiffSourceToggleWrapper>\n          ),\n        }),\n      ]}\n      contentEditableClassName=\"autoform-prose\"\n      markdown={controller.value?.markdown ?? \"\"}\n      onChange={(markdown: any) => controller.onChange({ markdown })}\n      ref={multiref(innerRef, editorRef)}\n      {...rest}\n    />\n  );\n};\n\nexport default AutoRichTextInput;\n"]}
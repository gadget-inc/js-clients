{"version":3,"file":"ShadcnAutoTableTagCell.js","sourceRoot":"","sources":["../../../../../../src/auto/shadcn/table/cells/ShadcnAutoTableTagCell.tsx"],"names":[],"mappings":";;;;AAAA,qDAA+B;AAC/B,0EAAoE;AACpE,kGAA4F;AAGrF,MAAM,0BAA0B,GAAG,CAAC,QAAwB,EAAE,EAAE;IACrE,MAAM,EAAE,eAAe,EAAE,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,KAAK,EAAE,GAAG,QAAQ,CAAC;IAErF,SAAS,OAAO,CAAC,KAA4C;QAC3D,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;QAClC,OAAO,CACL,0CACG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CACpB,oBAAC,KAAK,IAAC,GAAG,EAAE,GAAG,SAAS,IAAI,GAAG,IAAI,CAAC,EAAE,EAAE,OAAO,EAAC,SAAS,IACtD,GAAG,CACE,CACT,CAAC,CACD,CACJ,CAAC;IACJ,CAAC;IAED,SAAS,sBAAsB,CAAC,KAAqB;QACnD,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;QACxB,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,YAAY,EAAE,GAAG,IAAA,oCAAe,GAAE,CAAC;QAC1E,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,GAAG,IAAA,4DAA2B,EAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAE1F,OAAO,CACL;YACE,6BAAK,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,YAAY;gBACjD,oBAAC,eAAe;oBACd,oBAAC,OAAO;wBACL,CAAC,YAAY,IAAI,cAAc,CAAC,IAAI,CACnC,oBAAC,cAAc,IAAC,SAAS,EAAC,wCAAwC;4BAChE,oBAAC,OAAO,IAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAC,UAAU,GAAG,CAChC,CAClB;wBACD,oBAAC,cAAc,IAAC,SAAS,EAAC,mCAAmC;4BAC3D,6BAAK,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE;gCACxD,oBAAC,OAAO,IAAC,IAAI,EAAE,aAAa,EAAE,SAAS,EAAC,gBAAgB,GAAG,CACvD,CACS,CACT,CACM,CACd,CACL,CACJ,CAAC;IACJ,CAAC;IAED,OAAO,sBAAsB,CAAC;AAChC,CAAC,CAAC;AA5CW,QAAA,0BAA0B,8BA4CrC","sourcesContent":["import * as React from \"react\";\nimport { useIsOverflowed } from \"../../../hooks/useIsOverflowed.js\";\nimport { useTagsForTableCellRenderer } from \"../../../hooks/useTagsForTableCellRenderer.js\";\nimport type { ShadcnElements } from \"../../elements.js\";\n\nexport const makeShadcnAutoTableTagCell = (elements: ShadcnElements) => {\n  const { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent, Badge } = elements;\n\n  function TagList(props: { tags: string[]; tagPrefix: string }) {\n    const { tags, tagPrefix } = props;\n    return (\n      <>\n        {tags.map((tag, i) => (\n          <Badge key={`${tagPrefix}-${tag}-${i}`} variant=\"outline\">\n            {tag}\n          </Badge>\n        ))}\n      </>\n    );\n  }\n\n  function ShadcnAutoTableTagCell(props: { value: any }) {\n    const { value } = props;\n    const { isOverflowed, childElementRef, containerRef } = useIsOverflowed();\n    const { allTags, shortenedTags, hasOmittedTags } = useTagsForTableCellRenderer({ value });\n\n    return (\n      <>\n        <div style={{ maxWidth: \"100%\" }} ref={containerRef}>\n          <TooltipProvider>\n            <Tooltip>\n              {(isOverflowed || hasOmittedTags) && (\n                <TooltipContent className=\"shadcn-auto-table-cell-tooltip-content\">\n                  <TagList tags={allTags} tagPrefix=\"all-tags\" />\n                </TooltipContent>\n              )}\n              <TooltipTrigger className=\"shadcn-auto-table-tooltip-trigger\">\n                <div ref={childElementRef} style={{ width: \"fit-content\" }}>\n                  <TagList tags={shortenedTags} tagPrefix=\"shortened-tags\" />\n                </div>\n              </TooltipTrigger>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      </>\n    );\n  }\n\n  return ShadcnAutoTableTagCell;\n};\n"]}
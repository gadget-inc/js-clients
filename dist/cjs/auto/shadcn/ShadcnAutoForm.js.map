{"version":3,"file":"ShadcnAutoForm.js","sourceRoot":"","sources":["../../../../src/auto/shadcn/ShadcnAutoForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { ActionFunction } from \"@gadgetinc/api-client-core\";\nimport type { ComponentProps } from \"react\";\nimport React from \"react\";\nimport { FormProvider } from \"../../useActionForm.js\";\nimport { humanizeCamelCase, type OptionsType } from \"../../utils.js\";\nimport type { AutoFormProps } from \"../AutoForm.js\";\nimport { useAutoForm } from \"../AutoForm.js\";\nimport { validateAutoFormProps } from \"../AutoFormActionValidators.js\";\nimport { AutoFormFieldsFromChildComponentsProvider, AutoFormMetadataContext } from \"../AutoFormContext.js\";\nimport type { FormProps, ShadcnElements } from \"./elements.js\";\nimport { makeShadcnAutoInput } from \"./inputs/ShadcnAutoInput.js\";\nimport { makeShadcnAutoBelongsToForm } from \"./inputs/relationships/ShadcnAutoBelongsToForm.js\";\nimport { makeShadcnAutoHasManyForm } from \"./inputs/relationships/ShadcnAutoHasManyForm.js\";\nimport { makeShadcnAutoHasOneForm } from \"./inputs/relationships/ShadcnAutoHasOneForm.js\";\nimport { makeShadcnAutoSubmit } from \"./submit/ShadcnAutoSubmit.js\";\nimport { makeSubmitResultBanner } from \"./submit/ShadcnSubmitResultBanner.js\";\n\n/**\n * Renders a form for an action on a model automatically using Shadcn\n */\nexport const makeAutoForm = <Elements extends ShadcnElements>(elements: Elements) => {\n  const {\n    AutoInput,\n    AutoBelongsToInput,\n    AutoHasManyInput,\n    AutoRolesInput,\n    AutoEnumInput,\n    AutoJSONInput,\n    AutoDateTimePicker,\n    AutoPasswordInput,\n    AutoBooleanInput,\n    AutoEncryptedStringInput,\n    AutoStringInput,\n    AutoNumberInput,\n    AutoHiddenInput,\n    AutoIdInput,\n  } = makeShadcnAutoInput(elements);\n\n  const AutoSubmit = makeShadcnAutoSubmit(elements);\n  const { SubmitSuccessfulBanner, SubmitErrorBanner, SubmitResultBanner } = makeSubmitResultBanner(elements);\n\n  const { Form, Skeleton } = elements;\n\n  const AutoHasOneForm = makeShadcnAutoHasOneForm(elements);\n  const AutoBelongsToForm = makeShadcnAutoBelongsToForm(elements);\n  const AutoHasManyForm = makeShadcnAutoHasManyForm(elements);\n\n  function AutoForm<GivenOptions extends OptionsType, SchemaT, ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>>(\n    props: AutoFormProps<GivenOptions, SchemaT, ActionFunc> & ComponentProps<typeof Form>\n  ) {\n    const { action, findBy } = props as AutoFormProps<GivenOptions, SchemaT, ActionFunc> &\n      Omit<Partial<FormProps>, \"action\"> & { findBy: any };\n    validateAutoFormProps(props);\n\n    // Component key to force re-render when the action or findBy changes\n    const componentKey = `${action.modelApiIdentifier ?? \"\"}.${action.operationName}.${JSON.stringify(findBy)}`;\n\n    return (\n      <AutoFormFieldsFromChildComponentsProvider hasCustomFormChildren={React.Children.count(props.children) > 0}>\n        <AutoFormInner\n          key={componentKey}\n          {...(props as AutoFormProps<GivenOptions, SchemaT, ActionFunc> & Omit<Partial<FormProps>, \"action\"> & { findBy: any })}\n        />\n      </AutoFormFieldsFromChildComponentsProvider>\n    );\n  }\n\n  function AutoFormInner<\n    GivenOptions extends OptionsType,\n    SchemaT,\n    ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>\n  >(props: AutoFormProps<GivenOptions, SchemaT, ActionFunc> & ComponentProps<typeof elements.Form>) {\n    const {\n      record: _record,\n      action,\n      findBy,\n      ...rest\n    } = props as AutoFormProps<GivenOptions, SchemaT, ActionFunc> & Omit<Partial<FormProps>, \"action\"> & { findBy: any };\n\n    const {\n      metadata,\n      fetchingMetadata,\n      metadataError,\n      fields,\n      submit,\n      formError,\n      isSubmitting,\n      isSubmitSuccessful,\n      originalFormMethods,\n      isLoading,\n    } = useAutoForm(props);\n\n    const formTitle = \"title\" in props && props.title !== undefined ? props.title : humanizeCamelCase(action.operationName);\n\n    if (props.successContent && isSubmitSuccessful) {\n      return props.successContent;\n    }\n\n    if (fetchingMetadata) {\n      return (\n        <elements.Form {...rest} onSubmit={submit}>\n          <elements.Skeleton />\n        </elements.Form>\n      );\n    }\n\n    const autoFormMetadataContext: AutoFormMetadataContext = {\n      findBy,\n      submit,\n      metadata,\n      submitResult: {\n        isSuccessful: isSubmitSuccessful,\n        error: formError ?? metadataError,\n        isSubmitting,\n      },\n      model: {\n        apiIdentifier: action.modelApiIdentifier,\n        namespace: action.namespace,\n      },\n      fields,\n    };\n\n    const formContent = props.children ?? (\n      <>\n        {formTitle && <h2 className=\"text-2xl font-bold\">{formTitle}</h2>}\n        {!props.onSuccess && <SubmitSuccessfulBanner />}\n        {!props.onFailure && <SubmitErrorBanner />}\n        {!metadataError && (\n          <>\n            {fields.map(({ metadata }) => (\n              <AutoInput field={metadata.apiIdentifier} key={metadata.apiIdentifier} />\n            ))}\n            <AutoSubmit>{\"submitLabel\" in props && props.submitLabel ? props.submitLabel : \"Submit\"}</AutoSubmit>\n          </>\n        )}\n      </>\n    );\n\n    return (\n      <AutoFormMetadataContext.Provider value={autoFormMetadataContext}>\n        <FormProvider {...originalFormMethods}>\n          {isLoading && <Skeleton />}\n          <div hidden={isLoading}>\n            <Form {...rest} onSubmit={submit}>\n              {formContent}\n            </Form>\n          </div>\n        </FormProvider>\n      </AutoFormMetadataContext.Provider>\n    );\n  }\n\n  return {\n    AutoForm,\n    AutoInput,\n    AutoSubmit,\n    SubmitResultBanner,\n    SubmitSuccessfulBanner,\n    SubmitErrorBanner,\n    AutoHasOneForm,\n    AutoBelongsToForm,\n    AutoHasManyForm,\n    AutoBelongsToInput,\n    AutoHasManyInput,\n    AutoRolesInput,\n    AutoEnumInput,\n    AutoJSONInput,\n    AutoDateTimePicker,\n    AutoPasswordInput,\n    AutoBooleanInput,\n    AutoEncryptedStringInput,\n    AutoStringInput,\n    AutoNumberInput,\n    AutoIdInput,\n    AutoHiddenInput,\n  };\n};\n"]}
{"version":3,"file":"ShadcnAutoForm.js","sourceRoot":"","sources":["../../../../src/auto/shadcn/ShadcnAutoForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { ActionFunction } from \"@gadgetinc/api-client-core\";\nimport type { ComponentProps } from \"react\";\nimport React from \"react\";\nimport { FormProvider } from \"../../useActionForm.js\";\nimport { humanizeCamelCase, type OptionsType } from \"../../utils.js\";\nimport type { AutoFormProps } from \"../AutoForm.js\";\nimport { useAutoForm } from \"../AutoForm.js\";\nimport { validateAutoFormProps } from \"../AutoFormActionValidators.js\";\nimport { AutoFormFieldsFromChildComponentsProvider, AutoFormMetadataContext } from \"../AutoFormContext.js\";\nimport type { FormProps, ShadcnElements } from \"./elements.js\";\nimport { makeShadcnAutoInput } from \"./inputs/ShadcnAutoInput.js\";\nimport { makeShadcnAutoSubmit } from \"./submit/ShadcnAutoSubmit.js\";\nimport { makeSubmitResultBanner } from \"./submit/ShadcnSubmitResultBanner.js\";\n\n/**\n * Renders a form for an action on a model automatically using Shadcn\n */\nexport const makeAutoForm = <Elements extends ShadcnElements>({\n  Form,\n  Input,\n  Button,\n  Alert,\n  Skeleton,\n  AlertTitle,\n  AlertDescription,\n  Label,\n  Checkbox,\n  Badge,\n  Command,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  Calendar,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  ScrollArea,\n  ScrollBar,\n  Textarea,\n}: Elements) => {\n  const ShadcnAutoInput = makeShadcnAutoInput({\n    Input,\n    Label,\n    Button,\n    Checkbox,\n    Badge,\n    Command,\n    CommandInput,\n    CommandItem,\n    CommandList,\n    CommandEmpty,\n    CommandGroup,\n    Calendar,\n    Popover,\n    PopoverTrigger,\n    PopoverContent,\n    ScrollArea,\n    ScrollBar,\n    Textarea,\n  });\n  const ShadcnAutoSubmit = makeShadcnAutoSubmit({ Button });\n  const { ShadcnSubmitSuccessfulBanner, ShadcnSubmitErrorBanner } = makeSubmitResultBanner({\n    Alert,\n    AlertTitle,\n    AlertDescription,\n    Button,\n  });\n\n  return <GivenOptions extends OptionsType, SchemaT, ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>>(\n    props: AutoFormProps<GivenOptions, SchemaT, ActionFunc> & ComponentProps<typeof Form>\n  ) => {\n    const { action, findBy } = props as AutoFormProps<GivenOptions, SchemaT, ActionFunc> &\n      Omit<Partial<FormProps>, \"action\"> & { findBy: any };\n    validateAutoFormProps(props);\n\n    // Component key to force re-render when the action or findBy changes\n    const componentKey = `${action.modelApiIdentifier ?? \"\"}.${action.operationName}.${JSON.stringify(findBy)}`;\n\n    return (\n      <AutoFormFieldsFromChildComponentsProvider hasCustomFormChildren={React.Children.count(props.children) > 0}>\n        <ShadcnAutoFormComponent\n          key={componentKey}\n          {...(props as AutoFormProps<GivenOptions, SchemaT, ActionFunc> & Omit<Partial<FormProps>, \"action\"> & { findBy: any })}\n          elements={{ Form, Input, Button, Alert, Skeleton, AlertTitle, AlertDescription, ShadcnAutoInput, ShadcnAutoSubmit }}\n        />\n      </AutoFormFieldsFromChildComponentsProvider>\n    );\n  };\n\n  function ShadcnAutoFormComponent<\n    GivenOptions extends OptionsType,\n    SchemaT,\n    ActionFunc extends ActionFunction<GivenOptions, any, any, SchemaT, any>\n  >(\n    props: AutoFormProps<GivenOptions, SchemaT, ActionFunc> & {\n      elements: ShadcnElements;\n    } & ComponentProps<any>\n  ) {\n    const {\n      record: _record,\n      action,\n      findBy,\n      ...rest\n    } = props as AutoFormProps<GivenOptions, SchemaT, ActionFunc> & Omit<Partial<FormProps>, \"action\"> & { findBy: any };\n    const { Form, Skeleton, ShadcnAutoInput, ShadcnAutoSubmit } = props.elements;\n\n    const {\n      metadata,\n      fetchingMetadata,\n      metadataError,\n      fields,\n      submit,\n      formError,\n      isSubmitting,\n      isSubmitSuccessful,\n      originalFormMethods,\n      isLoading,\n    } = useAutoForm(props);\n\n    const formTitle = props.title === undefined ? humanizeCamelCase(action.operationName) : props.title;\n\n    if (props.successContent && isSubmitSuccessful) {\n      return props.successContent;\n    }\n\n    if (fetchingMetadata) {\n      return (\n        <Form {...rest} onSubmit={submit}>\n          <Skeleton />\n        </Form>\n      );\n    }\n\n    const autoFormMetadataContext: AutoFormMetadataContext = {\n      findBy,\n      submit,\n      metadata,\n      submitResult: {\n        isSuccessful: isSubmitSuccessful,\n        error: formError ?? metadataError,\n        isSubmitting,\n      },\n      model: {\n        apiIdentifier: action.modelApiIdentifier,\n        namespace: action.namespace,\n      },\n      fields,\n    };\n\n    const formContent = props.children ?? (\n      <>\n        {formTitle && <h2 className=\"text-2xl font-bold\">{formTitle}</h2>}\n        {!props.onSuccess && <ShadcnSubmitSuccessfulBanner />}\n        {!props.onFailure && <ShadcnSubmitErrorBanner />}\n        {!metadataError && (\n          <>\n            {fields.map(({ metadata }) => (\n              <ShadcnAutoInput field={metadata.apiIdentifier} key={metadata.apiIdentifier} />\n            ))}\n            <ShadcnAutoSubmit>{props.submitLabel ?? \"Submit\"}</ShadcnAutoSubmit>\n          </>\n        )}\n      </>\n    );\n\n    return (\n      <AutoFormMetadataContext.Provider value={autoFormMetadataContext}>\n        <FormProvider {...originalFormMethods}>\n          {isLoading && <Skeleton />}\n          <div hidden={isLoading}>\n            <Form {...rest} onSubmit={submit}>\n              {formContent}\n            </Form>\n          </div>\n        </FormProvider>\n      </AutoFormMetadataContext.Provider>\n    );\n  }\n};\n"]}
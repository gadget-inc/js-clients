{"version":3,"file":"ShadcnAutoTable.js","sourceRoot":"","sources":["../../../../src/auto/shadcn/ShadcnAutoTable.tsx"],"names":[],"mappings":"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","sourcesContent":["import { type FindManyFunction, type GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport * as React from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport type { SortState, TableColumn, TableRow } from \"../../use-table/types.js\";\nimport { SelectionType, type RecordSelection } from \"../../useSelectedRecordsController.js\";\nimport { useTable } from \"../../useTable.js\";\nimport { type ColumnValueType, type OptionsType } from \"../../utils.js\";\nimport { type AutoTableProps } from \"../AutoTable.js\";\nimport { validateAutoTableProps } from \"../AutoTableValidators.js\";\nimport { useHover } from \"../hooks/useHover.js\";\nimport { useTableBulkActions } from \"../hooks/useTableBulkActions.js\";\nimport { makeDefaultPreventedButton } from \"./ShadcnDefaultPreventedButton.js\";\nimport type { ShadcnElements } from \"./elements.js\";\nimport { makeShadcnAutoLoadingIndicator } from \"./table/ShadcnAutoLoadingIndicator.js\";\nimport { makeShadcnAutoTableBulkActionModal } from \"./table/ShadcnAutoTableBulkActionModal.js\";\nimport { makeShadcnAutoTableBulkActionSelector } from \"./table/ShadcnAutoTableBulkActionSelector.js\";\nimport { makeShadcnAutoTableColumnSortIndicator } from \"./table/ShadcnAutoTableColumnSortIndicator.js\";\nimport { makeShadcnAutoTablePagination } from \"./table/ShadcnAutoTablePagination.js\";\nimport { makeShadcnAutoTableSearch } from \"./table/ShadcnAutoTableSearch.js\";\nimport { makeShadcnAutoTableCellRenderer } from \"./table/cells/ShadcnAutoTableCellRenderer.js\";\n\nexport type ShadcnAutoTableProps<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n  Options extends FinderFunction[\"optionsType\"]\n> = AutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>;\n\n/**\n * Renders a table for a model automatically using Shadcn\n */\nexport const makeAutoTable = (elements: ShadcnElements) => {\n  const {\n    Alert,\n    AlertDescription,\n    AlertTitle,\n    Button,\n    Checkbox,\n    Label,\n    Skeleton,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n  } = elements;\n\n  const DefaultPreventedButton = makeDefaultPreventedButton(elements);\n  const allElements = { ...elements, Button: DefaultPreventedButton };\n\n  const ShadcnAutoTableCellRenderer = makeShadcnAutoTableCellRenderer(allElements);\n  const ShadcnAutoTablePagination = makeShadcnAutoTablePagination(allElements);\n  const ShadcnAutoTableSearch = makeShadcnAutoTableSearch(allElements);\n  const ShadcnAutoTableColumnSortIndicator = makeShadcnAutoTableColumnSortIndicator(allElements);\n  const ShadcnAutoTableBulkActionSelector = makeShadcnAutoTableBulkActionSelector(allElements);\n  const ShadcnAutoTableBulkActionModal = makeShadcnAutoTableBulkActionModal(allElements);\n  const ShadcnAutoLoadingIndicator = makeShadcnAutoLoadingIndicator(allElements);\n\n  function AutoTableSelectAllCheckbox(props: { selection: RecordSelection; rows: TableRow[] }) {\n    const { selection, rows } = props;\n    return (\n      <>\n        <Checkbox\n          id=\"AutoTableSelectAllCheckbox\"\n          checked={\n            selection.recordIds.length === rows?.length && rows?.length > 0\n              ? true\n              : selection.recordIds.length > 0\n              ? \"indeterminate\"\n              : false\n          }\n          className=\"inline-flex\"\n          onCheckedChange={(value) => selection.onSelectionChange(SelectionType.Page, !!value)}\n          onClick={(e) => e.stopPropagation()}\n        />\n      </>\n    );\n  }\n\n  function AutoTableColumnHeaders(props: {\n    columns: TableColumn[];\n    sort: SortState;\n    canSelectRecords?: boolean;\n    selection: RecordSelection;\n    rows: TableRow[];\n  }) {\n    const { columns, sort, canSelectRecords, selection, rows } = props;\n\n    const [isHovered, hoverProps] = useHover();\n    return (\n      <>\n        <TableRow {...hoverProps} className=\"bg-background hover:bg-muted \">\n          {canSelectRecords && (\n            <TableHead className={`sticky left-0 z-50 bg-${isHovered ? \"muted\" : \"background\"}`}>\n              <AutoTableSelectAllCheckbox selection={selection} rows={rows} />\n            </TableHead>\n          )}\n\n          {columns.map((column, i) => (\n            <AutoTableColumnHeader\n              key={column.identifier}\n              column={column}\n              sort={sort}\n              canSelectRecords={canSelectRecords}\n              isRowHovered={isHovered}\n              shouldBeSticky={i === 0}\n            />\n          ))}\n        </TableRow>\n      </>\n    );\n  }\n  function AutoTableColumnHeader(props: {\n    column: TableColumn;\n    sort: SortState;\n    canSelectRecords?: boolean;\n    shouldBeSticky?: boolean;\n    isRowHovered: boolean;\n  }) {\n    const { column, sort, canSelectRecords, shouldBeSticky, isRowHovered } = props;\n\n    const [isHovered, hoverProps] = useHover();\n    const ColumnHeaderLabel = (\n      <>\n        <Label>{column.header}</Label>\n        <ShadcnAutoTableColumnSortIndicator column={column} sortState={sort} isHovered={isHovered} />\n      </>\n    );\n\n    const stickyClass = shouldBeSticky ? `sticky left-${canSelectRecords ? \"6\" : \"0\"} z-10` : \"\";\n\n    return (\n      <>\n        <TableHead key={column.identifier} className={`${stickyClass} bg-${isRowHovered ? \"muted\" : \"background\"}`}>\n          <div className={`flex flex-row items-center gap-2 z-10 `}>\n            {column.sortable ? (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"cursor-pointer\"\n                onClick={() => (column.type === \"CustomRenderer\" ? undefined : sort.handleColumnSort(column.field))}\n                {...hoverProps}\n              >\n                {ColumnHeaderLabel}\n              </Button>\n            ) : (\n              ColumnHeaderLabel\n            )}\n          </div>\n        </TableHead>\n      </>\n    );\n  }\n  const getCellBackgroundColor = (props: { isSelected: boolean; isHovered: boolean }) => {\n    const { isHovered, isSelected } = props;\n    const isDarkMode = document.documentElement.classList.contains(\"dark\");\n    return isSelected ? `bg-muted ${isDarkMode ? \"brightness-125\" : \"brightness-95\"}` : isHovered ? \"bg-muted\" : \"bg-background\";\n  };\n\n  function AutoTableSingleRowCheckbox(props: {\n    row: TableRow;\n    isSelected: boolean;\n    toggleRecordSelection: (rowId: string) => void;\n    isHovered: boolean;\n  }) {\n    const { row, isSelected, toggleRecordSelection, isHovered } = props;\n\n    return (\n      <TableCell className={`sticky left-0 ${getCellBackgroundColor({ isSelected, isHovered })} z-10`}>\n        <Checkbox\n          className=\"inline-flex\"\n          id={`AutoTableSingleRowCheckbox-${row.id as string}`}\n          checked={isSelected}\n          onClick={(e) => {\n            toggleRecordSelection(row.id as string);\n            e.stopPropagation();\n          }}\n        />\n      </TableCell>\n    );\n  }\n\n  function AutoTableRowData(props: {\n    row: TableRow;\n    columns: TableColumn[];\n    canSelectRecords?: boolean;\n    isSelected: boolean;\n    isHovered: boolean;\n  }) {\n    const { row, columns, canSelectRecords, isSelected, isHovered } = props;\n\n    const rowComponent = useMemo(() => {\n      return (\n        <>\n          {columns.map((column, i) => {\n            const isSticky = i === 0;\n            return (\n              <TableCell\n                key={column.identifier}\n                style={column.style}\n                className={`${\n                  isSticky ? `sticky left-${canSelectRecords ? \"6\" : \"0\"} z-10` : ``\n                } max-w-[200px] overflow-hidden text-ellipsis whitespace-nowrap ${getCellBackgroundColor({ isSelected, isHovered })}`}\n              >\n                {column.type == \"CustomRenderer\" ? (\n                  (row[column.identifier] as React.ReactNode)\n                ) : (\n                  <ShadcnAutoTableCellRenderer column={column} value={row[column.identifier] as ColumnValueType} />\n                )}\n              </TableCell>\n            );\n          })}\n        </>\n      );\n    }, [canSelectRecords, columns.map((c) => c.identifier).join(\",\"), Object.values(row).join(\",\"), isSelected, isHovered]);\n    return rowComponent;\n  }\n\n  function ShadcnAutoTableComponent<\n    GivenOptions extends OptionsType,\n    SchemaT,\n    FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n    Options extends FinderFunction[\"optionsType\"]\n  >(props: ShadcnAutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>) {\n    const { onClick, searchable = true, paginate = true } = props;\n\n    const [methods, refresh] = useTable<GivenOptions, SchemaT, FinderFunction, Options>(props.model, {\n      select: props.select,\n      columns: props.columns,\n      excludeColumns: props.excludeColumns,\n      pageSize: props.pageSize,\n      live: props.live,\n      initialSort: props.initialSort,\n      filter: props.filter,\n      search: props.searchValue,\n      searchable: props.searchable,\n    } as any);\n\n    const {\n      columns,\n      rows,\n\n      page,\n      search,\n      fetching,\n      error,\n      selection,\n      sort,\n      metadata,\n      data: rawRecords,\n    } = methods;\n\n    const onClickCallback = useCallback(\n      (row: any, rawRecord: GadgetRecord<any>) => {\n        return () => onClick?.(row, rawRecord);\n      },\n      [onClick]\n    );\n\n    const { bulkActionOptions, selectedModelActionDetails } = useTableBulkActions({\n      model: props.model,\n      actions: props.actions,\n      excludeActions: props.excludeActions,\n    });\n    const canSelectRecords = props.selectable === undefined ? bulkActionOptions.length !== 0 : props.selectable;\n    const hasSelectedRecords = selection.recordIds.length > 0;\n\n    const toggleRecordSelection = useCallback(\n      (rowId: string) => {\n        if (!canSelectRecords) {\n          return;\n        }\n        selection.onSelectionChange(SelectionType.Single, !selection.recordIds.includes(rowId), rowId);\n      },\n      [selection, canSelectRecords]\n    );\n\n    if (error) {\n      return (\n        <Alert variant=\"destructive\">\n          <AlertTitle className=\"text-lg font-bold\">Error</AlertTitle>\n          <AlertDescription>{error.message ? error.message : \"Cannot load AutoTable\"}</AlertDescription>\n        </Alert>\n      );\n    }\n    if ((fetching && !rows) || !columns) {\n      return props.loadingSkeleton ?? <Skeleton />;\n    }\n\n    return (\n      <>\n        <ShadcnAutoTableBulkActionModal\n          model={props.model}\n          modelActionDetails={selectedModelActionDetails}\n          ids={selection.recordIds}\n          clearSelection={selection.clearAll}\n        />\n\n        <div className=\"flex flex-row gap-2 items-center mb-2\">\n          {searchable && search && <ShadcnAutoTableSearch search={search} />}\n          {hasSelectedRecords && (\n            <div className=\"ml-auto\">\n              <div className=\"flex flex-row ml-auto gap-2 items-center\">\n                <Label className=\"ml-2\">{`${selection.recordIds.length} selected`}</Label>\n                <ShadcnAutoTableBulkActionSelector\n                  bulkActionOptions={bulkActionOptions}\n                  selection={selection}\n                  rows={rows}\n                  rawRecords={rawRecords}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n\n        <Table className=\"w-full border-collapse\">\n          <TableHeader className=\"sticky top-0 bg-background z-20\">\n            <AutoTableColumnHeaders columns={columns} sort={sort} canSelectRecords={canSelectRecords} selection={selection} rows={rows} />\n          </TableHeader>\n          <TableBody className={`bg-background ${fetching ? \"opacity-40\" : \"\"}`}>\n            {rows?.length > 0 &&\n              rows.map((row, index) => (\n                <AutoTableRow\n                  key={row.id as string}\n                  row={row}\n                  columns={columns}\n                  canSelectRecords={canSelectRecords}\n                  toggleRecordSelection={toggleRecordSelection}\n                  onClick={onClick ? onClickCallback(row, rawRecords?.[index]) : () => toggleRecordSelection(row.id as string)}\n                  isSelected={selection.recordIds.includes(row.id as string)}\n                />\n              ))}\n          </TableBody>\n        </Table>\n\n        {rows?.length === 0 && (\n          <>{props.emptyState ?? <div className=\"h-24 text-center flex items-center justify-center\">{`No results`}</div>}</>\n        )}\n\n        <div className=\"flex flex-row gap-2 items-center justify-center mb-2\">\n          {fetching && <ShadcnAutoLoadingIndicator className=\"w-5 h-5\" />}\n          {paginate && <ShadcnAutoTablePagination page={page} />}\n        </div>\n      </>\n    );\n  }\n\n  const AutoTableRow = (props: {\n    row: TableRow;\n    columns: TableColumn[];\n    canSelectRecords?: boolean;\n    onClick?: () => void;\n    toggleRecordSelection: (rowId: string) => void;\n    isSelected: boolean;\n  }) => {\n    const { row, columns, canSelectRecords, onClick, toggleRecordSelection, isSelected } = props;\n    const [isHovered, hoverProps] = useHover();\n\n    return (\n      <TableRow\n        key={row.id as string}\n        className={`${canSelectRecords || onClick ? \"cursor-pointer\" : \"\"} `}\n        data-state={isSelected ? \"selected\" : undefined}\n        onClick={onClick}\n        {...hoverProps}\n      >\n        {canSelectRecords && (\n          <AutoTableSingleRowCheckbox\n            row={row}\n            isSelected={isSelected}\n            toggleRecordSelection={toggleRecordSelection}\n            isHovered={isHovered}\n          />\n        )}\n        <AutoTableRowData row={row} columns={columns} canSelectRecords={canSelectRecords} isSelected={isSelected} isHovered={isHovered} />\n      </TableRow>\n    );\n  };\n\n  return <\n    GivenOptions extends OptionsType,\n    SchemaT,\n    FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n    Options extends FinderFunction[\"optionsType\"]\n  >(\n    props: ShadcnAutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>\n  ) => {\n    const { model } = props;\n    validateAutoTableProps(model);\n    const componentKey = `${[model.findMany.namespace, model.findMany.modelApiIdentifier].join(\"_\")}AutoTable`;\n\n    return <ShadcnAutoTableComponent key={componentKey} {...props} />;\n  };\n};\n"]}
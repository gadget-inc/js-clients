{"version":3,"file":"ShadcnAutoTable.js","sourceRoot":"","sources":["../../../../src/auto/shadcn/ShadcnAutoTable.tsx"],"names":[],"mappings":"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","sourcesContent":["import { type FindManyFunction, type GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport pluralize from \"pluralize\";\nimport * as React from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { useTable } from \"../../useTable.js\";\nimport { type ColumnValueType, type OptionsType } from \"../../utils.js\";\nimport { type AutoTableProps } from \"../AutoTable.js\";\nimport { validateAutoTableProps } from \"../AutoTableValidators.js\";\nimport { defaultCellStyle } from \"../shared/defaultTableCellStyle.js\";\nimport type { ShadcnElements } from \"./elements.js\";\nimport { makeShadcnAutoTablePagination } from \"./table/ShadcnAutoTablePagination.js\";\nimport { makeShadcnAutoTableSearch } from \"./table/ShadcnAutoTableSearch.js\";\nimport { makeShadcnAutoTableCellRenderer } from \"./table/cells/ShadcnAutoTableCellRenderer.js\";\n\n/**\n * Renders a table for a model automatically using Shadcn\n */\nexport const makeAutoTable = (elements: ShadcnElements) => {\n  const { Alert, Skeleton, Table, TableBody, TableCell, TableHead, TableHeader, TableRow } = elements;\n\n  const ShadcnAutoTableCellRenderer = makeShadcnAutoTableCellRenderer(elements);\n  const ShadcnAutoTablePagination = makeShadcnAutoTablePagination(elements);\n  const ShadcnAutoTableSearch = makeShadcnAutoTableSearch(elements);\n\n  function ShadcnAutoTableComponent<\n    GivenOptions extends OptionsType,\n    SchemaT,\n    FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n    Options extends FinderFunction[\"optionsType\"]\n  >(props: AutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>) {\n    const { onClick, searchable = true, paginate = true } = props;\n\n    const [methods, refresh] = useTable<GivenOptions, SchemaT, FinderFunction, Options>(props.model, {\n      select: props.select,\n      columns: props.columns,\n      excludeColumns: props.excludeColumns,\n      pageSize: props.pageSize,\n      live: props.live,\n      initialSort: props.initialSort,\n      filter: props.filter,\n      search: props.searchValue,\n    } as any);\n\n    const {\n      columns,\n      rows,\n\n      page,\n      search,\n      fetching, // TODO - add a loading state\n      error, // TODO - add an error state\n      selection, // TODO - add record selection and bulk action system\n      sort, // TODO - add column sorting\n      metadata,\n      data: rawRecords, // TODO - use this to get direct record access in callbacks\n    } = methods;\n\n    const handleColumnSort = (headingIndex: number) => {\n      if (columns) {\n        const columnApiIdentifier = columns[headingIndex].field;\n        sort.handleColumnSort(columnApiIdentifier);\n      }\n    };\n\n    const onClickCallback = useCallback(\n      (row: any, rawRecord: GadgetRecord<any>) => {\n        return () => onClick?.(row, rawRecord);\n      },\n      [onClick]\n    );\n\n    const resourceName = useMemo(\n      () =>\n        props.resourceName ?? {\n          singular: metadata?.name ?? \"\",\n          plural: metadata ? pluralize(metadata.name) : \"\",\n        },\n      [props.resourceName, metadata]\n    );\n\n    if (error) {\n      return <Alert>Error</Alert>;\n    }\n    if ((fetching && !rows) || !columns) {\n      return <Skeleton />;\n    }\n\n    return (\n      <>\n        <div className=\"rounded-md border\">\n          {searchable && <ShadcnAutoTableSearch search={search} />}\n          <Table>\n            <TableHeader>\n              <TableRow>\n                {columns.map((column) => {\n                  return <TableHead key={column.identifier}>{column.header}</TableHead>;\n                })}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {rows?.length ? (\n                rows.map((row) => (\n                  <TableRow key={row.id as string} data-state={\"selected\"}>\n                    {columns.map((column) => (\n                      <TableCell key={column.identifier} style={{ ...defaultCellStyle, ...column.style }}>\n                        {column.type == \"CustomRenderer\" ? (\n                          (row[column.identifier] as React.ReactNode)\n                        ) : (\n                          <ShadcnAutoTableCellRenderer column={column} value={row[column.identifier] as ColumnValueType} />\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                    {`No ${resourceName.plural} yet`}\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n          {paginate && <ShadcnAutoTablePagination page={page} />}\n        </div>\n      </>\n    );\n  }\n\n  return <\n    GivenOptions extends OptionsType,\n    SchemaT,\n    FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n    Options extends FinderFunction[\"optionsType\"]\n  >(\n    props: AutoTableProps<GivenOptions, SchemaT, FinderFunction, Options>\n  ) => {\n    const { model } = props;\n    validateAutoTableProps(model);\n    const componentKey = `${[model.findMany.namespace, model.findMany.modelApiIdentifier].join(\"_\")}AutoTable`;\n\n    return (\n      <>\n        <ShadcnAutoTableComponent key={componentKey} {...props} />\n      </>\n    );\n  };\n};\n"]}
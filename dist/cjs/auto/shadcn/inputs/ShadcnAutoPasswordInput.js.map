{"version":3,"file":"ShadcnAutoPasswordInput.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/inputs/ShadcnAutoPasswordInput.tsx"],"names":[],"mappings":";;;;AAAA,+CAA0C;AAC1C,uDAAqD;AAErD,gEAA0D;AAC1D,iEAA+D;AAC/D,qDAA+C;AAC/C,yEAAmE;AAEnE,2FAAyF;AAEzF;;;GAGG;AACH,MAAM,2BAA2B,GAAG,UAAU,CAAC;AAE/C,SAAgB,2BAA2B,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAsD;IACtH,MAAM,cAAc,GAAG,IAAA,sEAAkC,EAAC,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IAEpF,SAAS,uBAAuB,CAAC,KAAoE;QACnG,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,wCAAmB,GAAE,CAAC;QACzC,MAAM,EAAE,IAAI,EAAE,GAAG,IAAA,sCAAgB,EAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAA,gCAAa,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QAE5D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAC,CAAC,MAAM,CAAC,CAAC;QAEpD,MAAM,YAAY,GAAG,IAAA,mBAAW,EAAC,GAAG,EAAE;YACpC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,sCAAsC;YAC/D,YAAY,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;QAEjB,OAAO,CACL,8BAAC,cAAc,OACT,KAAK,KACL,CAAC,SAAS;gBACZ,CAAC,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE;gBAC7B,CAAC,CAAC;oBACE,WAAW,EAAE,2BAA2B;oBACxC,QAAQ,EAAE,IAAI;oBACd,SAAS,EAAE,OAAO;oBAClB,MAAM,EAAE,CACN,8BAAC,MAAM,IACL,OAAO,EAAC,OAAO,EACf,IAAI,EAAC,MAAM,EACX,IAAI,EAAC,QAAQ,EACb,OAAO,EAAE,YAAY,EACrB,SAAS,EAAC,SAAS,EACnB,IAAI,EAAE,GAAG,KAAK,CAAC,KAAK,oBAAoB;wBAExC,8BAAC,yBAAU,IAAC,SAAS,EAAC,SAAS,GAAG,CAC3B,CACV;iBACF,CAAC,GACN,CACH,CAAC;IACJ,CAAC;IAED,OAAO,IAAA,wBAAS,EAAC,uBAAuB,CAAC,CAAC;AAC5C,CAAC;AA1CD,kEA0CC","sourcesContent":["import { PencilIcon } from \"lucide-react\";\nimport React, { useCallback, useState } from \"react\";\nimport type { Control } from \"../../../useActionForm.js\";\nimport { useController } from \"../../../useActionForm.js\";\nimport { useAutoFormMetadata } from \"../../AutoFormContext.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\nimport type { ShadcnElements } from \"../elements.js\";\nimport { makeShadcnAutoEncryptedStringInput } from \"./ShadcnAutoEncryptedStringInput.js\";\n\n/**\n * The salted password hash is not retrieved from the DB.\n * Regardless of the password being defined or not, this placeholder is shown as exposing an unset password is a security risk.\n */\nconst existingPasswordPlaceholder = \"********\";\n\nexport function makeShadcnAutoPasswordInput({ Input, Label, Button }: Pick<ShadcnElements, \"Input\" | \"Label\" | \"Button\">) {\n  const EncryptedInput = makeShadcnAutoEncryptedStringInput({ Input, Label, Button });\n\n  function ShadcnAutoPasswordInput(props: { field: string; control?: Control<any>; className?: string }) {\n    const { findBy } = useAutoFormMetadata();\n    const { path } = useFieldMetadata(props.field);\n    const { field: fieldProps } = useController({ name: path });\n\n    const [isEditing, setIsEditing] = useState(!findBy);\n\n    const startEditing = useCallback(() => {\n      fieldProps.onChange(\"\"); // Touch the field to mark it as dirty\n      setIsEditing(true);\n    }, [fieldProps]);\n\n    return (\n      <EncryptedInput\n        {...props}\n        {...(isEditing\n          ? { placeholder: \"Password\" }\n          : {\n              placeholder: existingPasswordPlaceholder,\n              disabled: true,\n              className: \"pr-20\",\n              suffix: (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  type=\"button\"\n                  onClick={startEditing}\n                  className=\"h-8 w-8\"\n                  role={`${props.field}EditPasswordButton`}\n                >\n                  <PencilIcon className=\"h-4 w-4\" />\n                </Button>\n              ),\n            })}\n      />\n    );\n  }\n\n  return autoInput(ShadcnAutoPasswordInput);\n}\n"]}
{"version":3,"file":"ShadcnAutoInput.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/inputs/ShadcnAutoInput.tsx"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,sDAAiD;AACjD,qDAA+C;AAC/C,yEAAmE;AAEnE,2EAAyE;AACzE,2FAAyF;AACzF,iEAA+D;AAC/D,yEAAuE;AACvE,6EAA2E;AAC3E,qEAAmE;AAE5D,MAAM,mBAAmB,GAAG,CAAC,EAClC,KAAK,EACL,KAAK,EACL,QAAQ,EACR,MAAM,GAC0D,EAAE,EAAE;IACpE,MAAM,WAAW,GAAG;QAClB,OAAO,EAAE,IAAA,4CAAqB,EAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QAChD,SAAS,EAAE,IAAA,gDAAuB,EAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QACpD,WAAW,EAAE,IAAA,oDAAyB,EAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QACxD,cAAc,EAAE,IAAA,sEAAkC,EAAC,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;QAC5E,aAAa,EAAE,IAAA,wDAA2B,EAAC,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;QACpE,YAAY,EAAE,IAAA,sDAA0B,EAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;KAC9D,CAAC;IAEF,MAAM,eAAe,GAAG,eAAK,CAAC,IAAI,CAAC,SAAS,eAAe,CAAC,KAAwC;QAClG,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAA,sCAAgB,EAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACnD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC;QAEtC,QAAQ,MAAM,CAAC,SAAS,EAAE,CAAC;YACzB,KAAK,uBAAS,CAAC,EAAE;gBACf,OAAO,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACpC,KAAK,uBAAS,CAAC,MAAM,CAAC;YACtB,KAAK,uBAAS,CAAC,KAAK,CAAC;YACrB,KAAK,uBAAS,CAAC,KAAK,CAAC;YACrB,KAAK,uBAAS,CAAC,GAAG;gBAChB,OAAO,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACtC,KAAK,uBAAS,CAAC,MAAM;gBACnB,OAAO,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACxC,KAAK,uBAAS,CAAC,eAAe;gBAC5B,OAAO,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAC3C,KAAK,uBAAS,CAAC,QAAQ;gBACrB,OAAO,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC1C,KAAK,uBAAS,CAAC,OAAO;gBACpB,OAAO,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACzC;gBACE,OAAO,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,eAAe,CAAC,WAAW,GAAG,iBAAiB,CAAC;IAChD,OAAO,IAAA,wBAAS,EAAC,eAAe,CAAC,CAAC;AACpC,CAAC,CAAC;AA1CW,QAAA,mBAAmB,uBA0C9B","sourcesContent":["import React from \"react\";\nimport { FieldType } from \"../../../metadata.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useFieldMetadata } from \"../../hooks/useFieldMetadata.js\";\nimport type { ShadcnElements } from \"../elements.js\";\nimport { makeShadcnAutoBooleanInput } from \"./ShadcnAutoBooleanInput.js\";\nimport { makeShadcnAutoEncryptedStringInput } from \"./ShadcnAutoEncryptedStringInput.js\";\nimport { makeShadcnAutoIdInput } from \"./ShadcnAutoIdInput.js\";\nimport { makeShadcnAutoNumberInput } from \"./ShadcnAutoNumberInput.js\";\nimport { makeShadcnAutoPasswordInput } from \"./ShadcnAutoPasswordInput.js\";\nimport { makeShadcnAutoTextInput } from \"./ShadcnAutoTextInput.js\";\n\nexport const makeShadcnAutoInput = ({\n  Input,\n  Label,\n  Checkbox,\n  Button,\n}: Pick<ShadcnElements, \"Input\" | \"Label\" | \"Checkbox\" | \"Button\">) => {\n  const inputMakers = {\n    idInput: makeShadcnAutoIdInput({ Input, Label }),\n    textInput: makeShadcnAutoTextInput({ Input, Label }),\n    numberInput: makeShadcnAutoNumberInput({ Input, Label }),\n    encryptedInput: makeShadcnAutoEncryptedStringInput({ Input, Label, Button }),\n    passwordInput: makeShadcnAutoPasswordInput({ Input, Label, Button }),\n    booleanInput: makeShadcnAutoBooleanInput({ Checkbox, Label }),\n  };\n\n  const ShadcnAutoInput = React.memo(function ShadcnAutoInput(props: { field: string; label?: string }) {\n    const { metadata } = useFieldMetadata(props.field);\n    const config = metadata.configuration;\n\n    switch (config.fieldType) {\n      case FieldType.Id:\n        return inputMakers.idInput(props);\n      case FieldType.String:\n      case FieldType.Email:\n      case FieldType.Color:\n      case FieldType.Url:\n        return inputMakers.textInput(props);\n      case FieldType.Number:\n        return inputMakers.numberInput(props);\n      case FieldType.EncryptedString:\n        return inputMakers.encryptedInput(props);\n      case FieldType.Password:\n        return inputMakers.passwordInput(props);\n      case FieldType.Boolean:\n        return inputMakers.booleanInput(props);\n      default:\n        return inputMakers.textInput(props);\n    }\n  });\n\n  ShadcnAutoInput.displayName = \"ShadcnAutoInput\";\n  return autoInput(ShadcnAutoInput);\n};\n"]}
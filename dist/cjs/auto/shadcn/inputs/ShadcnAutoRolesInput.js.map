{"version":3,"file":"ShadcnAutoRolesInput.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/inputs/ShadcnAutoRolesInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import { default as React, useCallback, useMemo } from \"react\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useRoleInputController } from \"../../hooks/useRoleInputController.js\";\nimport { type AutoRolesInputProps } from \"../../shared/AutoInputTypes.js\";\nimport type { ShadcnElements } from \"../elements.js\";\nimport { makeShadcnAutoComboInput } from \"./ShadcnAutoComboInput.js\";\nimport { makeSelectedRecordTags } from \"./relationships/SelectedRelatedRecordTags.js\";\n\nexport interface EnumOption {\n  label: string;\n  value: string;\n}\n\nexport const makeShadcnAutoRolesInput = ({\n  Badge,\n  Button,\n  Command,\n  CommandItem,\n  CommandInput,\n  Label,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  Checkbox,\n}: Pick<\n  ShadcnElements,\n  \"Badge\" | \"Button\" | \"Command\" | \"CommandItem\" | \"CommandList\" | \"CommandEmpty\" | \"CommandGroup\" | \"CommandInput\" | \"Label\" | \"Checkbox\"\n>) => {\n  const { SelectedRecordTags } = makeSelectedRecordTags({ Badge, Button });\n  const ShadcnComboInput = makeShadcnAutoComboInput({\n    Command,\n    CommandInput,\n    Label,\n    CommandItem,\n    CommandList,\n    CommandEmpty,\n    CommandGroup,\n    Checkbox,\n  });\n\n  function AutoRolesInput(props: AutoRolesInputProps) {\n    const { options, loading, rolesError, fieldError, selectedRoleKeys, fieldProps, metadata } = useRoleInputController(props);\n\n    const callOnChange = useCallback(\n      (newValues: string[]) => {\n        fieldProps.onChange(newValues);\n      },\n      [fieldProps]\n    );\n\n    const selectedValues = useMemo(\n      () => (selectedRoleKeys ? (selectedRoleKeys.length > 0 ? selectedRoleKeys : [selectedRoleKeys]) : []),\n      [selectedRoleKeys]\n    );\n    const selectedOptions = options.filter((option) => selectedValues.includes(option.value));\n\n    const onSelect = (record: Record<string, any>) => {\n      const existingValues = selectedOptions?.map((option) => option.value) ?? [];\n      const newValues = existingValues.includes(record.value)\n        ? existingValues.filter((value) => value !== record.value)\n        : [...existingValues, record.value];\n      callOnChange(newValues);\n    };\n\n    const roleOptions = useMemo(\n      () =>\n        options?.map((option) => ({\n          id: option.value,\n          primary: option.label,\n        })) ?? [],\n      [options]\n    );\n\n    const recordOptions = useMemo(\n      () =>\n        options?.map((option) => ({\n          id: option.value,\n          primary: option.label,\n          value: option.value,\n        })) ?? [],\n      [options]\n    );\n\n    if (rolesError) {\n      throw rolesError;\n    }\n    if (fieldError) {\n      throw fieldError;\n    }\n\n    if (loading || !options || options.length === 0) {\n      // Don't render until role options exist. There must always be at least one role option `unauthenticated`\n      return null;\n    }\n\n    return (\n      <ShadcnComboInput\n        {...props}\n        options={roleOptions}\n        path={fieldProps.name}\n        metadata={metadata}\n        selectedRecordTag={\n          selectedOptions.length ? (\n            <SelectedRecordTags\n              selectedRecords={selectedOptions}\n              optionLabel={\"label\"}\n              onRemoveRecord={(option) => {\n                onSelect({ value: option.value });\n              }}\n            />\n          ) : null\n        }\n        onSelect={onSelect}\n        isLoading={loading}\n        checkSelected={(id) => {\n          return selectedValues.includes(id);\n        }}\n        errorMessage={fieldError}\n        allowMultiple={true}\n        records={recordOptions}\n      />\n    );\n  }\n\n  return autoInput(AutoRolesInput);\n};\n"]}
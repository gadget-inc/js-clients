{"version":3,"file":"ShadcnAutoJSONInput.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/inputs/ShadcnAutoJSONInput.tsx"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAE1B,sDAAgD;AAChD,gDAAuD;AACvD,qDAA+C;AAC/C,qFAA+E;AAGxE,MAAM,uBAAuB,GAAG,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAwD,EAAE,EAAE;IACnH,SAAS,mBAAmB,CAC1B,KAIsD;QAEtD,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,IAAA,sBAAQ,GAAE,CAAC;QAC3C,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,WAAW,EAAE,GAAG,KAAK,CAAC;QACnE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,UAAU,EAAE,GAAG,IAAA,kDAAsB,EAAC,KAAK,CAAC,CAAC;QACnF,MAAM,iBAAiB,GAAG,UAAU,CAAC,QAAQ,CAAC,wBAAwB,CAAC,CAAC,CAAC,wCAAM,SAAS,EAAC,cAAc,QAAS,CAAC,CAAC,CAAC,IAAI,CAAC;QACxH,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC;QAC9C,MAAM,EAAE,GAAG,KAAK,CAAC,EAAE,IAAI,GAAG,KAAK,CAAC,KAAK,QAAQ,CAAC;QAC9C,OAAO,CACL;YACE,8BAAC,KAAK,IAAC,OAAO,EAAE,EAAE;gBACf,KAAK;;gBAAG,iBAAiB,CACpB;YACR,8BAAC,QAAQ,OACH,IAAA,6BAAkB,EAAC,UAAU,CAAC,KAC9B,IAAA,6BAAkB,EAAC,UAAU,CAAC,KAC9B,WAAW,EACf,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;oBACd,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBACnC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC7C,CAAC,EACD,EAAE,EAAE,EAAE,GACN;YACD,CAAC,SAAS,IAAI,YAAY,IAAI,qCAAG,SAAS,EAAC,sBAAsB,IAAE,iBAAiB,YAAY,EAAE,CAAK,CACpG,CACP,CAAC;IACJ,CAAC;IAED,OAAO,IAAA,wBAAS,EAAC,mBAAmB,CAAC,CAAC;AACxC,CAAC,CAAC;AAnCW,QAAA,uBAAuB,2BAmClC","sourcesContent":["import React from \"react\";\nimport type { Control } from \"react-hook-form\";\nimport { useFocus } from \"../../../useFocus.js\";\nimport { getPropsWithoutRef } from \"../../../utils.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useJSONInputController } from \"../../hooks/useJSONInputController.js\";\nimport type { ShadcnElements } from \"../elements.js\";\n\nexport const makeShadcnAutoJSONInput = ({ Label, Textarea }: Pick<ShadcnElements, \"Input\" | \"Label\" | \"Textarea\">) => {\n  function ShadcnAutoJSONInput(\n    props: {\n      field: string; // The field API identifier\n      control?: Control<any>;\n      label?: string;\n    } & Partial<React.HTMLAttributes<HTMLTextAreaElement>>\n  ) {\n    const [isFocused, focusProps] = useFocus();\n    const { field: _field, control: _control, ...restOfProps } = props;\n    const { type: _type, errorMessage, ...controller } = useJSONInputController(props);\n    const requiredIndicator = controller.metadata.requiredArgumentForInput ? <span className=\"text-red-500\">*</span> : null;\n    const label = props.label ?? controller.label;\n    const id = props.id ?? `${props.field}-input`;\n    return (\n      <div>\n        <Label htmlFor={id}>\n          {label} {requiredIndicator}\n        </Label>\n        <Textarea\n          {...getPropsWithoutRef(controller)}\n          {...getPropsWithoutRef(focusProps)}\n          {...restOfProps}\n          onChange={(e) => {\n            console.log(e.currentTarget.value);\n            controller.onChange(e.currentTarget.value);\n          }}\n          id={id}\n        />\n        {!isFocused && errorMessage && <p className=\"text-sm text-red-500\">{`Invalid JSON: ${errorMessage}`}</p>}\n      </div>\n    );\n  }\n\n  return autoInput(ShadcnAutoJSONInput);\n};\n"]}
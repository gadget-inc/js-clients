{"version":3,"file":"ShadcnAutoHasOneForm.js","sourceRoot":"","sources":["../../../../../../src/auto/shadcn/inputs/relationships/ShadcnAutoHasOneForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import { PlusCircleIcon } from \"lucide-react\";\nimport React, { useCallback } from \"react\";\nimport { useHasOneForm } from \"../../../../useHasOneForm.js\";\nimport { autoRelationshipForm } from \"../../../AutoInput.js\";\nimport { RelationshipContext } from \"../../../hooks/useAutoRelationship.js\";\nimport type { AutoRelationshipFormProps } from \"../../../interfaces/AutoRelationshipInputProps.js\";\nimport type { ShadcnElements } from \"../../elements.js\";\nimport { makeShadcnEditableOptionLabelButton } from \"./EditableOptionLabelButton.js\";\nimport { makeSearchableSingleRelatedModelRecordSelector } from \"./SearchableSingleRelatedModelRecordSelector.js\";\n\nexport const makeShadcnAutoHasOneForm = ({\n  Badge,\n  Button,\n  Command,\n  CommandItem,\n  CommandInput,\n  Label,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  Checkbox,\n  Accordion,\n  AccordionItem,\n  AccordionTrigger,\n}: Pick<\n  ShadcnElements,\n  | \"Badge\"\n  | \"Button\"\n  | \"Command\"\n  | \"CommandItem\"\n  | \"CommandInput\"\n  | \"Label\"\n  | \"CommandList\"\n  | \"CommandEmpty\"\n  | \"CommandGroup\"\n  | \"Checkbox\"\n  | \"Accordion\"\n  | \"AccordionItem\"\n  | \"AccordionTrigger\"\n>) => {\n  const SearchableSingleRelatedModelRecordSelector = makeSearchableSingleRelatedModelRecordSelector({\n    Command,\n    CommandItem,\n    CommandInput,\n    Label,\n    CommandList,\n    CommandEmpty,\n    CommandGroup,\n    Checkbox,\n  });\n  const EditableOptionLabelButton = makeShadcnEditableOptionLabelButton({ Badge, Button, Label });\n\n  function ShadcnHasOneForm(props: Omit<AutoRelationshipFormProps, \"recordFilter\">) {\n    const { field } = props;\n    const form = useHasOneForm(props);\n    const {\n      record,\n      isEditing,\n      setIsEditing,\n      pathPrefix,\n      metaDataPathPrefix,\n      hasRecord,\n      recordOption,\n      isCreatingRecord,\n      confirmEdit,\n      removeRecord,\n      relatedModelName,\n    } = form;\n\n    const clickConfirmEdit = useCallback(\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        confirmEdit();\n      },\n      [confirmEdit]\n    );\n\n    const clickRemoveRecord = useCallback(\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        removeRecord();\n      },\n      [removeRecord]\n    );\n\n    return (\n      <RelationshipContext.Provider\n        value={{ transformPath: (path) => pathPrefix + \".\" + path, transformMetadataPath: (path) => metaDataPathPrefix + \".\" + path }}\n      >\n        <div>\n          <div className=\"flex flex-row justify-between items-center\">\n            <h2 className=\"text-lg font-medium\">{relatedModelName}</h2>\n          </div>\n          {hasRecord || isCreatingRecord ? (\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              {!isEditing ? (\n                <AccordionItem value={`${pathPrefix}.${record?.id ? `update-${record.id}` : `create`}`}>\n                  <AccordionTrigger\n                    onClick={(e) => {\n                      e.preventDefault();\n                      setIsEditing(true);\n                    }}\n                  >\n                    <EditableOptionLabelButton option={recordOption} />\n                  </AccordionTrigger>\n                </AccordionItem>\n              ) : (\n                <>\n                  <div className=\"border border-gray-300 rounded-md p-3\">\n                    {props.children}\n                    <div className=\"flex justify-between p-4\">\n                      <Button variant=\"destructive\" id={`deleteButton_${metaDataPathPrefix}`} onClick={clickRemoveRecord}>\n                        Remove\n                      </Button>\n                      <Button variant=\"default\" type=\"button\" id={`confirmButton_${metaDataPathPrefix}`} onClick={clickConfirmEdit}>\n                        Confirm\n                      </Button>\n                    </div>\n                  </div>\n                </>\n              )}\n            </Accordion>\n          ) : (\n            <>\n              <EmptyFormComponent form={form} field={field} />\n            </>\n          )}\n        </div>\n      </RelationshipContext.Provider>\n    );\n  }\n\n  function EmptyFormComponent(props: { field: string; form: ReturnType<typeof useHasOneForm> }) {\n    const { field, form } = props;\n\n    if (canSelectExistingRecord) {\n      return <SearchableSingleRelatedModelRecordSelector field={field} form={form} override={{ addNewRecord: form.startCreatingRecord }} />;\n    }\n    return <CreateNewChildButton form={form} />;\n  }\n\n  function CreateNewChildButton(props: { form: ReturnType<typeof useHasOneForm> }) {\n    const { startCreatingRecord, relatedModelName } = props.form;\n    return (\n      <>\n        <Button\n          type=\"button\"\n          variant=\"default\"\n          className=\"flex gap-1 border border-gray-300 rounded-md p-2 cursor-pointer\"\n          onClick={startCreatingRecord}\n        >\n          <PlusCircleIcon className=\"w-4 h-4\" />\n          <Label className=\"text-sm font-semibold\">Add {relatedModelName}</Label>\n        </Button>\n      </>\n    );\n  }\n\n  return autoRelationshipForm(ShadcnHasOneForm);\n};\n\n/**\n * TODO - If this gets enabled fix this:\n *    - Workflow\n *      - existingSelectedRecord\n *      - removeSelection\n *      - reselectTheSameRecordInDropdown\n *      - removeSelection\n *      - send\n *    - Right now, this workflow sends null as the hasOne field value, which does nothing. It should be _unlink\n */\nconst canSelectExistingRecord = false;\n"]}
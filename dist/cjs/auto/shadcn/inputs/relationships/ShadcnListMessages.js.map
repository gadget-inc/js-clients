{"version":3,"file":"ShadcnListMessages.js","sourceRoot":"","sources":["../../../../../../src/auto/shadcn/inputs/relationships/ShadcnListMessages.tsx"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,mDAAuD;AAYhD,MAAM,sBAAsB,GAAG,CAAC,EACrC,YAAY,EACZ,WAAW,EACX,QAAQ,EACR,KAAK,GACuE,EAAE,EAAE;IAChF,SAAS,gBAAgB,CAAC,KAA2B;QACnD,MAAM,EAAE,OAAO,GAAG,kBAAkB,EAAE,GAAG,KAAK,CAAC;QAC/C,OAAO,8BAAC,YAAY,QAAE,OAAO,CAAgB,CAAC;IAChD,CAAC;IAED,SAAS,cAAc,CAAC,KAAkD;QACxE,MAAM,EAAE,OAAO,GAAG,kBAAkB,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;QACzD,OAAO,CACL,8BAAC,WAAW,IACV,WAAW,EAAE,CAAC,CAAmB,EAAE,EAAE;gBACnC,CAAC,CAAC,cAAc,EAAE,CAAC;gBACnB,CAAC,CAAC,eAAe,EAAE,CAAC;YACtB,CAAC,EACD,SAAS,EAAE,CAAC,CAAsB,EAAE,EAAE;gBACpC,IAAI,CAAC,CAAC,GAAG,KAAK,OAAO,EAAE,CAAC;oBACtB,QAAQ,EAAE,EAAE,CAAC;gBACf,CAAC;YACH,CAAC,EACD,QAAQ,EAAE,GAAG,EAAE;gBACb,QAAQ,EAAE,EAAE,CAAC;YACf,CAAC,IAEA,OAAO,CACI,CACf,CAAC;IACJ,CAAC;IAED,SAAS,sBAAsB,CAAC,KAA4B;QAC1D,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,gBAAgB,EAAE,GAAG,KAAK,CAAC;QACjF,MAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;QAE7C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,OAAO,CACL,8BAAC,WAAW,IACV,GAAG,EAAE,EAAE,EACP,EAAE,EAAE,EAAE,EACN,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,KAAK,EACZ,WAAW,EAAE,CAAC,CAAmB,EAAE,EAAE;oBACnC,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,CAAC,CAAC,eAAe,EAAE,CAAC;gBACtB,CAAC,EACD,QAAQ,EAAE,GAAG,EAAE;oBACb,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;gBACjB,CAAC,EACD,SAAS,EAAE,CAAC,CAAsB,EAAE,EAAE;oBACpC,IAAI,CAAC,CAAC,GAAG,KAAK,OAAO,EAAE,CAAC;wBACtB,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;oBACjB,CAAC;gBACH,CAAC,IAEA,aAAa,CAAC,CAAC,CAAC,CACf;gBACE,8BAAC,QAAQ,IACP,EAAE,EAAE,EAAE,EACN,OAAO,EAAE,QAAQ,EACjB,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE;wBAC1B,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;oBACjB,CAAC,GACD;gBACF,8BAAC,KAAK,IAAC,OAAO,EAAE,EAAE,EAAE,SAAS,EAAE,aAAa,IACzC,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAC7C,CACP,CACJ,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CACrB,gBAAgB,CAAC,KAAK,CAAC,CACxB,CAAC,CAAC,CAAC,CACF,KAAK,CACN,CACW,CACf,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO;QACL,gBAAgB;QAChB,sBAAsB;QACtB,eAAe,EAAf,0BAAe;QACf,cAAc;KACf,CAAC;AACJ,CAAC,CAAC;AAzFW,QAAA,sBAAsB,0BAyFjC","sourcesContent":["import React from \"react\";\nimport { getErrorMessage } from \"../../../../utils.js\";\nimport type { ShadcnElements } from \"../../elements.js\";\n\nexport interface SelectableOptionProps {\n  id: string;\n  label: React.ReactNode;\n  selected?: boolean;\n  onSelect?: (id: string) => void;\n  allowMultiple?: boolean;\n  formatOptionText?: (option: string) => React.ReactNode;\n}\n\nexport const makeShadcnListMessages = ({\n  CommandEmpty,\n  CommandItem,\n  Checkbox,\n  Label,\n}: Pick<ShadcnElements, \"CommandEmpty\" | \"CommandItem\" | \"Checkbox\" | \"Label\">) => {\n  function NoRecordsMessage(props: { message?: string }) {\n    const { message = \"No records found\" } = props;\n    return <CommandEmpty>{message}</CommandEmpty>;\n  }\n\n  function AddExtraOption(props: { message?: string; onSelect?: () => void }) {\n    const { message = \"Add extra option\", onSelect } = props;\n    return (\n      <CommandItem\n        onMouseDown={(e: React.MouseEvent) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onKeyDown={(e: React.KeyboardEvent) => {\n          if (e.key === \"Enter\") {\n            onSelect?.();\n          }\n        }}\n        onSelect={() => {\n          onSelect?.();\n        }}\n      >\n        {message}\n      </CommandItem>\n    );\n  }\n\n  function ShadcnSelectableOption(props: SelectableOptionProps) {\n    const { label, id, selected, onSelect, allowMultiple, formatOptionText } = props;\n    const className = selected ? \"bg-muted\" : \"\";\n\n    if (typeof label === \"string\") {\n      return (\n        <CommandItem\n          key={id}\n          id={id}\n          selected={selected}\n          className={className}\n          value={label}\n          onMouseDown={(e: React.MouseEvent) => {\n            e.preventDefault();\n            e.stopPropagation();\n          }}\n          onSelect={() => {\n            onSelect?.(id);\n          }}\n          onKeyDown={(e: React.KeyboardEvent) => {\n            if (e.key === \"Enter\") {\n              onSelect?.(id);\n            }\n          }}\n        >\n          {allowMultiple ? (\n            <>\n              <Checkbox\n                id={id}\n                checked={selected}\n                onCheckedChange={(_state) => {\n                  onSelect?.(id);\n                }}\n              />\n              <Label htmlFor={id} className={\"flex-1 ml-2\"}>\n                {formatOptionText ? formatOptionText(label) : label}\n              </Label>\n            </>\n          ) : formatOptionText ? (\n            formatOptionText(label)\n          ) : (\n            label\n          )}\n        </CommandItem>\n      );\n    }\n\n    return null;\n  }\n\n  return {\n    NoRecordsMessage,\n    ShadcnSelectableOption,\n    getErrorMessage,\n    AddExtraOption,\n  };\n};\n"]}
{"version":3,"file":"ShadcnAutoDateTimePicker.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/inputs/ShadcnAutoDateTimePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { type ReactNode } from \"react\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport type { ShadcnElements } from \"../elements.js\";\nimport \"./auto-date-time-input.css\";\n\n// lazy load the component to reduce the bundle size and to avoid errors importing .css files in SSR bundles\nconst ShadcnAutoDateTimeInputComponent = React.lazy(() => import(\"./ShadcnAutoDateTimeInputComponent.js\"));\n\nexport interface DatePickerProps {\n  onChange: (date: Date) => void;\n  selected: Date;\n  onSelect: (date: Date) => void;\n  initialFocus: boolean;\n  mode: \"single\" | \"range\";\n  weekStartsOn: number;\n  dayAccessibilityLabelPrefix: string;\n  onMonthChange: (month: number, year: number) => void;\n  allowRange: boolean;\n  multiMonth: boolean;\n  disableDatesBefore: Date;\n  disableDatesAfter: Date;\n  disableSpecificDates: Date[];\n  // range: Range;\n}\n\nexport const makeShadcnAutoDateTimePicker = ({\n  Button,\n  Calendar,\n  Label,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n}: Pick<ShadcnElements, \"Button\" | \"Calendar\" | \"Label\" | \"Popover\" | \"PopoverTrigger\" | \"PopoverContent\">) => {\n  // const ClearButton = (props: { onClear: () => void }) => {\n  //   return (\n  //     <div\n  //       className=\"ml-auto h-4 w-4 bg-transparent hover:opacity-30\"\n  //       onClick={(e) => {\n  //         e.stopPropagation();\n  //         props.onClear();\n  //       }}\n  //     >\n  //       <X />\n  //     </div>\n  //   );\n  // };\n\n  function ShadcnAutoDateTimePicker(props: {\n    field: string;\n    id?: string;\n    value?: Date;\n    onChange?: (value?: Date) => void;\n    error?: string;\n    includeTime?: boolean;\n    hideTimePopover?: boolean;\n    label?: ReactNode;\n    datePickerProps?: Partial<DatePickerProps>;\n    timePickerProps?: { label?: ReactNode; placeholder?: string };\n  }) {\n    return (\n      <ShadcnAutoDateTimeInputComponent {...props} shadcnElements={{ Button, Calendar, Label, Popover, PopoverTrigger, PopoverContent }} />\n    );\n\n    // const { localTz, localTime, onChange, fieldProps, metadata, fieldState } = useDateTimeField({\n    //   field: props.field,\n    //   value: props.value,\n    //   onChange: props?.onChange,\n    // });\n\n    // const value = props.value ?? fieldProps.value;\n    // const timeString = localTime ? getTimeString(getDateTimeObjectFromDate(localTime, true), true) : undefined;\n    // const config = metadata.configuration;\n\n    // const onDateChange = useCallback<Exclude<DatePickerProps[\"onChange\"], undefined>>(\n    //   (range) => {\n    //     (fieldProps || value) && copyTime(range, zonedTimeToUtc(range, localTz));\n    //     const dateOverride = value ?? new Date(fieldProps.value);\n    //     if (isValidDate(dateOverride)) {\n    //       range.setHours(dateOverride.getHours());\n    //       range.setMinutes(dateOverride.getMinutes());\n    //       range.setSeconds(dateOverride.getSeconds());\n    //       range.setMilliseconds(dateOverride.getMilliseconds());\n    //     }\n    //     onChange?.(zonedTimeToUtc(range, localTz));\n    //     fieldProps.onChange(zonedTimeToUtc(range, localTz));\n    //   },\n    //   [fieldProps, value, localTz, onChange]\n    // );\n\n    // const [isOpen, setIsOpen] = useState(false);\n\n    // const handleDateSelect = (selectedDate: Date | undefined) => {\n    //   if (selectedDate) {\n    //     onDateChange?.(selectedDate);\n    //   }\n    // };\n\n    // const handleTimeInput = (inputTimeString: string) => {\n    //   const [hours, minutes] = inputTimeString.split(\":\").map(Number);\n    //   const newDate = localTime ? new Date(localTime) : new Date();\n    //   newDate.setHours(hours);\n    //   newDate.setMinutes(minutes);\n\n    //   onChange?.(zonedTimeToUtc(newDate, localTz));\n    //   fieldProps.onChange(zonedTimeToUtc(newDate, localTz));\n    // };\n\n    // const handleClear = () => {\n    //   onChange?.(undefined);\n    //   fieldProps.onChange(undefined);\n    // };\n\n    // return (\n    //   <Popover open={isOpen} onOpenChange={setIsOpen}>\n    //     <PopoverTrigger asChild onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}>\n    //       <div>\n    //         <Label htmlFor={props.id ? `${props.id}-date` : undefined}>\n    //           {props.label ?? metadata.name ?? \"Date\"}\n    //           {metadata.requiredArgumentForInput && <ShadcnRequired>*</ShadcnRequired>}\n    //         </Label>\n    //         <Button\n    //           id={props.id ? `${props.id}-date` : undefined}\n    //           variant=\"outline\"\n    //           type=\"button\"\n    //           className={`w-full justify-start text-left font-normal ${!localTime ? \"text-muted-foreground\" : \"\"}`}\n    //         >\n    //           <CalendarIcon className=\"mr-2 h-4 w-4\" />\n    //           {localTime ? (\n    //             formatDate(localTime, props.includeTime ?? (config as GadgetDateTimeConfig).includeTime, true)\n    //           ) : (\n    //             <span className=\"opacity-50\">\n    //               {props.includeTime ?? (config as GadgetDateTimeConfig).includeTime ? \"YYYY-MM-DD hh:mm aa\" : \"YYYY-MM-DD\"}\n    //             </span>\n    //           )}\n    //           {localTime && !metadata.requiredArgumentForInput && <ClearButton onClear={handleClear} />}\n    //         </Button>\n    //         {(props.error || fieldState.error?.message) && (\n    //           <Label className=\"text-red-500\">{props.error || fieldState.error?.message}</Label>\n    //         )}\n    //       </div>\n    //     </PopoverTrigger>\n    //     <PopoverContent className=\"w-auto p-0\">\n    //       <div className=\"flex flex-row flex-nowrap\">\n    //         <div className=\"relative bg-background\">\n    //           <Calendar\n    //             mode=\"single\"\n    //             defaultMonth={localTime}\n    //             selected={localTime}\n    //             onSelect={handleDateSelect}\n    //             initialFocus\n    //             classNames={{\n    //               month_grid: \"w-full\",\n    //               selected: \"bg-primary text-primary-foreground\",\n    //               nav: \"translate-y-3\",\n    //               day_button: \"w-full\",\n    //             }}\n    //           />\n    //         </div>\n    //         {(props.includeTime ?? (config as GadgetDateTimeConfig).includeTime) && (\n    //           <div className=\"flex flex-col p-4 bg-white border-l\">\n    //             <Label htmlFor={props.id ? `${props.id}-time` : undefined} data-testid={props.id ? `${props.id}-time` : undefined}>\n    //               {props.timePickerProps?.label ?? \"Time\"} (HH:MM)\n    //             </Label>\n    //             <input\n    //               type=\"time\"\n    //               id={props.id ? `${props.id}-time` : undefined}\n    //               data-testid={props.id ? `${props.id}-time` : undefined}\n    //               className=\"shadcn-auto-form-time-input w-32 px-3 py-2 border rounded-md mt-2\"\n    //               value={timeString}\n    //               onChange={(e) => handleTimeInput(e.target.value)}\n    //             />\n    //           </div>\n    //         )}\n    //       </div>\n    //     </PopoverContent>\n    //   </Popover>\n    // );\n  }\n\n  ShadcnAutoDateTimePicker.displayName = \"ShadcnAutoDateTimePicker\";\n\n  return autoInput(ShadcnAutoDateTimePicker);\n};\n"]}
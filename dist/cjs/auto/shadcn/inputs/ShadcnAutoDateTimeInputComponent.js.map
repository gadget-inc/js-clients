{"version":3,"file":"ShadcnAutoDateTimeInputComponent.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/inputs/ShadcnAutoDateTimeInputComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import { CalendarIcon, X } from \"lucide-react\";\nimport React, { useCallback, useState, type ReactNode } from \"react\";\nimport { copyTime, formatDate, getDateTimeObjectFromDate, getTimeString, isValidDate, zonedTimeToUtc } from \"../../../dateTimeUtils.js\";\nimport type { GadgetDateTimeConfig } from \"../../../internal/gql/graphql.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useDateTimeField } from \"../../hooks/useDateTimeField.js\";\nimport { ShadcnRequired } from \"../ShadcnRequired.js\";\nimport type { ShadcnElements } from \"../elements.js\";\nimport \"./auto-date-time-input.css\";\n\n// export interface Range {\n//   start: Date;\n//   end: Date;\n// }\n\ninterface DateTimeInputProps {\n  field: string;\n  id?: string;\n  value?: Date;\n  onChange?: (value?: Date) => void;\n  error?: string;\n  includeTime?: boolean;\n  hideTimePopover?: boolean;\n  label?: ReactNode;\n  datePickerProps?: Partial<DatePickerProps>;\n  timePickerProps?: { label?: ReactNode; placeholder?: string };\n}\n\nexport interface DatePickerProps {\n  onChange: (date: Date) => void;\n  selected: Date;\n  onSelect: (date: Date) => void;\n  initialFocus: boolean;\n  mode: \"single\" | \"range\";\n  weekStartsOn: number;\n  dayAccessibilityLabelPrefix: string;\n  onMonthChange: (month: number, year: number) => void;\n  allowRange: boolean;\n  multiMonth: boolean;\n  disableDatesBefore: Date;\n  disableDatesAfter: Date;\n  disableSpecificDates: Date[];\n  // range: Range;\n}\n\nconst ClearButton = (props: { onClear: () => void }) => {\n  return (\n    <div\n      className=\"ml-auto h-4 w-4 bg-transparent hover:opacity-30\"\n      onClick={(e) => {\n        e.stopPropagation();\n        props.onClear();\n      }}\n    >\n      <X />\n    </div>\n  );\n};\n\ntype DateTimeShadcnElements = {\n  shadcnElements: Pick<ShadcnElements, \"Button\" | \"Calendar\" | \"Label\" | \"Popover\" | \"PopoverTrigger\" | \"PopoverContent\">;\n};\n\nconst ShadcnAutoDateTimeInputComponent = autoInput<DateTimeInputProps & DateTimeShadcnElements>(\n  (\n    props: DateTimeInputProps & DateTimeShadcnElements\n    //   {\n    //   // field: string;\n    //   // id?: string;\n    //   // value?: Date;\n    //   // onChange?: (value?: Date) => void;\n    //   // error?: string;\n    //   // includeTime?: boolean;\n    //   // hideTimePopover?: boolean;\n    //   // label?: ReactNode;\n    //   // datePickerProps?: Partial<DatePickerProps>;\n    //   // timePickerProps?: { label?: ReactNode; placeholder?: string };\n\n    //   shadcnElements: Pick<ShadcnElements, \"Button\" | \"Calendar\" | \"Label\" | \"Popover\" | \"PopoverTrigger\" | \"PopoverContent\">;\n    // }\n  ) => {\n    const { Button, Calendar, Label, Popover, PopoverTrigger, PopoverContent } = props.shadcnElements;\n\n    const { localTz, localTime, onChange, fieldProps, metadata, fieldState } = useDateTimeField({\n      field: props.field,\n      value: props.value,\n      onChange: props?.onChange,\n    });\n\n    const value = props.value ?? fieldProps.value;\n    const timeString = localTime ? getTimeString(getDateTimeObjectFromDate(localTime, true), true) : undefined;\n    const config = metadata.configuration;\n\n    const onDateChange = useCallback<Exclude<DatePickerProps[\"onChange\"], undefined>>(\n      (range) => {\n        (fieldProps || value) && copyTime(range, zonedTimeToUtc(range, localTz));\n        const dateOverride = value ?? new Date(fieldProps.value);\n        if (isValidDate(dateOverride)) {\n          range.setHours(dateOverride.getHours());\n          range.setMinutes(dateOverride.getMinutes());\n          range.setSeconds(dateOverride.getSeconds());\n          range.setMilliseconds(dateOverride.getMilliseconds());\n        }\n        onChange?.(zonedTimeToUtc(range, localTz));\n        fieldProps.onChange(zonedTimeToUtc(range, localTz));\n      },\n      [fieldProps, value, localTz, onChange]\n    );\n\n    const [isOpen, setIsOpen] = useState(false);\n\n    const handleDateSelect = (selectedDate: Date | undefined) => {\n      if (selectedDate) {\n        onDateChange?.(selectedDate);\n      }\n    };\n\n    const handleTimeInput = (inputTimeString: string) => {\n      const [hours, minutes] = inputTimeString.split(\":\").map(Number);\n      const newDate = localTime ? new Date(localTime) : new Date();\n      newDate.setHours(hours);\n      newDate.setMinutes(minutes);\n\n      onChange?.(zonedTimeToUtc(newDate, localTz));\n      fieldProps.onChange(zonedTimeToUtc(newDate, localTz));\n    };\n\n    const handleClear = () => {\n      onChange?.(undefined);\n      fieldProps.onChange(undefined);\n    };\n\n    return (\n      <Popover open={isOpen} onOpenChange={setIsOpen}>\n        <PopoverTrigger asChild onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}>\n          <div>\n            <Label htmlFor={props.id ? `${props.id}-date` : undefined}>\n              {props.label ?? metadata.name ?? \"Date\"}\n              {metadata.requiredArgumentForInput && <ShadcnRequired>*</ShadcnRequired>}\n            </Label>\n            <Button\n              id={props.id ? `${props.id}-date` : undefined}\n              variant=\"outline\"\n              type=\"button\"\n              className={`w-full justify-start text-left font-normal ${!localTime ? \"text-muted-foreground\" : \"\"}`}\n            >\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              {localTime ? (\n                formatDate(localTime, props.includeTime ?? (config as GadgetDateTimeConfig).includeTime, true)\n              ) : (\n                <span className=\"opacity-50\">\n                  {props.includeTime ?? (config as GadgetDateTimeConfig).includeTime ? \"YYYY-MM-DD hh:mm aa\" : \"YYYY-MM-DD\"}\n                </span>\n              )}\n              {localTime && !metadata.requiredArgumentForInput && <ClearButton onClear={handleClear} />}\n            </Button>\n            {(props.error || fieldState.error?.message) && (\n              <Label className=\"text-red-500\">{props.error || fieldState.error?.message}</Label>\n            )}\n          </div>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\">\n          <div className=\"flex flex-row flex-nowrap\">\n            <div className=\"relative bg-background\">\n              <Calendar\n                mode=\"single\"\n                defaultMonth={localTime}\n                selected={localTime}\n                onSelect={handleDateSelect}\n                initialFocus\n                classNames={{\n                  month_grid: \"w-full\",\n                  selected: \"bg-primary text-primary-foreground\",\n                  nav: \"translate-y-3\",\n                  day_button: \"w-full\",\n                }}\n              />\n            </div>\n            {(props.includeTime ?? (config as GadgetDateTimeConfig).includeTime) && (\n              <div className=\"flex flex-col p-4 bg-white border-l\">\n                <Label htmlFor={props.id ? `${props.id}-time` : undefined} data-testid={props.id ? `${props.id}-time` : undefined}>\n                  {props.timePickerProps?.label ?? \"Time\"} (HH:MM)\n                </Label>\n                <input\n                  type=\"time\"\n                  id={props.id ? `${props.id}-time` : undefined}\n                  data-testid={props.id ? `${props.id}-time` : undefined}\n                  className=\"shadcn-auto-form-time-input w-32 px-3 py-2 border rounded-md mt-2\"\n                  value={timeString}\n                  onChange={(e) => handleTimeInput(e.target.value)}\n                />\n              </div>\n            )}\n          </div>\n        </PopoverContent>\n      </Popover>\n    );\n  }\n);\n\n// const makeShadcnAutoDateTimeInputComponent = ({\n//   Button,\n//   Calendar,\n//   Label,\n//   Popover,\n//   PopoverTrigger,\n//   PopoverContent,\n// }: Pick<ShadcnElements, \"Button\" | \"Calendar\" | \"Label\" | \"Popover\" | \"PopoverTrigger\" | \"PopoverContent\">) => {\n//   function ShadcnAutoDateTimeInputComponent(props: {\n//     field: string;\n//     id?: string;\n//     value?: Date;\n//     onChange?: (value?: Date) => void;\n//     error?: string;\n//     includeTime?: boolean;\n//     hideTimePopover?: boolean;\n//     label?: ReactNode;\n//     datePickerProps?: Partial<DatePickerProps>;\n//     timePickerProps?: { label?: ReactNode; placeholder?: string };\n//   }) {\n//     const { localTz, localTime, onChange, fieldProps, metadata, fieldState } = useDateTimeField({\n//       field: props.field,\n//       value: props.value,\n//       onChange: props?.onChange,\n//     });\n\n//     const value = props.value ?? fieldProps.value;\n//     const timeString = localTime ? getTimeString(getDateTimeObjectFromDate(localTime, true), true) : undefined;\n//     const config = metadata.configuration;\n\n//     const onDateChange = useCallback<Exclude<DatePickerProps[\"onChange\"], undefined>>(\n//       (range) => {\n//         (fieldProps || value) && copyTime(range, zonedTimeToUtc(range, localTz));\n//         const dateOverride = value ?? new Date(fieldProps.value);\n//         if (isValidDate(dateOverride)) {\n//           range.setHours(dateOverride.getHours());\n//           range.setMinutes(dateOverride.getMinutes());\n//           range.setSeconds(dateOverride.getSeconds());\n//           range.setMilliseconds(dateOverride.getMilliseconds());\n//         }\n//         onChange?.(zonedTimeToUtc(range, localTz));\n//         fieldProps.onChange(zonedTimeToUtc(range, localTz));\n//       },\n//       [fieldProps, value, localTz, onChange]\n//     );\n\n//     const [isOpen, setIsOpen] = useState(false);\n\n//     const handleDateSelect = (selectedDate: Date | undefined) => {\n//       if (selectedDate) {\n//         onDateChange?.(selectedDate);\n//       }\n//     };\n\n//     const handleTimeInput = (inputTimeString: string) => {\n//       const [hours, minutes] = inputTimeString.split(\":\").map(Number);\n//       const newDate = localTime ? new Date(localTime) : new Date();\n//       newDate.setHours(hours);\n//       newDate.setMinutes(minutes);\n\n//       onChange?.(zonedTimeToUtc(newDate, localTz));\n//       fieldProps.onChange(zonedTimeToUtc(newDate, localTz));\n//     };\n\n//     const handleClear = () => {\n//       onChange?.(undefined);\n//       fieldProps.onChange(undefined);\n//     };\n\n//     return (\n//       <Popover open={isOpen} onOpenChange={setIsOpen}>\n//         <PopoverTrigger asChild onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}>\n//           <div>\n//             <Label htmlFor={props.id ? `${props.id}-date` : undefined}>\n//               {props.label ?? metadata.name ?? \"Date\"}\n//               {metadata.requiredArgumentForInput && <ShadcnRequired>*</ShadcnRequired>}\n//             </Label>\n//             <Button\n//               id={props.id ? `${props.id}-date` : undefined}\n//               variant=\"outline\"\n//               type=\"button\"\n//               className={`w-full justify-start text-left font-normal ${!localTime ? \"text-muted-foreground\" : \"\"}`}\n//             >\n//               <CalendarIcon className=\"mr-2 h-4 w-4\" />\n//               {localTime ? (\n//                 formatDate(localTime, props.includeTime ?? (config as GadgetDateTimeConfig).includeTime, true)\n//               ) : (\n//                 <span className=\"opacity-50\">\n//                   {props.includeTime ?? (config as GadgetDateTimeConfig).includeTime ? \"YYYY-MM-DD hh:mm aa\" : \"YYYY-MM-DD\"}\n//                 </span>\n//               )}\n//               {localTime && !metadata.requiredArgumentForInput && <ClearButton onClear={handleClear} />}\n//             </Button>\n//             {(props.error || fieldState.error?.message) && (\n//               <Label className=\"text-red-500\">{props.error || fieldState.error?.message}</Label>\n//             )}\n//           </div>\n//         </PopoverTrigger>\n//         <PopoverContent className=\"w-auto p-0\">\n//           <div className=\"flex flex-row flex-nowrap\">\n//             <div className=\"relative bg-background\">\n//               <Calendar\n//                 mode=\"single\"\n//                 defaultMonth={localTime}\n//                 selected={localTime}\n//                 onSelect={handleDateSelect}\n//                 initialFocus\n//                 classNames={{\n//                   month_grid: \"w-full\",\n//                   selected: \"bg-primary text-primary-foreground\",\n//                   nav: \"translate-y-3\",\n//                   day_button: \"w-full\",\n//                 }}\n//               />\n//             </div>\n//             {(props.includeTime ?? (config as GadgetDateTimeConfig).includeTime) && (\n//               <div className=\"flex flex-col p-4 bg-white border-l\">\n//                 <Label htmlFor={props.id ? `${props.id}-time` : undefined} data-testid={props.id ? `${props.id}-time` : undefined}>\n//                   {props.timePickerProps?.label ?? \"Time\"} (HH:MM)\n//                 </Label>\n//                 <input\n//                   type=\"time\"\n//                   id={props.id ? `${props.id}-time` : undefined}\n//                   data-testid={props.id ? `${props.id}-time` : undefined}\n//                   className=\"shadcn-auto-form-time-input w-32 px-3 py-2 border rounded-md mt-2\"\n//                   value={timeString}\n//                   onChange={(e) => handleTimeInput(e.target.value)}\n//                 />\n//               </div>\n//             )}\n//           </div>\n//         </PopoverContent>\n//       </Popover>\n//     );\n//   }\n\n//   ShadcnAutoDateTimeInputComponent.displayName = \"ShadcnAutoDateTimeInputComponent\";\n\n//   return autoInput(ShadcnAutoDateTimeInputComponent);\n// };\n\n// export default makeShadcnAutoDateTimeInputComponent;\nexport default ShadcnAutoDateTimeInputComponent;\n"]}
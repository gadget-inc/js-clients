{"version":3,"file":"ShadcnAutoEnumInput.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/inputs/ShadcnAutoEnumInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import { XIcon } from \"lucide-react\";\nimport React, { useCallback } from \"react\";\nimport { debounce } from \"../../../utils.js\";\nimport { autoInput } from \"../../AutoInput.js\";\nimport { useEnumInputController } from \"../../hooks/useEnumInputController.js\";\nimport { type AutoEnumInputProps } from \"../../shared/AutoInputTypes.js\";\nimport type { ShadcnElements } from \"../elements.js\";\nimport { makeShadcnAutoComboInput } from \"./ShadcnAutoComboInput.js\";\n\nexport const makeShadcnAutoEnumInput = ({\n  Badge,\n  Button,\n  Checkbox,\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  Label,\n}: Pick<\n  ShadcnElements,\n  \"Badge\" | \"Button\" | \"Checkbox\" | \"Command\" | \"CommandEmpty\" | \"CommandGroup\" | \"CommandInput\" | \"CommandItem\" | \"CommandList\" | \"Label\"\n>) => {\n  const ShadcnComboInput = makeShadcnAutoComboInput({\n    Command,\n    CommandInput,\n    Label,\n    CommandItem,\n    CommandList,\n    CommandEmpty,\n    CommandGroup,\n    Checkbox,\n  });\n\n  function ShadcnAutoEnumInput(props: AutoEnumInputProps) {\n    const { label: labelProp, placeholder } = props;\n\n    const {\n      allowMultiple,\n      allowOther,\n      onSelectionChange,\n      selectedOptions,\n      filteredOptions,\n      searchQuery,\n      label,\n      path,\n      metadata,\n      errorMessage,\n    } = useEnumInputController(props);\n\n    const { value: searchValue, setValue: setSearchValue } = searchQuery;\n\n    let selectedTagsElement = null;\n    if (selectedOptions.length > 0) {\n      selectedTagsElement = (\n        <div className=\"flex flex-wrap gap-2\">\n          {selectedOptions.map((tag) => (\n            <Badge key={`option-${tag}`} variant={\"outline\"}>\n              {tag}\n              <Button variant=\"ghost\" size=\"icon\" aria-label={`Remove ${tag}`} onClick={() => onSelectionChange(tag)}>\n                <XIcon />\n              </Button>\n            </Badge>\n          ))}\n        </div>\n      );\n    }\n\n    const formatOptionText = useCallback(\n      (option: string) => {\n        const trimValue = searchValue.trim().toLocaleLowerCase();\n        const matchIndex = option.toLocaleLowerCase().indexOf(trimValue);\n\n        if (!searchValue || matchIndex === -1) return option;\n\n        const start = option.slice(0, matchIndex);\n        const highlight = option.slice(matchIndex, matchIndex + trimValue.length);\n        const end = option.slice(matchIndex + trimValue.length, option.length);\n\n        return (\n          <p>\n            {start}\n            <span className=\"font-bold\">{highlight}</span>\n            {end}\n          </p>\n        );\n      },\n      [searchValue]\n    );\n\n    const debouncedSearch = useCallback(\n      debounce((value: string) => {\n        setSearchValue(value);\n      }, 400),\n      [setSearchValue]\n    );\n\n    return (\n      <ShadcnComboInput\n        {...props}\n        options={filteredOptions.map((option) => ({ id: option, primary: option }))}\n        path={path}\n        metadata={metadata}\n        label={labelProp ?? label}\n        placeholder={placeholder}\n        onChange={debouncedSearch}\n        selectedRecordTag={selectedTagsElement}\n        onSelect={(option) => {\n          onSelectionChange(option.id);\n        }}\n        isLoading={false}\n        checkSelected={(id) => {\n          return selectedOptions.includes(id);\n        }}\n        id={`${props.field}-combobox-textfield`}\n        errorMessage={errorMessage}\n        allowMultiple={allowMultiple}\n        records={[]}\n        allowOther={allowOther}\n        onAddExtraOption={(value) => {\n          onSelectionChange(value);\n          setSearchValue(\"\");\n        }}\n        formatOptionText={formatOptionText}\n        emptyMessage={`No results`}\n      />\n    );\n  }\n\n  return autoInput(ShadcnAutoEnumInput);\n};\n"]}
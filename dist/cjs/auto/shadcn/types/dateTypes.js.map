{"version":3,"file":"dateTypes.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/types/dateTypes.tsx"],"names":[],"mappings":"","sourcesContent":["/**\n * Match a day falling after the specified date, with the date not included.\n *\n * @example\n *   // Match days after the 2nd of February 2019\n *   const matcher: DateAfter = { after: new Date(2019, 1, 2) };\n */\nexport type DateAfter = {\n  after: Date;\n};\n/**\n * Match a day falling before the specified date, with the date not included.\n *\n * @example\n *   // Match days before the 2nd of February 2019\n *   const matcher: DateBefore = { before: new Date(2019, 1, 2) };\n */\nexport type DateBefore = {\n  before: Date;\n};\n\nexport type DateRange = {\n  from: Date | undefined;\n  to?: Date | undefined;\n};\n\n/**\n * An interval of dates. Differently from {@link DateRange}, the range ends here\n * are not included.\n *\n * @example\n *   // Match the days between the 2nd and the 5th of February 2019\n *   const matcher: DateInterval = {\n *     after: new Date(2019, 1, 2),\n *     before: new Date(2019, 1, 5)\n *   };\n */\nexport type DateInterval = {\n  before: Date;\n  after: Date;\n};\n\n/**\n * Match dates being one of the specified days of the week (`0-6`, where `0` is\n * Sunday).\n *\n * @example\n *   // Match Sundays\n *   const matcher: DayOfWeek = { dayOfWeek: 0 };\n *   // Match weekends\n *   const matcher: DayOfWeek = { dayOfWeek: [0, 6] };\n */\nexport type DayOfWeek = {\n  dayOfWeek: number | number[];\n};\n\nexport type Matcher = boolean | ((date: Date) => boolean) | Date | Date[] | DateRange | DateBefore | DateAfter | DateInterval | DayOfWeek;\n\n/**\n * Represents the modifiers that match a specific day in the calendar.\n *\n * - Retrieve modifiers using the {@link OnSelectHandler} via the `onSelect` prop,\n *   or within custom components using the {@link useDayPicker} hook.\n * - Includes built-in modifiers from {@link DayFlag} and {@link SelectionState}.\n * - Add custom modifiers using the `modifiers` prop.\n *\n * @example\n *   const modifiers: Modifiers = {\n *   today: false, // the day is not today\n *   selected: true, // the day is selected\n *   disabled: false, // the day is not disabled\n *   outside: false, // the day is not outside the month\n *   focused: false, // the day is not focused\n *\n *   weekend: false // custom modifier example for matching a weekend\n *   booked: true // custom modifier example for matching a booked day\n *   available: false // custom modifier example for matching an available day\n *   };\n *\n * @see https://daypicker.dev/guides/custom-modifiers\n */\nexport type Modifiers = Record<string, boolean>;\n\n/**\n * Shared handler type for `onSelect` callback when a selection mode is set.\n *\n * @template T - The type of the selected item.\n * @callback OnSelectHandler\n * @param {T} selected - The selected item after the event.\n * @param {Date} triggerDate - The date when the event was triggered.\n * @param {Modifiers} modifiers - The modifiers associated with the event.\n * @param {React.MouseEvent | React.KeyboardEvent} e - The event object.\n */\nexport type OnSelectHandler<T> = (selected: T, triggerDate: Date, modifiers: Modifiers, e: React.MouseEvent | React.KeyboardEvent) => void;\n/**\n * The props when the single selection is required.\n *\n * @group DayPicker\n * @see https://daypicker.dev/docs/selection-modes#single-mode\n */\nexport interface PropsSingleRequired {\n  mode: \"single\";\n  required: true;\n  /** The selected date. */\n  selected: Date | undefined;\n  /** Event handler when a day is selected. */\n  onSelect?: OnSelectHandler<Date>;\n}\n/**\n * The props when the single selection is optional.\n *\n * @group DayPicker\n * @see https://daypicker.dev/docs/selection-modes#single-mode\n */\nexport interface PropsSingle {\n  mode: \"single\";\n  required?: false | undefined;\n  /** The selected date. */\n  selected?: Date | undefined;\n  /** Event handler when a day is selected. */\n  onSelect?: OnSelectHandler<Date | undefined>;\n}\n/**\n * The props when the multiple selection is required.\n *\n * @group DayPicker\n * @see https://daypicker.dev/docs/selection-modes#multiple-mode\n */\nexport interface PropsMultiRequired {\n  mode: \"multiple\";\n  required: true;\n  /** The selected dates. */\n  selected: Date[] | undefined;\n  /** Event handler when days are selected. */\n  onSelect?: OnSelectHandler<Date[]>;\n  /** The minimum number of selectable days. */\n  min?: number;\n  /** The maximum number of selectable days. */\n  max?: number;\n}\n/**\n * The props when the multiple selection is optional.\n *\n * @group DayPicker\n * @see https://daypicker.dev/docs/selection-modes#multiple-mode\n */\nexport interface PropsMulti {\n  mode: \"multiple\";\n  required?: false | undefined;\n  /** The selected dates. */\n  selected?: Date[] | undefined;\n  /** Event handler when days are selected. */\n  onSelect?: OnSelectHandler<Date[] | undefined>;\n  /** The minimum number of selectable days. */\n  min?: number;\n  /** The maximum number of selectable days. */\n  max?: number;\n}\n/**\n * The props when the range selection is required.\n *\n * @group DayPicker\n * @see https://daypicker.dev/docs/selection-modes#range-mode\n */\nexport interface PropsRangeRequired {\n  mode: \"range\";\n  required: true;\n  disabled?: Matcher | Matcher[] | undefined;\n  /**\n   * When `true`, the range will reset when including a disabled day.\n   *\n   * @since V9.0.2\n   */\n  excludeDisabled?: boolean | undefined;\n  /** The selected range. */\n  selected: DateRange | undefined;\n  /** Event handler when a range is selected. */\n  onSelect?: OnSelectHandler<DateRange>;\n  /** The minimum number of days to include in the range. */\n  min?: number;\n  /** The maximum number of days to include in the range. */\n  max?: number;\n}\n/**\n * The props when the range selection is optional.\n *\n * @group DayPicker\n * @see https://daypicker.dev/docs/selection-modes#range-mode\n */\nexport interface PropsRange {\n  mode: \"range\";\n  required?: false | undefined;\n  disabled?: Matcher | Matcher[] | undefined;\n  /**\n   * When `true`, the range will reset when including a disabled day.\n   *\n   * @since V9.0.2\n   */\n  excludeDisabled?: boolean | undefined;\n  /** The selected range. */\n  selected?: DateRange | undefined;\n  /** Event handler when the selection changes. */\n  onSelect?: OnSelectHandler<DateRange | undefined>;\n  /** The minimum number of days to include in the range. */\n  min?: number;\n  /** The maximum number of days to include in the range. */\n  max?: number;\n}\n\nexport type PropsBase = {\n  defaultMonth?: Date;\n  initialFocus?: boolean;\n  classNames?: { [key: string]: string };\n};\n\nexport type DayPickerProps = PropsBase &\n  (\n    | PropsSingle\n    | PropsSingleRequired\n    | PropsMulti\n    | PropsMultiRequired\n    | PropsRange\n    | PropsRangeRequired\n    | {\n        mode?: undefined;\n        required?: undefined;\n      }\n  );\n"]}
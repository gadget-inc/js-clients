{"version":3,"file":"dialogTypes.js","sourceRoot":"","sources":["../../../../../src/auto/shadcn/types/dialogTypes.tsx"],"names":[],"mappings":"","sourcesContent":["import type { ComponentProps, HTMLAttributes, ReactNode } from \"react\";\n\nexport interface DialogProps extends HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nexport interface DialogContentProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  children?: ReactNode;\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void;\n\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps[\"trapped\"];\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps[\"onMountAutoFocus\"];\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps[\"onUnmountAutoFocus\"];\n}\n\nexport interface DialogHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  children?: ReactNode;\n}\n\nexport interface DialogFooterProps extends HTMLAttributes<HTMLDivElement> {\n  children?: ReactNode;\n}\n\nexport interface DialogTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  children?: ReactNode;\n}\n\nexport interface DialogDescriptionProps extends HTMLAttributes<HTMLParagraphElement> {\n  children?: ReactNode;\n}\n\nexport interface DialogOverlayProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  children?: ReactNode;\n}\n\nexport interface DialogPortalProps extends HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: Element | DocumentFragment | null;\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nexport interface DialogTriggerProps extends HTMLAttributes<HTMLButtonElement> {\n  children?: ReactNode;\n  asChild?: boolean;\n}\n\nexport interface DialogCloseProps extends ComponentProps<\"button\"> {\n  children?: ReactNode;\n  asChild?: boolean;\n}\n\ninterface FocusScopeProps {\n  /**\n   * When `true`, tabbing from last item will focus first tabbable\n   * and shift+tab from first item will focus last tababble.\n   * @defaultValue false\n   */\n  loop?: boolean;\n  /**\n   * When `true`, focus cannot escape the focus scope via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapped?: boolean;\n  /**\n   * Event handler called when auto-focusing on mount.\n   * Can be prevented.\n   */\n  onMountAutoFocus?: (event: Event) => void;\n  /**\n   * Event handler called when auto-focusing on unmount.\n   * Can be prevented.\n   */\n  onUnmountAutoFocus?: (event: Event) => void;\n}\n\ntype PointerDownOutsideEvent = CustomEvent<{\n  originalEvent: PointerEvent;\n}>;\n"]}
{"version":3,"file":"AutoTable.js","sourceRoot":"","sources":["../../../src/auto/AutoTable.tsx"],"names":[],"mappings":"","sourcesContent":["import type { DefaultSelection, FindManyFunction, GadgetRecord, OptionsType, Select } from \"@gadgetinc/api-client-core\";\nimport type { ReactNode } from \"react\";\nimport type { TableOptions, TableRow } from \"../use-table/types.js\";\n\n/**\n * Props for AutoTable, including Gadget-land and adapter-specific props.\n **/\nexport type AutoTableProps<\n  GivenOptions extends OptionsType,\n  SchemaT,\n  FinderFunction extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n  Options extends FinderFunction[\"optionsType\"]\n> = {\n  /**\n   * The Gadget model with records that will be shown in the table.\n   */\n  model: { findMany: FinderFunction };\n  /**\n   * The selection object to pass to the table.\n   * Overrides the default selection based on included columns.\n   * Needed for displaying nested relationships in the table.\n   */\n  select?: Options[\"select\"];\n  /**\n   * The number of records to show per page.\n   */\n  pageSize?: number;\n  /**\n   * The initial pagination cursor to control the first page of records.\n   * Pagination cursors are returned from the API.\n   */\n  initialCursor?: string;\n  /**\n   * Determines if the table should be live updated when data changes.\n   */\n  live?: boolean;\n\n  /**\n   * The columns to display in the table, represented as (string | CellDetailColumn | CustomCellColumn)[]\n   * - A string represents the API identifier of the field.\n   * - A CellDetailColumn is a detailed field representation.\n   * - A CustomCellColumn is a custom column.\n   */\n  columns?: TableOptions[\"columns\"];\n\n  /**\n   * An array of model fields excluded from the table.\n   */\n  excludeColumns?: string[];\n\n  /**\n   * Callback triggered when a row is clicked.\n   */\n  onClick?: (\n    row: TableRow,\n    record: GadgetRecord<\n      Select<\n        Exclude<FinderFunction[\"schemaType\"], null | undefined>,\n        DefaultSelection<FinderFunction[\"selectionType\"], Options, FinderFunction[\"defaultSelection\"]>\n      >\n    >\n  ) => void;\n\n  /**\n   * The initial column sort order.\n   * @example\n   * ```tsx\n   * <AutoTable model={api.user} initialSort={{ id: \"Descending\" }} />\n   * ```\n   */\n  initialSort?: Options[\"sort\"];\n\n  /**\n   * The model record filter to apply.\n   */\n  filter?: Options[\"filter\"];\n\n  /**\n   * The actions available for selected records, represented as (string | ActionCallback)[]\n   * - A string represents the API identifier of the model action.\n   * - ActionCallback contains a label and an action property, which can be an action API identifier or a function.\n   */\n  actions?: TableOptions[\"actions\"];\n\n  /**\n   * API identifiers of model actions to exclude from the table.\n   */\n  excludeActions?: TableOptions[\"excludeActions\"];\n\n  /**\n   * Indicates if table rows are selectable.\n   */\n  selectable?: boolean;\n\n  /**\n   * The content displayed when no records exist.\n   */\n  emptyState?: ReactNode;\n\n  /**\n   * The resource name displayed in the table.\n   */\n  resourceName?: { singular: string; plural: string };\n\n  /**\n   * Controls search bar visibility. Defaults to `true`.\n   */\n  searchable?: boolean;\n\n  /**\n   * A preset search term.\n   */\n  searchValue?: string;\n\n  /**\n   * Indicates if pagination is enabled. Defaults to `true`.\n   */\n  paginate?: boolean;\n\n  /**\n   * The loading skeleton to display when the table is loading.\n   */\n  loadingSkeleton?: ReactNode;\n};\n"]}
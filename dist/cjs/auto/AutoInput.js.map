{"version":3,"file":"AutoInput.js","sourceRoot":"","sources":["../../../src/auto/AutoInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\nimport { useFieldsFromChildComponents } from \"./AutoFormContext.js\";\nimport { useRelationshipContext } from \"./hooks/useAutoRelationship.js\";\nimport { useFieldApiIdentifier, useRelationshipTransformedMetaDataPaths } from \"./hooks/useFieldMetadata.js\";\n\nexport interface AutoInputComponent<P> extends React.FC<P> {\n  __autoInput: true;\n}\n\nexport function autoInput<P extends { field: string }>(Component: React.FC<P>): AutoInputComponent<P> {\n  const WrappedComponent: React.FC<P> = (props) => {\n    const { hasCustomFormChildren, registerFields, fieldSet } = useFieldsFromChildComponents();\n    const relationshipContext = useRelationshipContext();\n    const fieldApiIdentifier = useFieldApiIdentifier(props.field);\n\n    const fieldSetPath = useMemo(() => {\n      if (relationshipContext) {\n        return relationshipContext?.transformMetadataPath\n          ? relationshipContext.transformMetadataPath(fieldApiIdentifier)\n          : relationshipContext.transformPath(fieldApiIdentifier);\n      }\n\n      // Non relationship context - Use field name directly\n      return fieldApiIdentifier;\n    }, [relationshipContext, fieldApiIdentifier]);\n\n    useEffect(() => {\n      registerFields([fieldSetPath]);\n    }, [registerFields, fieldSetPath]);\n\n    if (hasCustomFormChildren && !fieldSet.has(fieldSetPath)) {\n      // Do not render before registration\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n\n  (WrappedComponent as AutoInputComponent<P>).__autoInput = true;\n\n  return WrappedComponent as AutoInputComponent<P>;\n}\n\nexport function autoRelationshipForm<P extends { field: string }>(\n  Component: React.FC<P>\n): AutoInputComponent<P & { selectPaths?: string[] }> {\n  const WrappedComponent: React.FC<P> = (props) => {\n    const { hasCustomFormChildren, registerFields, fieldSet } = useFieldsFromChildComponents();\n\n    const relationshipTransformedPaths = useRelationshipTransformedMetaDataPaths(props.field);\n    const hasSelectPaths = \"selectPaths\" in props && props.selectPaths;\n    const selectPathsToRegister = useMemo(\n      () =>\n        hasSelectPaths && Array.isArray(props.selectPaths)\n          ? props.selectPaths.map((selectPath) => `${relationshipTransformedPaths?.metaDataPath ?? props.field}.${selectPath}`)\n          : [],\n      [hasSelectPaths, props.field]\n    );\n\n    useEffect(() => {\n      if (hasSelectPaths) {\n        registerFields(selectPathsToRegister);\n      }\n    }, [hasSelectPaths, registerFields, selectPathsToRegister]);\n\n    if (hasCustomFormChildren && !selectPathsToRegister.every((field) => fieldSet.has(field))) {\n      // Do not render before registration\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n\n  (WrappedComponent as AutoInputComponent<P>).__autoInput = true;\n\n  return autoInput(WrappedComponent as AutoInputComponent<P>);\n}\n\nexport function isAutoInput(component: React.ReactElement): component is React.ReactElement<any, AutoInputComponent<any>> {\n  return typeof component.type === \"function\" && \"__autoInput\" in component.type;\n}\n"]}
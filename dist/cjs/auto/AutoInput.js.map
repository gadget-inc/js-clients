{"version":3,"file":"AutoInput.js","sourceRoot":"","sources":["../../../src/auto/AutoInput.tsx"],"names":[],"mappings":";;;;AAAA,uDAAkD;AAClD,6DAAoE;AACpE,2EAAwE;AAMxE,SAAgB,SAAS,CAA8B,SAAsB;IAC3E,MAAM,gBAAgB,GAAgB,CAAC,KAAK,EAAE,EAAE;QAC9C,MAAM,EAAE,qBAAqB,EAAE,cAAc,EAAE,QAAQ,EAAE,GAAG,IAAA,iDAA4B,GAAE,CAAC;QAC3F,MAAM,mBAAmB,GAAG,IAAA,+CAAsB,GAAE,CAAC;QAErD,MAAM,YAAY,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;YAChC,IAAI,mBAAmB,EAAE,CAAC;gBACxB,OAAO,mBAAmB,EAAE,qBAAqB;oBAC/C,CAAC,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,KAAK,CAAC,KAAK,CAAC;oBACxD,CAAC,CAAC,mBAAmB,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACrD,CAAC;YAED,qDAAqD;YACrD,OAAO,KAAK,CAAC,KAAK,CAAC;QACrB,CAAC,EAAE,CAAC,mBAAmB,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAEvC,MAAM,cAAc,GAAG,aAAa,IAAI,KAAK,IAAI,KAAK,CAAC,WAAW,CAAC;QACnE,MAAM,WAAW,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE,CAAC,CAAC,cAAc,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;QAEnI,IAAA,iBAAS,EAAC,GAAG,EAAE;YACb,MAAM,gBAAgB,GAAG,CAAC,YAAY,CAAC,CAAC;YAExC,IAAI,cAAc,EAAE,CAAC;gBACnB,gBAAgB,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,IAAI,UAAU,EAAE,CAAC,CAAC,CAAC;YAC5F,CAAC;YAED,cAAc,CAAC,gBAAgB,CAAC,CAAC;QACnC,CAAC,EAAE,CAAC,cAAc,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC;QAEhD,IAAI,qBAAqB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC;YACzD,oCAAoC;YACpC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,8BAAC,SAAS,OAAK,KAAK,GAAI,CAAC;IAClC,CAAC,CAAC;IAED,gBAA0C,CAAC,WAAW,GAAG,IAAI,CAAC;IAE/D,OAAO,gBAAyC,CAAC;AACnD,CAAC;AAxCD,8BAwCC;AAED,SAAgB,WAAW,CAAC,SAA6B;IACvD,OAAO,OAAO,SAAS,CAAC,IAAI,KAAK,UAAU,IAAI,aAAa,IAAI,SAAS,CAAC,IAAI,CAAC;AACjF,CAAC;AAFD,kCAEC","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\nimport { useFieldsFromChildComponents } from \"./AutoFormContext.js\";\nimport { useRelationshipContext } from \"./hooks/useAutoRelationship.js\";\n\nexport interface AutoInputComponent<P> extends React.FC<P> {\n  __autoInput: true;\n}\n\nexport function autoInput<P extends { field: string }>(Component: React.FC<P>): AutoInputComponent<P & { selectPaths?: string[] }> {\n  const WrappedComponent: React.FC<P> = (props) => {\n    const { hasCustomFormChildren, registerFields, fieldSet } = useFieldsFromChildComponents();\n    const relationshipContext = useRelationshipContext();\n\n    const fieldSetPath = useMemo(() => {\n      if (relationshipContext) {\n        return relationshipContext?.transformMetadataPath\n          ? relationshipContext.transformMetadataPath(props.field)\n          : relationshipContext.transformPath(props.field);\n      }\n\n      // Non relationship context - Use field name directly\n      return props.field;\n    }, [relationshipContext, props.field]);\n\n    const hasSelectPaths = \"selectPaths\" in props && props.selectPaths;\n    const selectPaths = useMemo(() => (hasSelectPaths && Array.isArray(props.selectPaths) ? props.selectPaths : []), [hasSelectPaths]);\n\n    useEffect(() => {\n      const fieldsToRegister = [fieldSetPath];\n\n      if (hasSelectPaths) {\n        fieldsToRegister.push(...selectPaths.map((selectPath) => `${props.field}.${selectPath}`));\n      }\n\n      registerFields(fieldsToRegister);\n    }, [registerFields, fieldSetPath, selectPaths]);\n\n    if (hasCustomFormChildren && !fieldSet.has(fieldSetPath)) {\n      // Do not render before registration\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n\n  (WrappedComponent as AutoInputComponent<P>).__autoInput = true;\n\n  return WrappedComponent as AutoInputComponent<P>;\n}\n\nexport function isAutoInput(component: React.ReactElement): component is React.ReactElement<any, AutoInputComponent<any>> {\n  return typeof component.type === \"function\" && \"__autoInput\" in component.type;\n}\n"]}
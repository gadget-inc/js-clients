{"version":3,"file":"operationBuilders.js","sourceRoot":"","sources":["../../src/operationBuilders.ts"],"names":[],"mappings":"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","sourcesContent":["import { mutation, query } from \"gql-query-builder\";\nimport type IQueryBuilderOptions from \"gql-query-builder/build/IQueryBuilderOptions.js\";\nimport type VariableOptions from \"gql-query-builder/build/VariableOptions.js\";\nimport type { FieldSelection } from \"./FieldSelection.js\";\nimport { fieldSelectionToGQLBuilderFields } from \"./FieldSelection.js\";\nimport { filterTypeName, sortTypeName } from \"./support.js\";\n\nexport type { default as VariableOptions } from \"gql-query-builder/build/VariableOptions.js\";\n\nconst hydrationOptions = (modelApiIdentifier: string): IQueryBuilderOptions => {\n  return {\n    operation: \"gadgetMeta\",\n    fields: [`hydrations(modelName: \"${modelApiIdentifier}\")`],\n  };\n};\n\ntype AnySort = any;\ntype AnyFilter = any;\n\nexport type SelectionOptions = { select?: any };\n\nexport type PaginationOptions = {\n  sort?: AnySort | null;\n  filter?: AnyFilter | null;\n  search?: string | null;\n  after?: string | null;\n  first?: number | null;\n  before?: string | null;\n  last?: number | null;\n} & SelectionOptions;\n\nexport type FindFirstPaginationOptions = Omit<PaginationOptions, \"first\" | \"last\" | \"before\" | \"after\">;\n\nexport const findOneOperation = (\n  operation: string,\n  id: string | undefined,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: SelectionOptions | null\n) => {\n  const variables: IQueryBuilderOptions[\"variables\"] = {};\n  if (typeof id !== \"undefined\") variables.id = { type: \"GadgetID\", required: true, value: id };\n  return query([\n    {\n      operation,\n      fields: fieldSelectionToGQLBuilderFields(options?.select || defaultSelection, true),\n      variables,\n    },\n    hydrationOptions(modelApiIdentifier),\n  ]);\n};\n\nexport const findOneByFieldOperation = (\n  operation: string,\n  fieldName: string,\n  fieldValue: string,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: SelectionOptions | null\n) => {\n  return findManyOperation(operation, defaultSelection, modelApiIdentifier, {\n    select: options?.select,\n    first: 2,\n    filter: {\n      [fieldName]: {\n        equals: fieldValue,\n      },\n    },\n  });\n};\n\nexport const findManyOperation = (\n  operation: string,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: PaginationOptions\n) => {\n  return query([\n    {\n      operation,\n      fields: [\n        {\n          pageInfo: [\"hasNextPage\", \"hasPreviousPage\", \"startCursor\", \"endCursor\"],\n        },\n        {\n          edges: [\"cursor\", { node: fieldSelectionToGQLBuilderFields(options?.select || defaultSelection, true) }],\n        },\n      ],\n      variables: {\n        after: { value: options?.after, type: \"String\", required: false },\n        first: { value: options?.first, type: \"Int\", required: false },\n        before: { value: options?.before, type: \"String\", required: false },\n        last: { value: options?.last, type: \"Int\", required: false },\n        ...(options?.sort && { sort: { value: options?.sort, type: sortTypeName(modelApiIdentifier) + \"!\", list: true } }),\n        ...(options?.filter && { filter: { value: options?.filter, type: filterTypeName(modelApiIdentifier) + \"!\", list: true } }),\n        ...(options?.search && { search: { value: options?.search, type: \"String\", required: false } }),\n      },\n    },\n    hydrationOptions(modelApiIdentifier),\n  ]);\n};\n\nexport const actionOperation = (\n  operation: string,\n  defaultSelection: FieldSelection | null,\n  modelApiIdentifier: string,\n  modelSelectionField: string,\n  variables: VariableOptions,\n  options?: SelectionOptions | null,\n  namespace?: string | null\n) => {\n  let actionOperation: IQueryBuilderOptions = {\n    operation,\n    fields: [\n      \"success\",\n      { errors: [\"message\", \"code\", { \"... on InvalidRecordError\": [{ validationErrors: [\"message\", \"apiIdentifier\"] }] }] },\n    ],\n    variables,\n  };\n\n  const selection = options?.select || defaultSelection;\n  if (selection) {\n    actionOperation.fields!.push({ [modelSelectionField]: fieldSelectionToGQLBuilderFields(selection, true) });\n  }\n\n  if (namespace) {\n    actionOperation = {\n      operation: namespace,\n      fields: [actionOperation],\n    };\n  }\n\n  return mutation([actionOperation, hydrationOptions(modelApiIdentifier)]);\n};\n\nexport const globalActionOperation = (operation: string, variables: VariableOptions, namespace?: string | null) => {\n  let actionOperation: IQueryBuilderOptions = {\n    operation,\n    fields: [\n      \"success\",\n      { errors: [\"message\", \"code\", { \"... on InvalidRecordError\": [{ validationErrors: [\"message\", \"apiIdentifier\"] }] }] },\n      \"result\",\n    ],\n    variables,\n  };\n\n  const dataPath = [operation];\n  if (namespace) {\n    actionOperation = {\n      operation: namespace,\n      fields: [actionOperation],\n    };\n    dataPath.unshift(namespace);\n  }\n\n  return mutation([actionOperation]);\n};\n"]}
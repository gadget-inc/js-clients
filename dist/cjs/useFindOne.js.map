{"version":3,"file":"useFindOne.js","sourceRoot":"","sources":["../../src/useFindOne.ts"],"names":[],"mappings":";;;AACA,gEAAqG;AACrG,iCAAgC;AAChC,2DAAqD;AACrD,iEAA2D;AAE3D,yCAAwD;AAExD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACI,MAAM,UAAU,GAAG,CAMxB,OAAuB,EACvB,EAAU,EACV,OAA4E,EAG5E,EAAE;IACF,MAAM,eAAe,GAAG,IAAA,wCAAiB,EAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,kCAAgB,EACrB,OAAO,CAAC,OAAO,CAAC,aAAa,EAC7B,EAAE,EACF,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAChC,OAAO,CAAC,OAAO,CAAC,kBAAkB,EAClC,eAAe,EACf,OAAO,CAAC,OAAO,CAAC,SAAS,CAC1B,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,EAAE,eAAe,CAAC,CAAC,CAAC;IAEnC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,IAAA,kCAAc,EAAC,IAAA,uBAAY,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAEzE,MAAM,MAAM,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QAC1B,MAAM,QAAQ,GAAG,IAAA,mCAAiB,EAAC,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAE/F,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,IAAI,IAAA,qBAAG,EAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC3D,IAAI,IAAI,EAAE,CAAC;YACT,IAAI,GAAG,IAAA,+BAAa,EAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACxC,CAAC;QACD,MAAM,KAAK,GAAG,uBAAY,CAAC,iBAAiB,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAElF,OAAO,EAAE,GAAG,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACvC,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;IAE/D,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC3B,CAAC,CAAC;AAvCW,QAAA,UAAU,cAuCrB","sourcesContent":["import type { DefaultSelection, FindOneFunction, GadgetRecord, LimitToKnownKeys, Select } from \"@gadgetinc/api-client-core\";\nimport { findOneOperation, get, hydrateRecord, namespaceDataPath } from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { useGadgetQuery } from \"./useGadgetQuery.js\";\nimport { useStructuralMemo } from \"./useStructuralMemo.js\";\nimport type { OptionsType, ReadHookResult, ReadOperationOptions } from \"./utils.js\";\nimport { ErrorWrapper, useQueryArgs } from \"./utils.js\";\n\n/**\n * React hook to fetch one Gadget record by `id` from the backend. Returns a standard hook result set with a tuple of the result object with `data`, `fetching`, and `error` keys, and a `refetch` function. `data` will be the record if it was found, and `null` otherwise.\n *\n * @param manager Gadget model manager to use\n * @param id id of the record to fetch\n * @param options options for selecting the fields in the result\n *\n * @example\n * ```\n * export function User(props: { id: string }) {\n *   const [result, refresh] = useFindOne(api.user, props.id, {\n *     select: {\n *       name: true,\n *     },\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No user found with id={props.id}</>;\n *\n *   return <div>{result.data.name}</div>;\n * }\n * ```\n */\nexport const useFindOne = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends FindOneFunction<GivenOptions, any, SchemaT, any>,\n  Options extends F[\"optionsType\"] & ReadOperationOptions\n>(\n  manager: { findOne: F },\n  id: string,\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"] & ReadOperationOptions>\n): ReadHookResult<\n  GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>\n> => {\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return findOneOperation(\n      manager.findOne.operationName,\n      id,\n      manager.findOne.defaultSelection,\n      manager.findOne.modelApiIdentifier,\n      memoizedOptions,\n      manager.findOne.namespace\n    );\n  }, [manager, id, memoizedOptions]);\n\n  const [rawResult, refresh] = useGadgetQuery(useQueryArgs(plan, options));\n\n  const result = useMemo(() => {\n    const dataPath = namespaceDataPath([manager.findOne.operationName], manager.findOne.namespace);\n\n    let data = rawResult.data && get(rawResult.data, dataPath);\n    if (data) {\n      data = hydrateRecord(rawResult, data);\n    }\n    const error = ErrorWrapper.errorIfDataAbsent(rawResult, dataPath, options?.pause);\n\n    return { ...rawResult, data, error };\n  }, [manager.findOne.operationName, rawResult, options?.pause]);\n\n  return [result, refresh];\n};\n"]}
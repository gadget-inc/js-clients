{"version":3,"file":"urlParamExchange.js","sourceRoot":"","sources":["../../src/urlParamExchange.ts"],"names":[],"mappings":";;;AAEA,iCAAqC;AAE9B,MAAM,mBAAmB,GAAG,CAAC,GAAiB,EAAE,EAAE;IACvD,MAAM,cAAc,GAAwC,CAAC,GAAG,GAAG,CAAC,WAAW,CAAC;SAC7E,OAAO,EAAE;SACT,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,IAAI,qBAAqB,CAAQ,CAAC;IACzE,IAAI,cAAc,EAAE;QAClB,IAAI,cAAc,CAAC,IAAI,EAAE;YACvB,OAAO,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;SAClC;QACD,MAAM,cAAc,GAAG,cAAc,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,OAAO,CAAQ,CAAC;QAC1G,OAAO,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;KAClC;AACH,CAAC,CAAC;AAXW,QAAA,mBAAmB,uBAW9B;AAEK,MAAM,gBAAgB,GAAa,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;IACxD,OAAO,CAAC,IAAI,EAAE,EAAE,CACd,IAAA,YAAI,EACF,IAAI,EACJ,IAAA,cAAM,EAAC,CAAC,EAAE,EAAE,EAAE;QACZ,IAAI,EAAE,CAAC,OAAO,CAAC,GAAG,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC/D,MAAM,SAAS,GAAG,IAAA,2BAAmB,EAAC,EAAE,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC;YAE7D,EAAE,CAAC,OAAO,GAAG;gBACX,GAAG,EAAE,CAAC,OAAO;gBACb,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,GAAG,cAAc,SAAS,EAAE;aAChD,CAAC;SACH;IACH,CAAC,CAAC,EACF,OAAO,CACR,CAAC;AACN,CAAC,CAAC;AAhBW,QAAA,gBAAgB,oBAgB3B","sourcesContent":["import type { Exchange } from \"@urql/core\";\nimport type { DocumentNode, OperationDefinitionNode } from \"graphql\";\nimport { onPush, pipe } from \"wonka\";\n\nexport const graphqlDocumentName = (doc: DocumentNode) => {\n  const lastDefinition: OperationDefinitionNode | undefined = [...doc.definitions]\n    .reverse()\n    .find((definition) => definition.kind == \"OperationDefinition\") as any;\n  if (lastDefinition) {\n    if (lastDefinition.name) {\n      return lastDefinition.name.value;\n    }\n    const firstSelection = lastDefinition.selectionSet.selections.find((node) => node.kind == \"Field\") as any;\n    return firstSelection.name.value;\n  }\n};\n\nexport const urlParamExchange: Exchange = ({ forward }) => {\n  return (ops$) =>\n    pipe(\n      ops$,\n      onPush((op) => {\n        if (op.context.url && op.query && !op.context.url.includes(\"?\")) {\n          const operation = graphqlDocumentName(op.query) || \"unknown\";\n\n          op.context = {\n            ...op.context,\n            url: op.context.url + `?operation=${operation}`,\n          };\n        }\n      }),\n      forward\n    );\n};\n"]}
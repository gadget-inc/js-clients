{"version":3,"file":"ModelManager.js","sourceRoot":"","sources":["../../src/ModelManager.ts"],"names":[],"mappings":"","sourcesContent":["import type { GadgetConnection } from \"./GadgetConnection.js\";\nimport type { GadgetRecord } from \"./GadgetRecord.js\";\nimport type { GadgetRecordList } from \"./GadgetRecordList.js\";\n\n/**\n * Object representing one model's API in a high level way\n * This is a generic interface. Concrete ones are generated by Gadget, */\nexport interface AnyModelManager {\n  connection: GadgetConnection;\n  findOne(id: string, options: any): Promise<GadgetRecord<any>>;\n  maybeFindOne(id: string, options: any): Promise<GadgetRecord<any> | null>;\n  findMany(options: any): Promise<GadgetRecordList<any>>;\n  findFirst(options: any): Promise<GadgetRecord<any>>;\n  maybeFindFirst(options: any): Promise<GadgetRecord<any> | null>;\n}\n"]}
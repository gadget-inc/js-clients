{"version":3,"file":"Provider.js","sourceRoot":"","sources":["../../src/Provider.tsx"],"names":[],"mappings":";;;;AACA,4CAA4E;AAE5E,uDAAmD;AAMnD,MAAM,uBAAuB,GAAG;;;;;;;;;;;CAW/B,CAAC;AAEK,MAAM,QAAQ,GAAG,CAAC,EAAE,QAAQ,EAAE,GAAG,EAA2C,EAAE,EAAE;IACrF,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,IAAA,gBAAQ,EAA0B,IAAI,CAAC,CAAC;IACxE,MAAM,OAAO,GAAG,CAAC,CAAC,QAAQ,CAAC;IAC3B,MAAM,EAAE,KAAK,EAAE,GAAG,QAAQ,IAAI,EAAE,CAAC;IACjC,MAAM,OAAO,GAAG,KAAK,EAAE,GAAG,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC;IAEnD,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;IAErE,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,WAAW,CAAC;YACV,KAAK,EAAE,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;SACnD,CAAC,CAAC;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,GAAG,IAAA,gBAAQ,EAA0B;QACpE,KAAK,EAAE,uBAAuB;KAC/B,CAAC,CAAC;IAEH,OAAO,CAAC,KAAK,CAAC,gDAAgD,EAAE;QAC9D,QAAQ;QACR,OAAO;QACP,OAAO;QACP,YAAY;QACZ,IAAI;QACJ,QAAQ;QACR,KAAK;KACN,CAAC,CAAC;IAEH,OAAO,8BAAC,gBAAkB,IAAC,GAAG,EAAE,GAAG,IAAG,QAAQ,CAAsB,CAAC;AACvE,CAAC,CAAC;AA7BW,QAAA,QAAQ,YA6BnB","sourcesContent":["import type { AnyClient } from \"@gadgetinc/api-client-core\";\nimport { Provider as GadgetUrqlProvider, useQuery } from \"@gadgetinc/react\";\nimport type { ReactNode } from \"react\";\nimport React, { useEffect, useState } from \"react\";\n\ntype ProviderLocation = {\n  query?: URLSearchParams;\n};\n\nconst BigCommerceSessionQuery = `\n  query BigCommerceSession($session: String!) {\n    currentSession {\n      id\n      bigCommerceUserId\n      bigCommerceStore {\n        storeHash\n      }\n      roles\n    }\n  }\n`;\n\nexport const Provider = ({ children, api }: { children: ReactNode; api: AnyClient }) => {\n  const [location, setLocation] = useState<ProviderLocation | null>(null);\n  const isReady = !!location;\n  const { query } = location ?? {};\n  const session = query?.get(\"session\") ?? undefined;\n\n  const gadgetAppUrl = new URL(api.connection.options.endpoint).origin;\n\n  useEffect(() => {\n    setLocation({\n      query: new URLSearchParams(window.location.search),\n    });\n  }, []);\n\n  const [{ data, fetching, error }] = useQuery<{ currentSession: any }>({\n    query: BigCommerceSessionQuery,\n  });\n\n  console.debug(\"[gadget-react-big-commerce] provider rendering\", {\n    location,\n    isReady,\n    session,\n    gadgetAppUrl,\n    data,\n    fetching,\n    error,\n  });\n\n  return <GadgetUrqlProvider api={api}>{children}</GadgetUrqlProvider>;\n};\n"]}
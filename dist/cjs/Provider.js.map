{"version":3,"file":"Provider.js","sourceRoot":"","sources":["../../src/Provider.tsx"],"names":[],"mappings":";;;;AACA,4CAAkE;AAElE,uDAAiD;AAEjD,MAAM,oBAAoB,GAAG,wBAAwB,CAAC;AAEtD,8GAA8G;AACvG,MAAM,QAAQ,GAAG,KAAK,IAAI,EAAE;IACjC,IAAI,MAAM,CAAC;IACX,IAAI,CAAC;QACH,MAAM,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;IAClE,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,wBAAwB,CAAC,EAAE,CAAC;YACrD,MAAM,IAAI,KAAK,CACb,+CAA+C,oBAAoB,qDAAqD,CACzH,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,MAAM,iBAAiB,GAAG,MAAM,CAAC,iBAAuE,CAAC;IACzG,IAAI,OAAO,IAAI,iBAAiB,EAAE,CAAC;QACjC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IACD,OAAO,iBAAiB,CAAC,KAAK,CAAC;AACjC,CAAC,CAAC;AAnBW,QAAA,QAAQ,YAmBnB;AAEF;;GAEG;AACI,MAAM,QAAQ,GAAG,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,YAAY,GAAG,IAAI,EAAmE,EAAE,EAAE;IAClI,MAAM,eAAe,GAAG,IAAA,cAAM,EAAyB,IAAI,CAAC,CAAC;IAE7D,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,GAAG,CAAC,UAAU,CAAC,qBAAqB,CAAC;gBACnC,cAAc,EAAE,IAAI;aACrB,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,IAAI,YAAY,GAAG,eAAe,CAAC,OAAO,CAAC;QAC3C,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,YAAY,GAAG,IAAA,gBAAQ,GAAE,CAAC;YAC1B,eAAe,CAAC,OAAO,GAAG,YAAY,CAAC;QACzC,CAAC;QAED,GAAG,CAAC,UAAU,CAAC,qBAAqB,CAAC;YACnC,MAAM,EAAE;gBACN,KAAK,CAAC,YAAY,CAAC,MAAyB,EAAE,IAAiB;oBAC7D,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC;oBACjC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC1C,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC,CAAC;oBACnD,IAAI,CAAC,OAAO,KAAZ,IAAI,CAAC,OAAO,GAAK,EAAE,EAAC;oBACpB,OAAO,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE,GAAG;wBACjC,IAAI,CAAC,OAAkC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;oBACxD,CAAC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC,kCAAkC,CAAC,MAA2B;oBAClE,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC;oBACjC,MAAM,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;gBAC/C,CAAC;aACF;SACF,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC,CAAC;IAExB,OAAO,8BAAC,gBAAkB,IAAC,GAAG,EAAE,GAAG,IAAG,QAAQ,CAAsB,CAAC;AACvE,CAAC,CAAC;AArCW,QAAA,QAAQ,YAqCnB","sourcesContent":["import type { AnyClient } from \"@gadgetinc/core\";\nimport { Provider as GadgetUrqlProvider } from \"@gadgetinc/react\";\nimport type { ReactNode } from \"react\";\nimport React, { useEffect, useRef } from \"react\";\n\nconst AUTH_TOKEN_TOOL_NAME = \"__getGadgetAuthTokenV1\";\n\n/** Get the backend auth token for the current widget using the special __getGadgetAuthTokenV1 backend tool */\nexport const getToken = async () => {\n  let result;\n  try {\n    result = await window.openai.callTool(AUTH_TOKEN_TOOL_NAME, {});\n  } catch (error: any) {\n    if (error.message.includes(\"MCP Resource not found\")) {\n      throw new Error(\n        `Backend Gadget MCP server does not have the ${AUTH_TOKEN_TOOL_NAME} tool defined which is required for authentication.`\n      );\n    } else {\n      throw error;\n    }\n  }\n\n  const structuredContent = result.structuredContent as { token: string } | { token: null; error: string };\n  if (\"error\" in structuredContent) {\n    throw new Error(structuredContent.error);\n  }\n  return structuredContent.token;\n};\n\n/**\n * React Provider that ChatGPT Apps Widgets should be wrapped in to make calls to the Gadget backend.\n */\nexport const Provider = ({ children, api, authenticate = true }: { children: ReactNode; api: AnyClient; authenticate?: boolean }) => {\n  const tokenPromiseRef = useRef<Promise<string> | null>(null);\n\n  useEffect(() => {\n    if (!authenticate) {\n      api.connection.setAuthenticationMode({\n        browserSession: true,\n      });\n      return;\n    }\n\n    let tokenPromise = tokenPromiseRef.current;\n    if (!tokenPromise) {\n      tokenPromise = getToken();\n      tokenPromiseRef.current = tokenPromise;\n    }\n\n    api.connection.setAuthenticationMode({\n      custom: {\n        async processFetch(_input: RequestInfo | URL, init: RequestInit) {\n          const token = await tokenPromise;\n          const headers = new Headers(init.headers);\n          headers.append(\"Authorization\", `Bearer ${token}`);\n          init.headers ??= {};\n          headers.forEach(function (value, key) {\n            (init.headers as Record<string, string>)[key] = value;\n          });\n        },\n        async processTransactionConnectionParams(params: Record<string, any>) {\n          const token = await tokenPromise;\n          params.auth = { type: \"custom\", jwt: token };\n        },\n      },\n    });\n  }, [api, authenticate]);\n\n  return <GadgetUrqlProvider api={api}>{children}</GadgetUrqlProvider>;\n};\n"]}
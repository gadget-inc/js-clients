{"version":3,"file":"useFindMany.js","sourceRoot":"","sources":["../../src/useFindMany.ts"],"names":[],"mappings":";;;AACA,gEAAyG;AACzG,iCAAgC;AAChC,2DAAqD;AACrD,iEAA2D;AAE3D,yCAAwD;AAExD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACI,MAAM,WAAW,GAAG,CAMzB,OAAwB,EACxB,OAA4E,EAG5E,EAAE;IACF,MAAM,eAAe,GAAG,IAAA,wCAAiB,EAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,mCAAiB,EACtB,OAAO,CAAC,QAAQ,CAAC,aAAa,EAC9B,OAAO,CAAC,QAAQ,CAAC,gBAAgB,EACjC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,EACnC,eAAe,CAChB,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;IAE/B,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,IAAA,kCAAc,EAAC,IAAA,uBAAY,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAEzE,MAAM,MAAM,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QAC1B,MAAM,QAAQ,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAClD,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;QAC1B,IAAI,IAAI,EAAE;YACR,MAAM,UAAU,GAAG,IAAA,qBAAG,EAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACjD,IAAI,UAAU,EAAE;gBACd,MAAM,OAAO,GAAG,IAAA,mCAAiB,EAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBACzD,IAAI,GAAG,kCAAgB,CAAC,IAAI,CAAC,OAAqC,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;aAC1F;SACF;QAED,MAAM,KAAK,GAAG,uBAAY,CAAC,iBAAiB,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAElF,OAAO,EAAE,GAAG,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACvC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;IAEzC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC3B,CAAC,CAAC;AAxCW,QAAA,WAAW,eAwCtB","sourcesContent":["import type { AnyModelManager, DefaultSelection, FindManyFunction, LimitToKnownKeys, Select } from \"@gadgetinc/api-client-core\";\nimport { GadgetRecordList, findManyOperation, get, hydrateConnection } from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { useGadgetQuery } from \"./useGadgetQuery.js\";\nimport { useStructuralMemo } from \"./useStructuralMemo.js\";\nimport type { OptionsType, ReadHookResult, ReadOperationOptions } from \"./utils.js\";\nimport { ErrorWrapper, useQueryArgs } from \"./utils.js\";\n\n/**\n * React hook to fetch a page of Gadget records from the backend, optionally sorted, filtered, searched, and selected from. Returns a standard hook result set with a tuple of the result object with `data`, `fetching`, and `error` keys, and a `refetch` function. `data` will be a `GadgetRecordList` object holding the list of returned records and pagination info.\n *\n * @param manager Gadget model manager to use\n * @param options options for filtering and searching records, and selecting the fields in each record of the result\n *\n * @example\n *\n * ```\n * export function Users() {\n *   const [result, refresh] = useFindMany(api.user, {\n *     select: {\n *       name: true,\n *     },\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No users found</>;\n *\n *   return <>{result.data.map((user) => <div>{user.name}</div>)}</>;\n * }\n * ```\n */\nexport const useFindMany = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n  Options extends F[\"optionsType\"] & ReadOperationOptions\n>(\n  manager: { findMany: F },\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"] & ReadOperationOptions>\n): ReadHookResult<\n  GadgetRecordList<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>\n> => {\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return findManyOperation(\n      manager.findMany.operationName,\n      manager.findMany.defaultSelection,\n      manager.findMany.modelApiIdentifier,\n      memoizedOptions\n    );\n  }, [manager, memoizedOptions]);\n\n  const [rawResult, refresh] = useGadgetQuery(useQueryArgs(plan, options));\n\n  const result = useMemo(() => {\n    const dataPath = [manager.findMany.operationName];\n    let data = rawResult.data;\n    if (data) {\n      const connection = get(rawResult.data, dataPath);\n      if (connection) {\n        const records = hydrateConnection(rawResult, connection);\n        data = GadgetRecordList.boot(manager as unknown as AnyModelManager, records, connection);\n      }\n    }\n\n    const error = ErrorWrapper.errorIfDataAbsent(rawResult, dataPath, options?.pause);\n\n    return { ...rawResult, data, error };\n  }, [manager, options?.pause, rawResult]);\n\n  return [result, refresh];\n};\n"]}
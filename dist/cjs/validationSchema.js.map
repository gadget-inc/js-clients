{"version":3,"file":"validationSchema.js","sourceRoot":"","sources":["../../src/validationSchema.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { ISchema } from \"yup\";\nimport { NumberSchema, StringSchema, array, boolean, date, mixed, number, object, string } from \"yup\";\nimport type {\n  GadgetEnumConfig,\n  GadgetObjectFieldConfig,\n  GadgetRangeFieldValidation,\n  GadgetRegexFieldValidation,\n} from \"./internal/gql/graphql.js\";\nimport { GadgetFieldType } from \"./internal/gql/graphql.js\";\nimport type { FieldMetadata } from \"./metadata.js\";\n\nconst fileInputValidator = object({\n  base64: string(),\n  copyURL: string(),\n  directUploadToken: string(),\n  mimeType: string(),\n  fileName: string(),\n  file: object(),\n});\n\nconst richTextInputValidator = object({\n  markdown: string().required(),\n});\n\nconst validatorForField = (field: FieldMetadata) => {\n  let validator;\n  switch (field.fieldType) {\n    case GadgetFieldType.Boolean: {\n      validator = boolean();\n      break;\n    }\n    case GadgetFieldType.Code:\n    case GadgetFieldType.Password:\n    case GadgetFieldType.EncryptedString:\n    case GadgetFieldType.Color:\n    case GadgetFieldType.String: {\n      validator = string();\n      break;\n    }\n    case GadgetFieldType.DateTime: {\n      validator = date();\n      break;\n    }\n    case GadgetFieldType.Email: {\n      validator = string().email();\n      break;\n    }\n    case GadgetFieldType.Url: {\n      validator = string().url();\n      break;\n    }\n    case GadgetFieldType.Enum: {\n      const config = field.configuration as GadgetEnumConfig;\n      const element = string().oneOf(config.options.map((option) => option.name));\n      if (config.allowMultiple) {\n        validator = array(element);\n      } else {\n        validator = element;\n      }\n      break;\n    }\n    case GadgetFieldType.File: {\n      validator = fileInputValidator;\n      break;\n    }\n    case GadgetFieldType.Number: {\n      validator = number();\n      break;\n    }\n    case GadgetFieldType.Id: {\n      validator = string();\n      break;\n    }\n    case GadgetFieldType.RecordState:\n    case GadgetFieldType.Any:\n    case GadgetFieldType.Json: {\n      validator = mixed();\n      break;\n    }\n    case GadgetFieldType.Money: {\n      validator = string();\n      break;\n    }\n    case GadgetFieldType.Object: {\n      const config = field.configuration as GadgetObjectFieldConfig;\n      validator = validationSchema(config.fields as any);\n      break;\n    }\n    case GadgetFieldType.RichText: {\n      validator = richTextInputValidator;\n      break;\n    }\n    case GadgetFieldType.RoleAssignments: {\n      validator = array(string());\n      break;\n    }\n    case GadgetFieldType.Vector: {\n      validator = array(number());\n      break;\n    }\n    case GadgetFieldType.BelongsTo:\n    case GadgetFieldType.HasOne: {\n      // TODO: implement relationship validations\n      validator = object();\n      break;\n    }\n    case GadgetFieldType.HasManyThrough:\n    case GadgetFieldType.HasMany: {\n      // TODO: implement relationship validations\n      validator = array();\n      break;\n    }\n    default: {\n      throw new Error(`unknown field type ${field.fieldType} for validator generation`);\n    }\n  }\n\n  if (field.requiredArgumentForInput) {\n    validator = validator.required();\n  } else {\n    validator = (validator.nullable() as any).default(null);\n  }\n\n  for (const validation of field.configuration.validations) {\n    switch (validation?.__typename) {\n      case \"GadgetRangeFieldValidation\": {\n        const rangeValidation = validation as GadgetRangeFieldValidation;\n        if (validator instanceof StringSchema || validator instanceof NumberSchema) {\n          if (rangeValidation.min) {\n            validator = validator.min(rangeValidation.min);\n          }\n          if (rangeValidation.max) {\n            validator = validator.max(rangeValidation.max);\n          }\n        }\n        break;\n      }\n\n      case \"GadgetRegexFieldValidation\": {\n        const regexValidation = validation as GadgetRegexFieldValidation;\n        if (regexValidation.pattern && validator instanceof StringSchema) {\n          validator = validator.matches(new RegExp(regexValidation.pattern));\n        }\n        break;\n      }\n    }\n  }\n\n  return validator;\n};\n\n/**\n * Build a Yup validation schema given some fields metadata for validating that a data object conforms to the schema at runtime\n */\nexport const validationSchema = (fields: FieldMetadata[]) => {\n  const validators: Record<string, ISchema<any>> = {};\n  for (const field of fields) {\n    validators[field.apiIdentifier] = validatorForField(field);\n  }\n  return object(validators);\n};\n"]}
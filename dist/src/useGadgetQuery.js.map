{"version":3,"file":"useGadgetQuery.js","sourceRoot":"","sources":["../../src/useGadgetQuery.ts"],"names":[],"mappings":";;;AAAA,iCAAmC;AAEnC,+BAAgC;AAChC,qDAA2D;AAC3D,mCAA0E;AAUnE,MAAM,cAAc,GAAG,CAC5B,IAAyC,EACN,EAAE;IACrC,IAAI,CAAC,IAAA,kBAAU,EAAC,wCAAuB,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,8BAAsB,CAAC,CAAC;IAClF,MAAM,OAAO,GAAG,IAAA,+BAAuB,EAAC,IAAI,CAAC,CAAC;IAC9C,OAAO,IAAA,eAAQ,EAAC,OAAO,CAAC,CAAC;AAC3B,CAAC,CAAC;AANW,QAAA,cAAc,kBAMzB","sourcesContent":["import { useContext } from \"react\";\nimport type { AnyVariables, UseQueryArgs, UseQueryResponse } from \"urql\";\nimport { useQuery } from \"urql\";\nimport { GadgetUrqlClientContext } from \"./GadgetProvider\";\nimport { noProviderErrorMessage, useMemoizedQueryOptions } from \"./utils\";\n\nexport type UseGadgetQueryArgs<Variables extends AnyVariables, Data = any> = UseQueryArgs<Variables, Data> & {\n  /**\n   * Marks this query as one that should suspend the react component rendering while executing, instead of returning `{fetching: true}` to the caller.\n   * Useful if you want to allow components higher in the tree to show spinners instead of having every component manage its own loading state.\n   */\n  suspense?: boolean;\n};\n\nexport const useGadgetQuery = <Data = any, Variables extends AnyVariables = AnyVariables>(\n  args: UseGadgetQueryArgs<Variables, Data>\n): UseQueryResponse<Data, Variables> => {\n  if (!useContext(GadgetUrqlClientContext)) throw new Error(noProviderErrorMessage);\n  const options = useMemoizedQueryOptions(args);\n  return useQuery(options);\n};\n"]}
{"version":3,"file":"useAction.js","sourceRoot":"","sources":["../../src/useAction.ts"],"names":[],"mappings":";;;AAAA,gEAWoC;AACpC,iCAAgC;AAChC,+BAAuE;AAEvE,2DAAwD;AAExD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AACI,MAAM,SAAS,GAAG,CAMvB,MAAS,EACT,OAAqD,EAIrD,EAAE;IACF,MAAM,eAAe,GAAG,IAAA,qCAAiB,EAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,iCAAe,EACpB,MAAM,CAAC,aAAa,EACpB,MAAM,CAAC,gBAAgB,EACvB,MAAM,CAAC,kBAAkB,EACzB,MAAM,CAAC,mBAAmB,EAC1B,MAAM,CAAC,SAAS,EAChB,eAAe,EACf,MAAM,CAAC,SAAS,CACjB,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC;IAE9B,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,GAAG,IAAA,kBAAW,EAGvC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEd,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IACzB,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACvB,IAAI,IAAI,EAAE;QACR,MAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACxC,IAAI,MAAM,CAAC,SAAS,EAAE;YACpB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;SACpC;QAED,MAAM,YAAY,GAAG,IAAA,qBAAG,EAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAChD,IAAI,YAAY,EAAE;YAChB,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;YACtC,IAAI,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;gBACvB,KAAK,GAAG,IAAI,oBAAa,CAAC;oBACxB,aAAa,EAAE,CAAC,IAAA,gCAAc,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC3C,CAAC,CAAC;aACJ;SACF;QAED,IAAI,GAAG,IAAA,+BAAa,EAAC,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC;KACxE;IAED,OAAO;QACL;YACE,GAAG,MAAM;YACT,KAAK;YACL,IAAI;SACL;QACD,CAAC,SAAS,EAAE,OAAO,EAAE,EAAE;YACrB,4HAA4H;YAC5H,yEAAyE;YACzE,OAAO,WAAW,CAAC,SAAS,EAAE;gBAC5B,GAAG,OAAO;gBACV,mBAAmB,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAmB,IAAI,EAAE,CAAC,EAAE,IAAA,4BAAU,EAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;aACtG,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAlEW,QAAA,SAAS,aAkEpB","sourcesContent":["import {\n  ActionFunction,\n  actionOperation,\n  capitalize,\n  DefaultSelection,\n  gadgetErrorFor,\n  GadgetRecord,\n  get,\n  hydrateRecord,\n  LimitToKnownKeys,\n  Select,\n} from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { CombinedError, useMutation, UseMutationResponse } from \"urql\";\nimport { OptionsType } from \"./OptionsType\";\nimport { useStructuralMemo } from \"./useStructuralMemo\";\n\n/**\n * React hook to run a Gadget model action.\n *\n * @param action any action function from a Gadget manager\n * @param options action options, like selecting the fields in the result\n *\n * @example\n * ```\n * export function CreateUserButton(props: { name: string; email: string }) {\n *   const [result, createUser] = useAction(Client.user.create, props.email, {\n *     select: {\n *       id: true,\n *     },\n *   });\n *\n *   const onClick = () => createUser({\n *     widget: {\n *       name: props.name,\n *       email: props.email,\n *     }\n *   });\n *\n *   return (\n *     <>\n *       {result.error && <>Failed to create user: {result.error.toString()}</>}\n *       {result.fetching && <>Creating user...</>}\n *       {result.data && <>Created user with id={result.data.id}</>}\n *       <button onClick={onClick}>Create user</button>\n *     </>\n *   );\n * }\n */\nexport const useAction = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends ActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends F[\"optionsType\"]\n>(\n  action: F,\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"]>\n): UseMutationResponse<\n  GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>,\n  Exclude<F[\"variablesType\"], null | undefined>\n> => {\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return actionOperation(\n      action.operationName,\n      action.defaultSelection,\n      action.modelApiIdentifier,\n      action.modelSelectionField,\n      action.variables,\n      memoizedOptions,\n      action.namespace\n    );\n  }, [action, memoizedOptions]);\n\n  const [result, runMutation] = useMutation<\n    GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>,\n    F[\"variablesType\"]\n  >(plan.query);\n\n  let error = result.error;\n  let data = result.data;\n  if (data) {\n    const dataPath = [action.operationName];\n    if (action.namespace) {\n      dataPath.unshift(action.namespace);\n    }\n\n    const mutationData = get(result.data, dataPath);\n    if (mutationData) {\n      const errors = mutationData[\"errors\"];\n      if (errors && errors[0]) {\n        error = new CombinedError({\n          graphQLErrors: [gadgetErrorFor(errors[0])],\n        });\n      }\n    }\n\n    data = hydrateRecord(result, mutationData[action.modelSelectionField]);\n  }\n\n  return [\n    {\n      ...result,\n      error,\n      data,\n    },\n    (variables, context) => {\n      // Adding the model's additional typename ensures document cache will properly refresh, regardless of whether __typename was\n      // selected (and sometimes we can't even select it, like delete actions!)\n      return runMutation(variables, {\n        ...context,\n        additionalTypenames: [...(context?.additionalTypenames ?? []), capitalize(action.modelApiIdentifier)],\n      });\n    },\n  ];\n};\n"]}
{"version":3,"file":"support.js","sourceRoot":"","sources":["../../src/support.ts"],"names":[],"mappings":"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","sourcesContent":["import { context, SpanOptions, SpanStatusCode, trace } from \"@opentelemetry/api\";\nimport { CombinedError, OperationResult } from \"@urql/core\";\nimport { DataHydrator } from \"./DataHydrator\";\nimport { GadgetRecord } from \"./GadgetRecord\";\n\n/**\n * Generic type of the state of any record of a Gadget model\n **/\nexport type AnyState = string | { [key: string]: AnyState };\n\n/**\n * Error caused by a violated internal expectation that isn't the users fault, but the Gadget platform's. Often the best way to handle is to just retry.\n **/\nexport class GadgetInternalError extends Error {}\n\n/**\n * An error representing misuse or a violation of the assumptions of the Gadget Client.\n */\nexport class GadgetClientError extends Error {}\n\n/**\n * A Gadget API error with an `errorCode` and `message` describing the error. Most often these errors are caused by invalid input data or by misconfigured Gadget models. Consult the documentation for the specific `errorCode` to learn more.\n **/\nexport class GadgetOperationError extends Error {\n  constructor(incomingMessage: string, readonly errorCode: string) {\n    super(incomingMessage.startsWith(\"GGT_\") ? incomingMessage : `${errorCode}: ${incomingMessage}`);\n  }\n}\n\n/**\n * Interface representing one message on one invalid field for a `GadgetValidationError`\n */\nexport interface InvalidFieldError {\n  apiIdentifier: string;\n  message: string;\n}\n\n/**\n * A Gadget API error representing a backend validation error on the input data for an action. Thrown when any of the validations configured on a model fail for the given input data. Has a `validationErrors` property describing which fields failed validation, with messages for each.\n **/\nexport class GadgetValidationError extends Error {\n  errorCode = \"GGT_INVALID_RECORD\";\n\n  constructor(message: string, readonly validationErrors: InvalidFieldError[]) {\n    super(message);\n  }\n}\n\n/**\n * A Gadget API error that represents an error from the server. Thrown when the server enounters data that is not unique despite the existence of unique validation on a field. If you receive this error, it is likely that you added a unique validation to a field that has duplicate data.\n */\nexport class GadgetNonUniqueDataError extends Error {\n  errorCode = \"GGT_NON_UNIQUE_DATA\";\n}\n\nexport function assert<T>(value: T | undefined | null, message?: string): T {\n  if (!value) {\n    throw new Error(\"assertion error\" + (message ? `: ${message}` : \"\"));\n  }\n  return value;\n}\n\nexport const get = (object: Record<string, any> | null | undefined, path: string[]): any => {\n  const length = path.length;\n  let index = 0;\n  while (object != null && index < length) {\n    object = object[path[index++]];\n  }\n\n  return index && index == length ? object : undefined;\n};\n\nexport const capitalize = (str: string | undefined | null) => {\n  const result = str === null || str === undefined ? \"\" : String(str);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n};\n\nexport const camelize = (term: string, uppercaseFirstLetter = true) => {\n  let result = \"\" + term;\n\n  if (uppercaseFirstLetter) {\n    result = result.replace(/^[a-z\\d]*/, (a) => {\n      return capitalize(a);\n    });\n  } else {\n    result = result.replace(new RegExp(\"^(?:(?=\\\\b|[A-Z_])|\\\\w)\"), (a) => {\n      return a.toLowerCase();\n    });\n  }\n\n  result = result.replace(/(?:_|(\\/))([a-z\\d]*)/gi, (_match, a, b, _idx, _string) => {\n    a || (a = \"\");\n    return \"\" + a + capitalize(b);\n  });\n\n  return result;\n};\n\nexport const sortTypeName = (modelApiIdentifier: string) => `${camelize(modelApiIdentifier)}Sort`;\nexport const filterTypeName = (modelApiIdentifier: string) => `${camelize(modelApiIdentifier)}Filter`;\n\nexport const assertOperationSuccess = (response: OperationResult<any>, dataPath: string[]) => {\n  if (response.error) {\n    if (response.error instanceof CombinedError && (response.error.networkError as any as Error[])?.length) {\n      response.error.message = (response.error.networkError as any as Error[]).map((error) => \"[Network] \" + error.message).join(\"\\n\");\n    }\n    throw response.error;\n  }\n\n  const result = get(response.data, dataPath);\n  if (result === undefined) {\n    throw new GadgetInternalError(`Internal Error: Gadget API didn't return expected data. Nothing found in response at ${dataPath}`);\n  } else if (result === null) {\n    throw new GadgetInternalError(`Internal Error: Gadget API returned no data at ${dataPath}`);\n  }\n\n  return result;\n};\n\nexport const gadgetErrorFor = (error: Record<string, any>) => {\n  if (error.code == \"GGT_INVALID_RECORD\") {\n    return new GadgetValidationError(error.message, error.validationErrors);\n  } else if (error.code == \"GGT_UNKNOWN\" && error.message.includes(\"duplicate key value violates unique constraint\")) {\n    return new GadgetNonUniqueDataError(error.message);\n  } else {\n    return new GadgetOperationError(error.message, error.code);\n  }\n};\n\nexport const assertMutationSuccess = (response: OperationResult<any>, dataPath: string[]) => {\n  const operationResponse = assertOperationSuccess(response, dataPath);\n\n  if (!operationResponse.success) {\n    const firstErrorBlob = operationResponse.errors && operationResponse.errors[0];\n    if (firstErrorBlob) {\n      throw gadgetErrorFor(firstErrorBlob);\n    } else {\n      throw new GadgetOperationError(`Gadget API operation not successful.`, \"GGT_UNKNOWN\");\n    }\n  }\n\n  return operationResponse;\n};\n\n// All of these functions only need the data bit, so narrow the type to make it easier to use these functions\ntype Result = Pick<OperationResult<any>, \"data\">;\n\nexport const getHydrator = (response: Result) => {\n  if (response.data?.gadgetMeta?.hydrations) {\n    return new DataHydrator(response.data?.gadgetMeta?.hydrations);\n  }\n};\n\nexport const hydrateRecord = <Shape = any>(response: Result, record: any): Shape => {\n  const hydrator = getHydrator(response);\n  if (hydrator) {\n    record = hydrator.apply(record);\n  }\n  return new GadgetRecord<Shape>(record);\n};\n\nexport const hydrateRecordArray = <Shape = any>(response: Result, records: Array<any>) => {\n  const hydrator = getHydrator(response);\n  if (hydrator) {\n    records = hydrator.apply(records) as any;\n  }\n  return records?.map((record) => new GadgetRecord<Shape>(record));\n};\n\nexport const hydrateConnection = <Shape = any>(response: Result, connection: { edges: { node: Node }[] }) => {\n  const nodes = connection.edges.map((edge) => edge.node);\n  return hydrateRecordArray<Shape>(response, nodes);\n};\n\nexport const toPrimitiveObject = (value: any): any => {\n  if (value != null && typeof value.toJSON === \"function\") value = value.toJSON();\n  if (value === undefined) return undefined;\n  if (value === null) return null;\n  if (typeof value === \"boolean\") return value;\n  if (typeof value === \"string\") return value;\n  if (typeof value === \"number\") return Number.isFinite(value) ? value : null;\n  if (typeof value === \"object\") {\n    if (Array.isArray(value)) {\n      const arr = [];\n\n      for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        arr[i] = v === undefined ? null : toPrimitiveObject(v);\n      }\n\n      return arr;\n    }\n    if (Object.prototype.toString.call(value) === \"[object Error]\") return {};\n    if (Object.prototype.toString.call(value) === \"[object Object]\") {\n      const obj: any = {};\n      for (const key of Object.keys(value)) {\n        const parsed = toPrimitiveObject(value[key]);\n        // Remove undefined fields\n        if (parsed !== undefined) obj[key] = parsed;\n      }\n      return obj;\n    }\n  }\n};\n\nexport const tracer = trace.getTracer(\"gadget-api-client\");\n\n/**\n * Get a string representing an error that is an `Error` object or anything else that might be `throw`n\n */\nexport const errorMessage = (error: unknown) => {\n  if (typeof error == \"string\") {\n    return error;\n  } else if (error && (error as any)?.message) {\n    return (error as any).message;\n  } else {\n    return String(error);\n  }\n};\n\n/** Wrap a function in tracing, and return it  */\nexport const traceFunction = <T extends (...args: any[]) => any>(name: string, func: T, options?: SpanOptions): T => {\n  return async function (this: any, ...args: Parameters<T>) {\n    const span = tracer.startSpan(name, options, context.active());\n    return await context.with(trace.setSpan(context.active(), span), async () => {\n      try {\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        const result = await func.call(this, ...args);\n        span.end();\n        return result;\n      } catch (err) {\n        span.setStatus({ code: SpanStatusCode.ERROR, message: errorMessage(err) });\n        span.end();\n        throw err;\n      }\n    });\n  } as T;\n};\n"]}
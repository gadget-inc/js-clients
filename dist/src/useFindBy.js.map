{"version":3,"file":"useFindBy.js","sourceRoot":"","sources":["../../src/useFindBy.ts"],"names":[],"mappings":";;;AAAA,gEAYoC;AACpC,iCAAgC;AAChC,+BAA+E;AAE/E,2DAAwD;AAExD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACI,MAAM,SAAS,GAAG,CAMvB,MAAS,EACT,KAAa,EACb,OAAiG,EAGjG,EAAE;IACF,MAAM,eAAe,GAAG,IAAA,qCAAiB,EAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,yCAAuB,EAC5B,MAAM,CAAC,aAAa,EACpB,MAAM,CAAC,kBAAkB,EACzB,KAAK,EACL,MAAM,CAAC,gBAAgB,EACvB,MAAM,CAAC,kBAAkB,EACzB,eAAe,CAChB,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC;IAErC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,IAAA,eAAQ,EAAC,IAAA,8BAAY,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAEhE,MAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IACxC,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACvB,IAAI,IAAI,EAAE;QACR,MAAM,UAAU,GAAG,IAAA,qBAAG,EAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC9C,IAAI,UAAU,EAAE;YACd,OAAO,GAAG,IAAA,mCAAiB,EAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YAChD,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;SACnB;KACF;IAED,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IACzB,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,gBAAgB,GAAG,IAAA,qCAAmB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAE/D,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,KAAK,GAAG,IAAI,oBAAa,CAAC;gBACxB,aAAa,EAAE,CAAC,IAAA,uCAAqB,EAAC,MAAM,CAAC,kBAAkB,EAAE,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;aACpG,CAAC,CAAC;SACJ;aAAM,IAAI,gBAAgB,EAAE;YAC3B,KAAK,GAAG,IAAI,oBAAa,CAAC;gBACxB,aAAa,EAAE,CAAC,gBAAgB,CAAC;aAClC,CAAC,CAAC;SACJ;KACF;IAED,OAAO,CAAC,EAAE,GAAG,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;AAC/C,CAAC,CAAC;AArDW,QAAA,SAAS,aAqDpB","sourcesContent":["import {\n  DefaultSelection,\n  findOneByFieldOperation,\n  FindOneFunction,\n  GadgetRecord,\n  get,\n  getNonNullableError,\n  getNonUniqueDataError,\n  getQueryArgs,\n  hydrateConnection,\n  LimitToKnownKeys,\n  Select,\n} from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { CombinedError, useQuery, UseQueryArgs, UseQueryResponse } from \"urql\";\nimport { OptionsType } from \"./OptionsType\";\nimport { useStructuralMemo } from \"./useStructuralMemo\";\n\n/**\n * React hook to fetch a Gadget record using the `findByXYZ` method of a given manager.\n *\n * @param finder `findByXYZ` function from a Gadget manager that will be used\n * @param value field value of the record to fetch\n * @param options options for selecting the fields in the result\n *\n * @example\n * ```\n * export function UserByEmail(props: { email: string }) {\n *   const [result, refresh] = useFindBy(Client.user.findByEmail, props.email, {\n *     select: {\n *       name: true,\n *     },\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No user found with id={props.id}</>;\n *\n *   return <div>{result.data.name}</div>;\n * }\n */\nexport const useFindBy = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends FindOneFunction<GivenOptions, any, SchemaT, any>,\n  Options extends F[\"optionsType\"] & Omit<UseQueryArgs, \"query\" | \"variables\">\n>(\n  finder: F,\n  value: string,\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"]> & Omit<UseQueryArgs, \"query\" | \"variables\">\n): UseQueryResponse<\n  GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>\n> => {\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return findOneByFieldOperation(\n      finder.operationName,\n      finder.findByVariableName,\n      value,\n      finder.defaultSelection,\n      finder.modelApiIdentifier,\n      memoizedOptions\n    );\n  }, [finder, value, memoizedOptions]);\n\n  const [result, refresh] = useQuery(getQueryArgs(plan, options));\n\n  const dataPath = [finder.operationName];\n  let records = [];\n  let data = result.data;\n  if (data) {\n    const connection = get(result.data, dataPath);\n    if (connection) {\n      records = hydrateConnection(result, connection);\n      data = records[0];\n    }\n  }\n\n  let error = result.error;\n  if (!error) {\n    const nonNullableError = getNonNullableError(result, dataPath);\n\n    if (records.length > 1) {\n      error = new CombinedError({\n        graphQLErrors: [getNonUniqueDataError(finder.modelApiIdentifier, finder.findByVariableName, value)],\n      });\n    } else if (nonNullableError) {\n      error = new CombinedError({\n        graphQLErrors: [nonNullableError],\n      });\n    }\n  }\n\n  return [{ ...result, error, data }, refresh];\n};\n"]}
{"version":3,"file":"useGlobalAction.js","sourceRoot":"","sources":["../../src/useGlobalAction.ts"],"names":[],"mappings":";;;AAAA,gEAA6H;AAC7H,iCAAgC;AAChC,+BAAuE;AAEvE;;;;;;;;;;;;;;;;;;;;GAoBG;AACI,MAAM,eAAe,GAAG,CAC7B,MAAS,EACgE,EAAE;IAC3E,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,uCAAqB,EAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;IACzF,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEb,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,GAAG,IAAA,kBAAW,EAA0B,IAAI,CAAC,KAAK,CAAC,CAAC;IAE/E,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IACzB,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACvB,IAAI,IAAI,EAAE;QACR,IAAI,GAAG,IAAA,+BAAa,EAAC,MAAM,EAAE,IAAA,qBAAG,EAAC,MAAM,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QAEvE,IAAI,IAAI,EAAE;YACR,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAI,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;gBACvB,KAAK,GAAG,IAAI,oBAAa,CAAC;oBACxB,aAAa,EAAE,CAAC,IAAA,gCAAc,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC3C,CAAC,CAAC;aACJ;SACF;KACF;IAED,OAAO;QACL;YACE,GAAG,MAAM;YACT,KAAK;YACL,IAAI;SACL;QACD,WAAW;KACZ,CAAC;AACJ,CAAC,CAAC;AAhCW,QAAA,eAAe,mBAgC1B","sourcesContent":["import { gadgetErrorFor, get, GlobalActionFunction, globalActionOperation, hydrateRecord } from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { CombinedError, useMutation, UseMutationResponse } from \"urql\";\n\n/**\n * React hook to run a Gadget model action.\n *\n * @param action any action function from a Gadget manager\n * @param options action options, like selecting the fields in the result\n *\n * @example\n * ```\n * export function FlipAllWidgets(props: { name: string; email: string }) {\n *   const [result, flipAllWidgets] = useGlobalAction(Client.flipAllWidgets);\n *\n *   return (\n *     <>\n *       {result.error && <>Failed to flip all widgets: {result.error.toString()}</>}\n *       {result.fetching && <>Flipping all widgets...</>}\n *       {result.data && <>Flipped all widgets</>}\n *       <button onClick={() => flipAllWidgets()}>Flip all widgets</button>\n *     </>\n *   );\n * }\n */\nexport const useGlobalAction = <F extends GlobalActionFunction<any>>(\n  action: F\n): UseMutationResponse<any, Exclude<F[\"variablesType\"], null | undefined>> => {\n  const plan = useMemo(() => {\n    return globalActionOperation(action.operationName, action.variables, action.namespace);\n  }, [action]);\n\n  const [result, runMutation] = useMutation<any, F[\"variablesType\"]>(plan.query);\n\n  let error = result.error;\n  let data = result.data;\n  if (data) {\n    data = hydrateRecord(result, get(result.data, [action.operationName]));\n\n    if (data) {\n      const errors = data.getField(\"errors\");\n      if (errors && errors[0]) {\n        error = new CombinedError({\n          graphQLErrors: [gadgetErrorFor(errors[0])],\n        });\n      }\n    }\n  }\n\n  return [\n    {\n      ...result,\n      error,\n      data,\n    },\n    runMutation,\n  ];\n};\n"]}
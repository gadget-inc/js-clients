{"version":3,"file":"useGlobalAction.js","sourceRoot":"","sources":["../../src/useGlobalAction.ts"],"names":[],"mappings":";;;AACA,gEAAwE;AACxE,iCAA6C;AAE7C,2DAAwD;AAExD,mCAAuC;AAEvC;;;;;;;;;;;;;;;;;;;;GAoBG;AACI,MAAM,eAAe,GAAG,CAC7B,MAAS,EAC6D,EAAE;IACxE,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,uCAAqB,EAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;IACzF,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEb,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,GAAG,IAAA,qCAAiB,EAA0B,IAAI,CAAC,KAAK,CAAC,CAAC;IAErF,MAAM,iBAAiB,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;IAEzF,OAAO;QACL,iBAAiB;QACjB,IAAA,mBAAW,EACT,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YAC3B,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YACrD,OAAO,aAAa,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,EAAE,EAAE,MAAM,CAAC,CAAC;QAC/D,CAAC,EACD,CAAC,MAAM,EAAE,WAAW,CAAC,CACtB;KACF,CAAC;AACJ,CAAC,CAAC;AArBW,QAAA,eAAe,mBAqB1B;AAEF,MAAM,aAAa,GAAG,CAAC,MAAkC,EAAE,MAAiC,EAAE,EAAE;IAC9F,IAAI,KAAK,GAAG,oBAAY,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC7D,IAAI,IAAI,GAAG,SAAS,CAAC;IACrB,IAAI,MAAM,CAAC,IAAI,EAAE;QACf,IAAI,GAAG,IAAA,qBAAG,EAAC,MAAM,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;QAChD,IAAI,IAAI,EAAE;YACR,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC3B,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACnB,IAAI,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;gBACvB,KAAK,GAAG,oBAAY,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;aAChD;SACF;KACF;IACD,OAAO,EAAE,GAAG,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AACpC,CAAC,CAAC","sourcesContent":["import type { GlobalActionFunction } from \"@gadgetinc/api-client-core\";\nimport { get, globalActionOperation } from \"@gadgetinc/api-client-core\";\nimport { useCallback, useMemo } from \"react\";\nimport type { UseMutationState } from \"urql\";\nimport { useGadgetMutation } from \"./useGadgetMutation\";\nimport type { ActionHookResult } from \"./utils\";\nimport { ErrorWrapper } from \"./utils\";\n\n/**\n * React hook to run a Gadget model action.\n *\n * @param action any action function from a Gadget manager\n * @param options action options, like selecting the fields in the result\n *\n * @example\n * ```\n * export function FlipAllWidgets(props: { name: string; email: string }) {\n *   const [result, flipAllWidgets] = useGlobalAction(Client.flipAllWidgets);\n *\n *   return (\n *     <>\n *       {result.error && <>Failed to flip all widgets: {result.error.toString()}</>}\n *       {result.fetching && <>Flipping all widgets...</>}\n *       {result.data && <>Flipped all widgets</>}\n *       <button onClick={() => flipAllWidgets()}>Flip all widgets</button>\n *     </>\n *   );\n * }\n */\nexport const useGlobalAction = <F extends GlobalActionFunction<any>>(\n  action: F\n): ActionHookResult<any, Exclude<F[\"variablesType\"], null | undefined>> => {\n  const plan = useMemo(() => {\n    return globalActionOperation(action.operationName, action.variables, action.namespace);\n  }, [action]);\n\n  const [result, runMutation] = useGadgetMutation<any, F[\"variablesType\"]>(plan.query);\n\n  const transformedResult = useMemo(() => processResult(result, action), [result, action]);\n\n  return [\n    transformedResult,\n    useCallback(\n      async (variables, context) => {\n        const result = await runMutation(variables, context);\n        return processResult({ fetching: false, ...result }, action);\n      },\n      [action, runMutation]\n    ),\n  ];\n};\n\nconst processResult = (result: UseMutationState<any, any>, action: GlobalActionFunction<any>) => {\n  let error = ErrorWrapper.forMaybeCombinedError(result.error);\n  let data = undefined;\n  if (result.data) {\n    data = get(result.data, [action.operationName]);\n    if (data) {\n      const errors = data.errors;\n      data = data.result;\n      if (errors && errors[0]) {\n        error = ErrorWrapper.forErrorsResponse(errors);\n      }\n    }\n  }\n  return { ...result, error, data };\n};\n"]}
{"version":3,"file":"useMaybeFindFirst.js","sourceRoot":"","sources":["../../src/useMaybeFindFirst.ts"],"names":[],"mappings":";;;AAAA,gEAUoC;AACpC,iCAAgC;AAChC,+BAAgE;AAEhE,2DAAwD;AAExD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACI,MAAM,iBAAiB,GAAG,CAM/B,OAAyB,EACzB,OAAiG,EAGhG,EAAE;IACH,MAAM,YAAY,GAAG,EAAE,GAAG,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IAC9C,MAAM,eAAe,GAAG,IAAA,qCAAiB,EAAC,YAAY,CAAC,CAAC;IACxD,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,mCAAiB,EACtB,OAAO,CAAC,SAAS,CAAC,aAAa,EAC/B,OAAO,CAAC,SAAS,CAAC,gBAAgB,EAClC,OAAO,CAAC,SAAS,CAAC,kBAAkB,EACpC,eAAe,CAChB,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;IAE/B,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,IAAA,eAAQ,EAAC,IAAA,8BAAY,EAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;IAErE,MAAM,QAAQ,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IACnD,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC;IAC/B,IAAI,IAAI,EAAE;QACR,MAAM,UAAU,GAAG,IAAA,qBAAG,EAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC9C,IAAI,UAAU,EAAE;YACd,IAAI,GAAG,IAAA,mCAAiB,EAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;SACzD;aAAM;YACL,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;SACxB;KACF;IAED,OAAO,CAAC,EAAE,GAAG,MAAM,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC,CAAC;AApCW,QAAA,iBAAiB,qBAoC5B","sourcesContent":["import {\n  DefaultSelection,\n  FindFirstFunction,\n  findManyOperation,\n  GadgetRecord,\n  get,\n  getQueryArgs,\n  hydrateConnection,\n  LimitToKnownKeys,\n  Select,\n} from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { useQuery, UseQueryArgs, UseQueryResponse } from \"urql\";\nimport { OptionsType } from \"./OptionsType\";\nimport { useStructuralMemo } from \"./useStructuralMemo\";\n\n/**\n * React hook to fetch many Gadget records using the `maybeFindFirst` method of a given manager.\n *\n * @param manager Gadget model manager to use\n * @param options options for filtering and searching records, and selecting the fields in each record of the result\n *\n * @example\n *\n * ```\n * export function Users() {\n *   const [result, refresh] = useMaybeFindFirst(Client.user, {\n *     select: {\n *       name: true,\n *     },\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No user found</>;\n *\n *   return <div>{result.data.name}</div>;\n * }\n * ```\n */\nexport const useMaybeFindFirst = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends FindFirstFunction<GivenOptions, any, SchemaT, any>,\n  Options extends F[\"optionsType\"] & Omit<UseQueryArgs, \"query\" | \"variables\">\n>(\n  manager: { findFirst: F },\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"]> & Omit<UseQueryArgs, \"query\" | \"variables\">\n): UseQueryResponse<null | GadgetRecord<\n  Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>\n>> => {\n  const firstOptions = { ...options, first: 1 };\n  const memoizedOptions = useStructuralMemo(firstOptions);\n  const plan = useMemo(() => {\n    return findManyOperation(\n      manager.findFirst.operationName,\n      manager.findFirst.defaultSelection,\n      manager.findFirst.modelApiIdentifier,\n      memoizedOptions\n    );\n  }, [manager, memoizedOptions]);\n\n  const [result, refresh] = useQuery(getQueryArgs(plan, firstOptions));\n\n  const dataPath = [manager.findFirst.operationName];\n  let data = result.data ?? null;\n  if (data) {\n    const connection = get(result.data, dataPath);\n    if (connection) {\n      data = hydrateConnection(result, connection)[0] ?? null;\n    } else {\n      data = data[0] ?? null;\n    }\n  }\n\n  return [{ ...result, data }, refresh];\n};\n"]}
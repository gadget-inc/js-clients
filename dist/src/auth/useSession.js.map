{"version":3,"file":"useSession.js","sourceRoot":"","sources":["../../../src/auth/useSession.ts"],"names":[],"mappings":";;;AAAA,6DAAkD;AAClD,6CAA0C;AAc1C;;;GAGG;AACI,MAAM,UAAU,GAAG,GAAkB,EAAE;IAC5C,MAAM,GAAG,GAAG,IAAA,uBAAM,GAAE,CAAC;IACrB,IAAI,gBAAgB,IAAI,GAAG,IAAI,SAAS,IAAI,GAAG,IAAI,MAAM,IAAI,GAAG,EAAE;QAChE,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,GAAG,IAAA,eAAM,EAAC,GAAG,CAAC,cAAqB,EAAE;YACnE,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE;gBACN,GAAI,GAAG,CAAC,OAAe,CAAC,QAAQ,CAAC,gBAAgB;gBACjD,MAAM,EAAE,IAAI;gBACZ,IAAI,EAAE;oBACJ,GAAI,GAAG,CAAC,IAAY,CAAC,QAAQ,CAAC,gBAAgB;iBAC/C;aACF;SACF,CAAC,CAAC;QACH,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QACvB,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;QAChF,OAAO,OAAO,CAAC;KAChB;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;KACrE;AACH,CAAC,CAAC;AAnBW,QAAA,UAAU,cAmBrB","sourcesContent":["import { useApi } from \"../../src/GadgetProvider\";\nimport { useGet } from \"../../src/useGet\";\n\nexport interface GadgetSession {\n  id: string;\n  userId: string | null;\n  user: GadgetUser | null;\n  [key: string]: any;\n}\n\nexport interface GadgetUser {\n  id: string;\n  [key: string]: any;\n}\n\n/**\n * Used for fetching the current `Session` record from Gadget. Will suspend while the user is being fetched.\n * @returns The current session\n */\nexport const useSession = (): GadgetSession => {\n  const api = useApi();\n  if (\"currentSession\" in api && \"session\" in api && \"user\" in api) {\n    const [{ data: session, error }] = useGet(api.currentSession as any, {\n      suspense: true,\n      select: {\n        ...(api.session as any).findMany.defaultSelection,\n        userId: true,\n        user: {\n          ...(api.user as any).findMany.defaultSelection,\n        },\n      },\n    });\n    if (error) throw error;\n    if (!session) throw new Error(\"currentSession not found but should be present\");\n    return session;\n  } else {\n    throw new Error(\"api client does not have a Session or User model\");\n  }\n};\n"]}
{"version":3,"file":"useFindMany.js","sourceRoot":"","sources":["../../src/useFindMany.ts"],"names":[],"mappings":";;;AAAA,gEASoC;AACpC,iCAAgC;AAChC,+BAAgE;AAEhE,2DAAwD;AAExD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACI,MAAM,WAAW,GAAG,CAMzB,OAAwB,EACxB,OAAiG,EAGjG,EAAE;IACF,MAAM,eAAe,GAAG,IAAA,qCAAiB,EAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,mCAAiB,EACtB,OAAO,CAAC,QAAQ,CAAC,aAAa,EAC9B,OAAO,CAAC,QAAQ,CAAC,gBAAgB,EACjC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,EACnC,eAAe,CAChB,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;IAE/B,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,IAAA,eAAQ,EAAC;QACjC,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,SAAS,EAAE,IAAI,CAAC,SAAS;QACzB,OAAO,EAAE,OAAO,EAAE,OAAO;QACzB,KAAK,EAAE,OAAO,EAAE,KAAK;QACrB,aAAa,EAAE,OAAO,EAAE,aAAa;KACtC,CAAC,CAAC;IAEH,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACvB,IAAI,IAAI,EAAE;QACR,MAAM,UAAU,GAAG,IAAA,qBAAG,EAAC,MAAM,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;QACtE,IAAI,UAAU,EAAE;YACd,IAAI,GAAG,IAAA,mCAAiB,EAAC,MAAM,EAAE,UAAU,CAAC,CAAC;SAC9C;KACF;IAED,OAAO,CAAC,EAAE,GAAG,MAAM,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC,CAAC;AAtCW,QAAA,WAAW,eAsCtB","sourcesContent":["import {\n  DefaultSelection,\n  FindManyFunction,\n  findManyOperation,\n  GadgetRecord,\n  get,\n  hydrateConnection,\n  LimitToKnownKeys,\n  Select,\n} from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { useQuery, UseQueryArgs, UseQueryResponse } from \"urql\";\nimport { OptionsType } from \"./OptionsType\";\nimport { useStructuralMemo } from \"./useStructuralMemo\";\n\n/**\n * React hook to fetch many Gadget records using the `findMany` method of a given manager.\n *\n * @param manager Gadget model manager to use\n * @param options options for filtering and searching records, and selecting the fields in each record of the result\n *\n * @example\n *\n * ```\n * export function Users() {\n *   const [result, refresh] = useFindMany(Client.user, {\n *     select: {\n *       name: true,\n *     },\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No users found</>;\n *\n *   return <>{result.data.map((user) => <div>{user.name}</div>)}</>;\n * }\n * ```\n */\nexport const useFindMany = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends FindManyFunction<GivenOptions, any, SchemaT, any>,\n  Options extends F[\"optionsType\"] & Omit<UseQueryArgs, \"query\" | \"variables\">\n>(\n  manager: { findMany: F },\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"]> & Omit<UseQueryArgs, \"query\" | \"variables\">\n): UseQueryResponse<\n  GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>[]\n> => {\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return findManyOperation(\n      manager.findMany.operationName,\n      manager.findMany.defaultSelection,\n      manager.findMany.modelApiIdentifier,\n      memoizedOptions\n    );\n  }, [manager, memoizedOptions]);\n\n  const [result, refresh] = useQuery({\n    query: plan.query,\n    variables: plan.variables,\n    context: options?.context,\n    pause: options?.pause,\n    requestPolicy: options?.requestPolicy,\n  });\n\n  let data = result.data;\n  if (data) {\n    const connection = get(result.data, [manager.findMany.operationName]);\n    if (connection) {\n      data = hydrateConnection(result, connection);\n    }\n  }\n\n  return [{ ...result, data }, refresh];\n};\n"]}
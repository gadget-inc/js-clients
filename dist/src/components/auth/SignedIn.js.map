{"version":3,"file":"SignedIn.js","sourceRoot":"","sources":["../../../../src/components/auth/SignedIn.tsx"],"names":[],"mappings":";;;;;;AACA,kDAA0B;AAC1B,sDAAmD;AACnD,4CAAqD;AAErD;;GAEG;AACI,MAAM,QAAQ,GAAG,CAAC,KAA8B,EAAE,EAAE;IACzD,MAAM,OAAO,GAAG,IAAA,uBAAU,GAAE,CAAC;IAC7B,IAAI,OAAO,IAAI,IAAA,yBAAiB,EAAC,OAAO,CAAC,EAAE;QACzC,OAAO,8DAAG,KAAK,CAAC,QAAQ,CAAI,CAAC;KAC9B;SAAM;QACL,OAAO,IAAI,CAAC;KACb;AACH,CAAC,CAAC;AAPW,QAAA,QAAQ,YAOnB","sourcesContent":["import type { ReactNode } from \"react\";\nimport React from \"react\";\nimport { useSession } from \"../../auth/useSession\";\nimport { isSessionSignedIn } from \"../../auth/utils\";\n\n/**\n * Renders its `children` if the current `Session` is signed in (has an associated `User`), otherwise renders nothing.\n */\nexport const SignedIn = (props: { children: ReactNode }) => {\n  const session = useSession();\n  if (session && isSessionSignedIn(session)) {\n    return <>{props.children}</>;\n  } else {\n    return null;\n  }\n};\n"]}
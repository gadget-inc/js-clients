{"version":3,"file":"useBulkAction.js","sourceRoot":"","sources":["../../src/useBulkAction.ts"],"names":[],"mappings":";;;AAAA,gEAUoC;AACpC,iCAAgC;AAChC,+BAAwD;AAExD,2DAAwD;AAExD;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACI,MAAM,aAAa,GAAG,CAM3B,MAAS,EACT,OAAqD,EAIrD,EAAE;IACF,MAAM,eAAe,GAAG,IAAA,qCAAiB,EAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,iCAAe,EACpB,MAAM,CAAC,aAAa,EACpB,MAAM,CAAC,gBAAgB,EACvB,MAAM,CAAC,kBAAkB,EACzB,MAAM,CAAC,mBAAmB,EAC1B,MAAM,CAAC,SAAS,EAChB,eAAe,EACf,MAAM,CAAC,SAAS,CACjB,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC;IAE9B,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,GAAG,IAAA,kBAAW,EAKvC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEd,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACvB,IAAI,IAAI,EAAE;QACR,6DAA6D;QAC7D,IAAI,MAAM,CAAC,gBAAgB,IAAI,IAAI,EAAE;YACnC,MAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,mBAAmB,CAAC,CAAC;YACpE,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;aACpC;YACD,IAAI,GAAG,IAAA,oCAAkB,EAAC,MAAM,EAAE,IAAA,qBAAG,EAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;SAC/D;KACF;IAED,OAAO;QACL;YACE,GAAG,MAAM;YACT,IAAI;SACL;QACD,CAAC,SAAS,EAAE,OAAO,EAAE,EAAE;YACrB,4HAA4H;YAC5H,yEAAyE;YACzE,OAAO,WAAW,CAAC,SAAS,EAAE;gBAC5B,GAAG,OAAO;gBACV,mBAAmB,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAmB,IAAI,EAAE,CAAC,EAAE,IAAA,4BAAU,EAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;aACtG,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AA1DW,QAAA,aAAa,iBA0DxB","sourcesContent":["import {\n  actionOperation,\n  BulkActionFunction,\n  capitalize,\n  DefaultSelection,\n  GadgetRecord,\n  get,\n  hydrateRecordArray,\n  LimitToKnownKeys,\n  Select,\n} from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { useMutation, UseMutationResponse } from \"urql\";\nimport { OptionsType } from \"./OptionsType\";\nimport { useStructuralMemo } from \"./useStructuralMemo\";\n\n/**\n * React hook to run a Gadget model bulk action.\n *\n * @param action any bulk action function from a Gadget manager\n * @param options action options, like selecting the fields in the result\n *\n * @example\n * ```\n * export function BulkFinish(props: { ids: string[]; }) {\n *   const [result, bulkFinish] = useBulkAction(Client.todo.bulkFinish, {\n *     select: {\n *       id: true,\n *     },\n *   });\n *\n *   const onClick = () => ;\n *\n *   return (\n *     <>\n *       {result.error && <>Failed to create user: {result.error.toString()}</>}\n *       {result.fetching && <>Creating user...</>}\n *       {result.data && <>Finished TODOs with ids={props.ids}</>}\n *       <button onClick={() => bulkFinish(ids))}>Bulk finish</button>\n *     </>\n *   );\n * }\n */\nexport const useBulkAction = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends BulkActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends F[\"optionsType\"]\n>(\n  action: F,\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"]>\n): UseMutationResponse<\n  GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>[],\n  Exclude<F[\"variablesType\"], null | undefined>\n> => {\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return actionOperation(\n      action.operationName,\n      action.defaultSelection,\n      action.modelApiIdentifier,\n      action.modelSelectionField,\n      action.variables,\n      memoizedOptions,\n      action.namespace\n    );\n  }, [action, memoizedOptions]);\n\n  const [result, runMutation] = useMutation<\n    GadgetRecord<\n      Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>\n    >[],\n    F[\"variablesType\"]\n  >(plan.query);\n\n  let data = result.data;\n  if (data) {\n    // TODO deal with deletion better than checking selectionType\n    if (action.defaultSelection != null) {\n      const dataPath = [action.operationName, action.modelSelectionField];\n      if (action.namespace) {\n        dataPath.unshift(action.namespace);\n      }\n      data = hydrateRecordArray(result, get(result.data, dataPath));\n    }\n  }\n\n  return [\n    {\n      ...result,\n      data,\n    },\n    (variables, context) => {\n      // Adding the model's additional typename ensures document cache will properly refresh, regardless of whether __typename was\n      // selected (and sometimes we can't even select it, like delete actions!)\n      return runMutation(variables, {\n        ...context,\n        additionalTypenames: [...(context?.additionalTypenames ?? []), capitalize(action.modelApiIdentifier)],\n      });\n    },\n  ];\n};\n"]}
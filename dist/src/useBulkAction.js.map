{"version":3,"file":"useBulkAction.js","sourceRoot":"","sources":["../../src/useBulkAction.ts"],"names":[],"mappings":";;;AACA,gEAA4G;AAC5G,iCAA6C;AAE7C,2DAAwD;AACxD,2DAAwD;AAExD,mCAAuC;AAEvC;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACI,MAAM,aAAa,GAAG,CAM3B,MAAS,EACT,OAAqD,EAIrD,EAAE;IACF,MAAM,eAAe,GAAG,IAAA,qCAAiB,EAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,iCAAe,EACpB,MAAM,CAAC,aAAa,EACpB,MAAM,CAAC,gBAAgB,EACvB,MAAM,CAAC,kBAAkB,EACzB,MAAM,CAAC,mBAAmB,EAC1B,MAAM,CAAC,SAAS,EAChB,eAAe,EACf,MAAM,CAAC,SAAS,CACjB,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC;IAE9B,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,GAAG,IAAA,qCAAiB,EAK7C,IAAI,CAAC,KAAK,CAAC,CAAC;IAEd,MAAM,iBAAiB,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;IAEzF,OAAO;QACL,iBAAiB;QACjB,IAAA,mBAAW,EACT,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YAC3B,4HAA4H;YAC5H,yEAAyE;YACzE,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE;gBAC1C,GAAG,OAAO;gBACV,mBAAmB,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAmB,IAAI,EAAE,CAAC,EAAE,IAAA,sCAAoB,EAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;aAChH,CAAC,CAAC;YACH,OAAO,aAAa,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,EAAE,EAAE,MAAM,CAAC,CAAC;QAC/D,CAAC,EACD,CAAC,MAAM,EAAE,WAAW,CAAC,CACtB;KACF,CAAC;AACJ,CAAC,CAAC;AAjDW,QAAA,aAAa,iBAiDxB;AAEF,MAAM,aAAa,GAAG,CAAC,MAAkC,EAAE,MAAmD,EAAE,EAAE;IAChH,IAAI,KAAK,GAAG,oBAAY,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC7D,IAAI,IAAI,GAAG,SAAS,CAAC;IACrB,IAAI,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;QACzB,6DAA6D;QAC7D,IAAI,MAAM,CAAC,gBAAgB,IAAI,IAAI,EAAE;YACnC,MAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YACxC,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;aACpC;YACD,MAAM,YAAY,GAAG,IAAA,qBAAG,EAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAChD,IAAI,YAAY,EAAE;gBAChB,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;gBACtC,IAAI,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;oBACvB,KAAK,GAAG,oBAAY,CAAC,iBAAiB,CAAC,MAAM,EAAG,KAAa,EAAE,QAAQ,CAAC,CAAC;iBAC1E;qBAAM;oBACL,IAAI,GAAG,IAAA,oCAAkB,EAAC,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC;iBAC7E;aACF;SACF;KACF;IACD,OAAO,EAAE,GAAG,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AACpC,CAAC,CAAC","sourcesContent":["import type { BulkActionFunction, DefaultSelection, GadgetRecord, LimitToKnownKeys, Select } from \"@gadgetinc/api-client-core\";\nimport { actionOperation, capitalizeIdentifier, get, hydrateRecordArray } from \"@gadgetinc/api-client-core\";\nimport { useCallback, useMemo } from \"react\";\nimport type { UseMutationState } from \"urql\";\nimport { useGadgetMutation } from \"./useGadgetMutation\";\nimport { useStructuralMemo } from \"./useStructuralMemo\";\nimport type { ActionHookResult, OptionsType } from \"./utils\";\nimport { ErrorWrapper } from \"./utils\";\n\n/**\n * React hook to run a Gadget model bulk action.\n *\n * @param action any bulk action function from a Gadget manager\n * @param options action options, like selecting the fields in the result\n *\n * @example\n * ```\n * export function BulkFinish(props: { ids: string[]; }) {\n *   const [result, bulkFinish] = useBulkAction(Client.todo.bulkFinish, {\n *     select: {\n *       id: true,\n *     },\n *   });\n *\n *   const onClick = () => ;\n *\n *   return (\n *     <>\n *       {result.error && <>Failed to create user: {result.error.toString()}</>}\n *       {result.fetching && <>Creating user...</>}\n *       {result.data && <>Finished TODOs with ids={props.ids}</>}\n *       <button onClick={() => bulkFinish(ids))}>Bulk finish</button>\n *     </>\n *   );\n * }\n */\nexport const useBulkAction = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends BulkActionFunction<GivenOptions, any, any, SchemaT, any>,\n  Options extends F[\"optionsType\"]\n>(\n  action: F,\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"]>\n): ActionHookResult<\n  GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>[],\n  Exclude<F[\"variablesType\"], null | undefined>\n> => {\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return actionOperation(\n      action.operationName,\n      action.defaultSelection,\n      action.modelApiIdentifier,\n      action.modelSelectionField,\n      action.variables,\n      memoizedOptions,\n      action.namespace\n    );\n  }, [action, memoizedOptions]);\n\n  const [result, runMutation] = useGadgetMutation<\n    GadgetRecord<\n      Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>\n    >[],\n    F[\"variablesType\"]\n  >(plan.query);\n\n  const transformedResult = useMemo(() => processResult(result, action), [result, action]);\n\n  return [\n    transformedResult,\n    useCallback(\n      async (variables, context) => {\n        // Adding the model's additional typename ensures document cache will properly refresh, regardless of whether __typename was\n        // selected (and sometimes we can't even select it, like delete actions!)\n        const result = await runMutation(variables, {\n          ...context,\n          additionalTypenames: [...(context?.additionalTypenames ?? []), capitalizeIdentifier(action.modelApiIdentifier)],\n        });\n        return processResult({ fetching: false, ...result }, action);\n      },\n      [action, runMutation]\n    ),\n  ];\n};\n\nconst processResult = (result: UseMutationState<any, any>, action: BulkActionFunction<any, any, any, any, any>) => {\n  let error = ErrorWrapper.forMaybeCombinedError(result.error);\n  let data = undefined;\n  if (result.data && !error) {\n    // TODO deal with deletion better than checking selectionType\n    if (action.defaultSelection != null) {\n      const dataPath = [action.operationName];\n      if (action.namespace) {\n        dataPath.unshift(action.namespace);\n      }\n      const mutationData = get(result.data, dataPath);\n      if (mutationData) {\n        const errors = mutationData[\"errors\"];\n        if (errors && errors[0]) {\n          error = ErrorWrapper.forErrorsResponse(errors, (error as any)?.response);\n        } else {\n          data = hydrateRecordArray(result, mutationData[action.modelSelectionField]);\n        }\n      }\n    }\n  }\n  return { ...result, error, data };\n};\n"]}
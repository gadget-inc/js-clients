{"version":3,"file":"operationRunners.js","sourceRoot":"","sources":["../../src/operationRunners.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  actionOperation,\n  findManyOperation,\n  findOneByFieldOperation,\n  GadgetNonUniqueDataError,\n  globalActionOperation,\n  VariableOptions,\n} from \".\";\nimport { FieldSelection } from \"./FieldSelection\";\nimport { GadgetConnection } from \"./GadgetConnection\";\nimport { GadgetRecord } from \"./GadgetRecord\";\nimport { GadgetRecordList } from \"./GadgetRecordList\";\nimport { AnyModelManager } from \"./ModelManager\";\nimport { findOneOperation, PaginationOptions, SelectionOptions } from \"./operationBuilders\";\nimport { assertMutationSuccess, assertOperationSuccess, get, hydrateConnection, hydrateRecord, hydrateRecordArray } from \"./support\";\n\nexport const findOneRunner = async <Shape = any>(\n  modelManager: { connection: GadgetConnection },\n  operation: string,\n  id: string | undefined,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: SelectionOptions | null\n) => {\n  const plan = findOneOperation(operation, id, defaultSelection, modelApiIdentifier, options);\n  const response = await modelManager.connection.currentClient.query(plan.query, plan.variables).toPromise();\n  const record = assertOperationSuccess(response, [operation]);\n  return hydrateRecord<Shape>(response, record);\n};\n\nexport const findOneByFieldRunner = async <Shape = any>(\n  modelManager: { connection: GadgetConnection },\n  operation: string,\n  fieldName: string,\n  fieldValue: string,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: SelectionOptions | null\n) => {\n  const plan = findOneByFieldOperation(operation, fieldName, fieldValue, defaultSelection, modelApiIdentifier, options);\n  const response = await modelManager.connection.currentClient.query(plan.query, plan.variables).toPromise();\n  const connectionObject = assertOperationSuccess(response, [operation]);\n  const records = hydrateConnection<Shape>(response, connectionObject);\n\n  if (records.length > 1) {\n    throw new GadgetNonUniqueDataError(\n      `More than one record found for ${modelApiIdentifier}.${fieldName} = ${fieldValue}. Please confirm your unique validation is not reporting an error.`\n    );\n  }\n\n  return records[0];\n};\n\nexport const findManyRunner = async <Shape = any>(\n  modelManager: AnyModelManager,\n  operation: string,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: PaginationOptions\n) => {\n  const plan = findManyOperation(operation, defaultSelection, modelApiIdentifier, options);\n  const response = await modelManager.connection.currentClient.query(plan.query, plan.variables).toPromise();\n  const connectionObject = assertOperationSuccess(response, [operation]);\n  const records = hydrateConnection<Shape>(response, connectionObject);\n  return GadgetRecordList.boot<Shape>(modelManager, records, { options, pageInfo: connectionObject.pageInfo });\n};\n\nexport interface ActionRunner {\n  <Shape = any>(\n    modelManager: { connection: GadgetConnection },\n    operation: string,\n    defaultSelection: FieldSelection | null,\n    modelApiIdentifier: string,\n    modelSelectionField: string,\n    isBulkAction: false,\n    variables: VariableOptions,\n    options?: SelectionOptions | null,\n    namespace?: string | null\n  ): Promise<Shape extends void ? void : GadgetRecord<Shape>>;\n\n  <Shape = any>(\n    modelManager: { connection: GadgetConnection },\n    operation: string,\n    defaultSelection: FieldSelection | null,\n    modelApiIdentifier: string,\n    modelSelectionField: string,\n    isBulkAction: true,\n    variables: VariableOptions,\n    options?: SelectionOptions | null,\n    namespace?: string | null\n  ): Promise<Shape extends void ? void : GadgetRecord<Shape>[]>;\n}\n\nexport const actionRunner: ActionRunner = async <Shape = any>(\n  modelManager: { connection: GadgetConnection },\n  operation: string,\n  defaultSelection: FieldSelection | null,\n  modelApiIdentifier: string,\n  modelSelectionField: string,\n  isBulkAction: boolean,\n  variables: VariableOptions,\n  options?: SelectionOptions | null,\n  namespace?: string | null\n) => {\n  const plan = actionOperation(operation, defaultSelection, modelApiIdentifier, modelSelectionField, variables, options, namespace);\n  const response = await modelManager.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n\n  // pass bulk responses through without any assertions since we can have a success: false response but still want\n  // to process it in a similar fashion since some of the records could have been processed\n  const dataPath = namespace ? [namespace, operation] : [operation];\n  const mutationResult = isBulkAction ? get(response.data, dataPath) : assertMutationSuccess(response, dataPath);\n\n  // Currently, delete actions have a null selection. We do an early return for this because `hydrateRecordArray` will fail\n  // if there's nothing at `mutationResult[modelSelectionField]`, but the caller isn't expecting a return (void).\n  if (defaultSelection == null) {\n    return;\n  }\n\n  // todo this does not support pagination params right now, we'll need to add it to bulk action Results\n  if (isBulkAction) {\n    return hydrateRecordArray<Shape>(response, mutationResult[modelSelectionField]);\n  } else {\n    return hydrateRecord<Shape>(response, mutationResult[modelSelectionField]);\n  }\n};\n\nexport const globalActionRunner = async (\n  connection: GadgetConnection,\n  operation: string,\n  variables: VariableOptions,\n  namespace?: string | null\n) => {\n  const plan = globalActionOperation(operation, variables, namespace);\n  const response = await connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n  const dataPath = namespace ? [namespace, operation] : [operation];\n  return assertMutationSuccess(response, dataPath).result;\n};\n"]}
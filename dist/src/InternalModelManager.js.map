{"version":3,"file":"InternalModelManager.js","sourceRoot":"","sources":["../../src/InternalModelManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { query } from \"gql-query-builder\";\nimport { GadgetConnection } from \"./GadgetConnection\";\nimport { GadgetRecord, RecordShape } from \"./GadgetRecord\";\nimport { GadgetRecordList } from \"./GadgetRecordList\";\nimport { GadgetTransaction } from \"./GadgetTransaction\";\nimport {\n  assert,\n  assertMutationSuccess,\n  assertNullableOperationSuccess,\n  assertOperationSuccess,\n  camelize,\n  capitalize,\n  hydrateConnection,\n  hydrateRecord,\n} from \"./support\";\n\nconst internalErrorsDetails = `\nfragment InternalErrorsDetails on ExecutionError {\n  code\n  message\n  ...on InvalidRecordError {\n    validationErrors {\n      apiIdentifier\n      message\n    }\n  }\n}\n`;\n\nconst internalHydrationPlan = (modelApiIdentifer: string) => `\n  gadgetMeta {\n    hydrations(modelName: \"${modelApiIdentifer}\")\n  }\n`;\n\nexport const internalFindOneQuery = (apiIdentifier: string) => {\n  const capitalizedApiIdentifier = capitalize(apiIdentifier);\n  return `\n    query InternalFind${capitalizedApiIdentifier}($id: GadgetID!) {\n      ${internalHydrationPlan(apiIdentifier)}\n      internal {\n        ${apiIdentifier}(id: $id)\n      }\n    }\n    `;\n};\n\nexport const internalFindFirstQuery = (apiIdentifier: string, options?: RecordData) => {\n  const capitalizedApiIdentifier = capitalize(apiIdentifier);\n\n  const defaultVariables = {\n    ...(options?.search && { search: { value: options?.search, type: \"String\", required: false } }),\n    ...(options?.sort && { sort: { value: options?.sort, type: `${capitalizedApiIdentifier}Sort!`, list: true } }),\n    ...(options?.filter && { filter: { value: options?.filter, type: `${capitalizedApiIdentifier}Filter!`, list: true } }),\n  };\n\n  return query(\n    [\n      {\n        operation: \"internal\",\n        fields: [\n          {\n            operation: `list${capitalizedApiIdentifier}`,\n            fields: [\n              {\n                edges: [\"node\"],\n              },\n            ],\n            variables: {\n              ...defaultVariables,\n              first: { value: 1, type: \"Int\" },\n            },\n          },\n        ],\n      },\n    ],\n    null,\n    { operationName: `InternalFindFirst${capitalizedApiIdentifier}` }\n  );\n};\n\nexport const internalFindManyQuery = (apiIdentifier: string, options?: RecordData) => {\n  const capitalizedApiIdentifier = capitalize(apiIdentifier);\n\n  const defaultVariables = {\n    ...(options?.search && { search: { value: options?.search, type: \"String\", required: false } }),\n    ...(options?.sort && { sort: { value: options?.sort, type: `${capitalizedApiIdentifier}Sort!`, list: true } }),\n    ...(options?.filter && { filter: { value: options?.filter, type: `${capitalizedApiIdentifier}Filter!`, list: true } }),\n  };\n\n  return query(\n    [\n      {\n        operation: \"internal\",\n        fields: [\n          {\n            operation: `list${capitalizedApiIdentifier}`,\n            fields: [\n              {\n                pageInfo: [\"hasNextPage\", \"hasPreviousPage\", \"startCursor\", \"endCursor\"],\n              },\n              {\n                edges: [\"cursor\", \"node\"],\n              },\n            ],\n            variables: {\n              ...defaultVariables,\n              after: { value: options?.after, type: \"String\" },\n              before: { value: options?.before, type: \"String\" },\n              first: { value: options?.first, type: \"Int\" },\n              last: { value: options?.last, type: \"Int\" },\n            },\n          },\n        ],\n      },\n    ],\n    null,\n    { operationName: `InternalFindMany${capitalizedApiIdentifier}` }\n  );\n};\n\nexport const internalCreateMutation = (apiIdentifier: string) => {\n  const capitalizedApiIdentifier = capitalize(apiIdentifier);\n  return `\n    ${internalErrorsDetails}\n    \n    mutation InternalCreate${capitalizedApiIdentifier}($record: Internal${capitalizedApiIdentifier}Input) {\n      ${internalHydrationPlan(apiIdentifier)}\n      internal {\n        create${capitalizedApiIdentifier}(${apiIdentifier}: $record) {\n          success\n          errors {\n            ... InternalErrorsDetails\n          }\n          ${apiIdentifier}\n        }\n      }\n    }\n  `;\n};\n\nexport const internalUpdateMutation = (apiIdentifier: string) => {\n  const capitalizedApiIdentifier = capitalize(apiIdentifier);\n  return `\n    ${internalErrorsDetails}\n    \n    mutation InternalUpdate${capitalizedApiIdentifier}($id: GadgetID!, $record: Internal${capitalizedApiIdentifier}Input) {\n      ${internalHydrationPlan(apiIdentifier)}\n      internal {\n        update${capitalizedApiIdentifier}(id: $id, ${apiIdentifier}: $record) {\n          success\n          errors {\n            ... InternalErrorsDetails\n          }\n          ${apiIdentifier}\n        }\n      }\n    }\n  `;\n};\n\nexport const internalDeleteMutation = (apiIdentifier: string) => {\n  const capitalizedApiIdentifier = capitalize(apiIdentifier);\n  return `\n    ${internalErrorsDetails}\n    \n    mutation InternalDelete${capitalizedApiIdentifier}($id: GadgetID!) {\n      ${internalHydrationPlan(apiIdentifier)}\n      internal {\n        delete${capitalizedApiIdentifier}(id: $id) {\n          success\n          errors {\n            ... InternalErrorsDetails\n          }\n        }\n      }\n    }\n  `;\n};\n\nexport const internalDeleteManyMutation = (apiIdentifier: string) => {\n  const capitalizedApiIdentifier = capitalize(apiIdentifier);\n  return `\n    ${internalErrorsDetails}\n    \n    mutation InternalDeleteMany${capitalizedApiIdentifier}(\n      $search: String\n      $filter: [${capitalizedApiIdentifier}Filter!]\n    ) {\n      ${internalHydrationPlan(apiIdentifier)}\n      internal {\n        deleteMany${capitalizedApiIdentifier}(search: $search, filter: $filter) {\n          success\n          errors {\n            ... InternalErrorsDetails\n          }\n        }\n      }\n    }\n  `;\n};\n\nexport type RecordData = Record<string, any>;\n\n/**\n * Model specific manager for a given model's internal representation. Used to access the inner, raw data in the Gadget database. Use with caution -- it's easy to break stuff, and the Public API should be used when possible!\n */\nexport class InternalModelManager {\n  private readonly capitalizedApiIdentifier: string;\n\n  constructor(private readonly apiIdentifier: string, readonly connection: GadgetConnection) {\n    this.capitalizedApiIdentifier = camelize(apiIdentifier);\n  }\n\n  async findOne(id: string, throwOnEmptyData = true): Promise<GadgetRecord<RecordData>> {\n    const response = await this.connection.currentClient.query(internalFindOneQuery(this.apiIdentifier), { id }).toPromise();\n    const assertSuccess = throwOnEmptyData ? assertOperationSuccess : assertNullableOperationSuccess;\n    const result = assertSuccess(response, [\"internal\", this.apiIdentifier]);\n    return await hydrateRecord(response, result);\n  }\n\n  async maybeFindOne(id: string): Promise<GadgetRecord<RecordData> | null> {\n    const record = await this.findOne(id, false);\n    return record.isEmpty() ? null : record;\n  }\n\n  async findMany(options?: RecordData): Promise<GadgetRecordList<any>> {\n    const plan = internalFindManyQuery(this.apiIdentifier, options);\n    const response = await this.connection.currentClient.query(plan.query, plan.variables).toPromise();\n    const connection = assertNullableOperationSuccess(response, [\"internal\", `list${this.capitalizedApiIdentifier}`]);\n    const records = hydrateConnection(response, connection);\n\n    return GadgetRecordList.boot(this, records, { options, pageInfo: connection.pageInfo });\n  }\n\n  async findFirst(options?: RecordData, throwOnEmptyData = true): Promise<GadgetRecord<RecordShape>> {\n    const plan = internalFindFirstQuery(this.apiIdentifier, options);\n    const response = await this.connection.currentClient.query(plan.query, plan.variables).toPromise();\n\n    let connection;\n    if (throwOnEmptyData === false) {\n      // If this is a nullable operation, don't throw errors on empty\n      connection = assertNullableOperationSuccess(response, [\"internal\", `list${this.capitalizedApiIdentifier}`]);\n    } else {\n      // Otherwise, passthrough the `throwOnEmptyData` flag, to account for\n      // `findMany` (allows empty arrays) vs `findFirst` (no empty result) usage.\n      connection = assertOperationSuccess(response, [\"internal\", `list${this.capitalizedApiIdentifier}`], throwOnEmptyData);\n    }\n\n    const records = hydrateConnection(response, connection);\n    const recordList = GadgetRecordList.boot(this, records, { options, pageInfo: connection.pageInfo });\n    return recordList[0];\n  }\n\n  async maybeFindFirst(options?: RecordData): Promise<GadgetRecord<RecordShape> | null> {\n    return await this.findFirst(options, false);\n  }\n\n  async create(record: RecordData): Promise<GadgetRecord<RecordShape>> {\n    return await this.transaction(async (transaction) => {\n      const response = await transaction.client\n        .mutation(internalCreateMutation(this.apiIdentifier), {\n          record: record[this.apiIdentifier],\n        })\n        .toPromise();\n      const result = assertMutationSuccess(response, [\"internal\", `create${this.capitalizedApiIdentifier}`]);\n      return await hydrateRecord(response, result[this.apiIdentifier]);\n    });\n  }\n\n  async update(id: string, record: RecordData): Promise<GadgetRecord<RecordShape>> {\n    assert(id, `Can't update a record without an ID passed`);\n    return await this.transaction(async (transaction) => {\n      const response = await transaction.client\n        .mutation(internalUpdateMutation(this.apiIdentifier), {\n          id,\n          record: record[this.apiIdentifier],\n        })\n        .toPromise();\n      const result = assertMutationSuccess(response, [\"internal\", `update${this.capitalizedApiIdentifier}`]);\n\n      return await hydrateRecord(response, result[this.apiIdentifier]);\n    });\n  }\n\n  async delete(id: string): Promise<void> {\n    assert(id, `Can't delete a record without an ID`);\n    return await this.transaction(async (transaction) => {\n      const response = await transaction.client.mutation(internalDeleteMutation(this.apiIdentifier), { id }).toPromise();\n      assertMutationSuccess(response, [\"internal\", `delete${this.capitalizedApiIdentifier}`]);\n    });\n  }\n\n  async deleteMany(options?: { search?: string; filter?: RecordData }): Promise<void> {\n    return await this.transaction(async (transaction) => {\n      const response = await transaction.client.mutation(internalDeleteManyMutation(this.apiIdentifier), options).toPromise();\n      assertMutationSuccess(response, [\"internal\", `deleteMany${this.capitalizedApiIdentifier}`]);\n    });\n  }\n\n  async transaction<T>(callback: (transaction: GadgetTransaction) => Promise<T>): Promise<T> {\n    return await this.connection.transaction(callback);\n  }\n}\n"]}
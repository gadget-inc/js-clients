{"version":3,"file":"useFindOne.js","sourceRoot":"","sources":["../../src/useFindOne.ts"],"names":[],"mappings":";;;AAAA,gEAWoC;AACpC,iCAAgC;AAChC,+BAA+E;AAE/E,2DAAwD;AAExD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACI,MAAM,UAAU,GAAG,CAMxB,OAAuB,EACvB,EAAU,EACV,OAAiG,EAGjG,EAAE;IACF,MAAM,eAAe,GAAG,IAAA,qCAAiB,EAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,kCAAgB,EACrB,OAAO,CAAC,OAAO,CAAC,aAAa,EAC7B,EAAE,EACF,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAChC,OAAO,CAAC,OAAO,CAAC,kBAAkB,EAClC,eAAe,CAChB,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,EAAE,eAAe,CAAC,CAAC,CAAC;IAEnC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,IAAA,eAAQ,EAAC,IAAA,8BAAY,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAEhE,MAAM,QAAQ,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACjD,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACvB,IAAI,IAAI,EAAE;QACR,IAAI,GAAG,IAAA,+BAAa,EAAC,MAAM,EAAE,IAAA,qBAAG,EAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;KAC1D;IAED,MAAM,gBAAgB,GAAG,IAAA,qCAAmB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC/D,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IACzB,IAAI,CAAC,KAAK,IAAI,gBAAgB,EAAE;QAC9B,KAAK,GAAG,IAAI,oBAAa,CAAC;YACxB,aAAa,EAAE,CAAC,gBAAgB,CAAC;SAClC,CAAC,CAAC;KACJ;IAED,OAAO,CAAC,EAAE,GAAG,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,OAAO,CAAC,CAAC;AAC/C,CAAC,CAAC;AAxCW,QAAA,UAAU,cAwCrB","sourcesContent":["import {\n  DefaultSelection,\n  FindOneFunction,\n  findOneOperation,\n  GadgetRecord,\n  get,\n  getNonNullableError,\n  getQueryArgs,\n  hydrateRecord,\n  LimitToKnownKeys,\n  Select,\n} from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { CombinedError, useQuery, UseQueryArgs, UseQueryResponse } from \"urql\";\nimport { OptionsType } from \"./OptionsType\";\nimport { useStructuralMemo } from \"./useStructuralMemo\";\n\n/**\n * React hook to fetch a Gadget record using the `findOne` method of a given manager.\n *\n * @param manager Gadget model manager to use\n * @param id id of the record to fetch\n * @param options options for selecting the fields in the result\n *\n * @example\n * ```\n * export function User(props: { id: string }) {\n *   const [result, refresh] = useFindOne(Client.user, props.id, {\n *     select: {\n *       name: true,\n *     },\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No user found with id={props.id}</>;\n *\n *   return <div>{result.data.name}</div>;\n * }\n * ```\n */\nexport const useFindOne = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends FindOneFunction<GivenOptions, any, SchemaT, any>,\n  Options extends F[\"optionsType\"] & Omit<UseQueryArgs, \"query\" | \"variables\">\n>(\n  manager: { findOne: F },\n  id: string,\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"] & Omit<UseQueryArgs, \"query\" | \"variables\">>\n): UseQueryResponse<\n  GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>\n> => {\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return findOneOperation(\n      manager.findOne.operationName,\n      id,\n      manager.findOne.defaultSelection,\n      manager.findOne.modelApiIdentifier,\n      memoizedOptions\n    );\n  }, [manager, id, memoizedOptions]);\n\n  const [result, refresh] = useQuery(getQueryArgs(plan, options));\n\n  const dataPath = [manager.findOne.operationName];\n  let data = result.data;\n  if (data) {\n    data = hydrateRecord(result, get(result.data, dataPath));\n  }\n\n  const nonNullableError = getNonNullableError(result, dataPath);\n  let error = result.error;\n  if (!error && nonNullableError) {\n    error = new CombinedError({\n      graphQLErrors: [nonNullableError],\n    });\n  }\n\n  return [{ ...result, data, error }, refresh];\n};\n"]}
{"version":3,"file":"useFindOne.js","sourceRoot":"","sources":["../../src/useFindOne.ts"],"names":[],"mappings":";;;AAAA,gEASoC;AACpC,iCAAgC;AAChC,+BAAgE;AAEhE,2DAAwD;AAExD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACI,MAAM,UAAU,GAAG,CAMxB,OAAuB,EACvB,EAAU,EACV,OAAiG,EAGjG,EAAE;IACF,MAAM,eAAe,GAAG,IAAA,qCAAiB,EAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,kCAAgB,EACrB,OAAO,CAAC,OAAO,CAAC,aAAa,EAC7B,EAAE,EACF,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAChC,OAAO,CAAC,OAAO,CAAC,kBAAkB,EAClC,eAAe,CAChB,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,EAAE,eAAe,CAAC,CAAC,CAAC;IAEnC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,IAAA,eAAQ,EAAC;QACjC,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,SAAS,EAAE,IAAI,CAAC,SAAS;QACzB,OAAO,EAAE,OAAO,EAAE,OAAO;QACzB,KAAK,EAAE,OAAO,EAAE,KAAK;QACrB,aAAa,EAAE,OAAO,EAAE,aAAa;KACtC,CAAC,CAAC;IAEH,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACvB,IAAI,IAAI,EAAE;QACR,IAAI,GAAG,IAAA,+BAAa,EAAC,MAAM,EAAE,IAAA,qBAAG,EAAC,MAAM,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;KACjF;IAED,OAAO;QACL;YACE,GAAG,MAAM;YACT,IAAI;SACL;QACD,OAAO;KACR,CAAC;AACJ,CAAC,CAAC;AA3CW,QAAA,UAAU,cA2CrB","sourcesContent":["import {\n  DefaultSelection,\n  FindOneFunction,\n  findOneOperation,\n  GadgetRecord,\n  get,\n  hydrateRecord,\n  LimitToKnownKeys,\n  Select,\n} from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { useQuery, UseQueryArgs, UseQueryResponse } from \"urql\";\nimport { OptionsType } from \"./OptionsType\";\nimport { useStructuralMemo } from \"./useStructuralMemo\";\n\n/**\n * React hook to fetch a Gadget record using the `findOne` method of a given manager.\n *\n * @param manager Gadget model manager to use\n * @param id id of the record to fetch\n * @param options options for selecting the fields in the result\n *\n * @example\n * ```\n * export function User(props: { id: string }) {\n *   const [result, refresh] = useFindOne(Client.user, props.id, {\n *     select: {\n *       name: true,\n *     },\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No user found with id={props.id}</>;\n *\n *   return <div>{result.data.name}</div>;\n * }\n * ```\n */\nexport const useFindOne = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends FindOneFunction<GivenOptions, any, SchemaT, any>,\n  Options extends F[\"optionsType\"] & Omit<UseQueryArgs, \"query\" | \"variables\">\n>(\n  manager: { findOne: F },\n  id: string,\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"] & Omit<UseQueryArgs, \"query\" | \"variables\">>\n): UseQueryResponse<\n  GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>\n> => {\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return findOneOperation(\n      manager.findOne.operationName,\n      id,\n      manager.findOne.defaultSelection,\n      manager.findOne.modelApiIdentifier,\n      memoizedOptions\n    );\n  }, [manager, id, memoizedOptions]);\n\n  const [result, refresh] = useQuery({\n    query: plan.query,\n    variables: plan.variables,\n    context: options?.context,\n    pause: options?.pause,\n    requestPolicy: options?.requestPolicy,\n  });\n\n  let data = result.data;\n  if (data) {\n    data = hydrateRecord(result, get(result.data, [manager.findOne.operationName]));\n  }\n\n  return [\n    {\n      ...result,\n      data,\n    },\n    refresh,\n  ];\n};\n"]}
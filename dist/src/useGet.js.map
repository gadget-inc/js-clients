{"version":3,"file":"useGet.js","sourceRoot":"","sources":["../../src/useGet.ts"],"names":[],"mappings":";;;AAAA,gEASoC;AACpC,iCAAgC;AAChC,+BAAkD;AAElD,2DAAwD;AAExD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACI,MAAM,MAAM,GAAG,CAMpB,OAAmB,EACnB,OAAqD,EAGrD,EAAE;IACF,MAAM,eAAe,GAAG,IAAA,qCAAiB,EAAC,OAAO,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACxB,OAAO,IAAA,kCAAgB,EACrB,OAAO,CAAC,GAAG,CAAC,aAAa,EACzB,SAAS,EACT,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAC5B,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAC9B,eAAe,CAChB,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;IAE/B,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,IAAA,eAAQ,EAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IAErF,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACvB,IAAI,IAAI,EAAE;QACR,IAAI,GAAG,IAAA,+BAAa,EAAC,MAAM,EAAE,IAAA,qBAAG,EAAC,MAAM,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;KAC7E;IAED,OAAO;QACL;YACE,GAAG,MAAM;YACT,IAAI;SACL;QACD,OAAO;KACR,CAAC;AACJ,CAAC,CAAC;AApCW,QAAA,MAAM,UAoCjB","sourcesContent":["import {\n  DefaultSelection,\n  findOneOperation,\n  GadgetRecord,\n  get,\n  GetFunction,\n  hydrateRecord,\n  LimitToKnownKeys,\n  Select,\n} from \"@gadgetinc/api-client-core\";\nimport { useMemo } from \"react\";\nimport { useQuery, UseQueryResponse } from \"urql\";\nimport { OptionsType } from \"./OptionsType\";\nimport { useStructuralMemo } from \"./useStructuralMemo\";\n\n/**\n * React hook to fetch a Gadget record using the `get` method of a given \"singleton\" manager.\n *\n * @param manager Gadget model manager to use\n * @param options options for selecting the fields in the result\n *\n * @example\n * ```\n * export function CurrentSession(props: { id: string }) {\n *   const [result, refresh] = useGet(Client.currentSession, {\n *     select: {\n *       userId: true,\n *     },\n *   });\n *\n *   if (result.error) return <>Error: {result.error.toString()}</>;\n *   if (result.fetching && !result.data) return <>Fetching...</>;\n *   if (!result.data) return <>No current session found</>;\n *\n *   return <div>Current session user id: {result.data.userId}</div>;\n * }\n * ```\n */\nexport const useGet = <\n  GivenOptions extends OptionsType, // currently necessary for Options to be a narrow type (e.g., `true` instead of `boolean`)\n  SchemaT,\n  F extends GetFunction<GivenOptions, any, SchemaT, any>,\n  Options extends F[\"optionsType\"]\n>(\n  manager: { get: F },\n  options?: LimitToKnownKeys<Options, F[\"optionsType\"]>\n): UseQueryResponse<\n  GadgetRecord<Select<Exclude<F[\"schemaType\"], null | undefined>, DefaultSelection<F[\"selectionType\"], Options, F[\"defaultSelection\"]>>>\n> => {\n  const memoizedOptions = useStructuralMemo(options);\n  const plan = useMemo(() => {\n    return findOneOperation(\n      manager.get.operationName,\n      undefined,\n      manager.get.defaultSelection,\n      manager.get.modelApiIdentifier,\n      memoizedOptions\n    );\n  }, [manager, memoizedOptions]);\n\n  const [result, refresh] = useQuery({ query: plan.query, variables: plan.variables });\n\n  let data = result.data;\n  if (data) {\n    data = hydrateRecord(result, get(result.data, [manager.get.operationName]));\n  }\n\n  return [\n    {\n      ...result,\n      data,\n    },\n    refresh,\n  ];\n};\n"]}